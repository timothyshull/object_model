TranslationUnitDecl 0x7fe62f80ead0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe62f80f060 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe62f80ed40 '__int128'
|-TypedefDecl 0x7fe62f80f0d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe62f80ed60 'unsigned __int128'
|-TypedefDecl 0x7fe62f80f418 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe62f80f1c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fe62f80f128 '__NSConstantString_tag'
|-TypedefDecl 0x7fe62f80f4b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe62f80f470 'char *'
|   `-BuiltinType 0x7fe62f80eb60 'char'
|-TypedefDecl 0x7fe62f842200 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe62f80f790 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe62f80f5a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fe62f80f508 '__va_list_tag'
|-CXXRecordDecl 0x7fe62f842258 <object_model_refined/7_object_model/04_a_type_safe_dynamic_cast.cpp:2:1, line:4:1> line:2:8 referenced struct V definition
| |-CXXRecordDecl 0x7fe62f842378 <col:1, col:8> col:8 implicit struct V
| |-CXXMethodDecl 0x7fe62f842490 <line:3:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fe62f8429b8 <col:22, col:23>
| |-CXXMethodDecl 0x7fe62f842588 <line:2:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct V &(const struct V &)' inline default noexcept-unevaluated 0x7fe62f842588
| | `-ParmVarDecl 0x7fe62f8426a0 <col:8> col:8 'const struct V &'
| |-CXXMethodDecl 0x7fe62f842738 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct V &(struct V &&)' inline default noexcept-unevaluated 0x7fe62f842738
| | `-ParmVarDecl 0x7fe62f842850 <col:8> col:8 'struct V &&'
| |-CXXDestructorDecl 0x7fe62f8428d8 <col:8> col:8 implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7fe62f8428d8
| |-CXXConstructorDecl 0x7fe62f8718c8 <col:8> col:8 implicit used constexpr V 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fe62f872758 <col:8>
| |-CXXConstructorDecl 0x7fe62f871dc8 <col:8> col:8 implicit constexpr V 'void (const struct V &)' inline default noexcept-unevaluated 0x7fe62f871dc8
| | `-ParmVarDecl 0x7fe62f871ef0 <col:8> col:8 'const struct V &'
| `-CXXConstructorDecl 0x7fe62f871f58 <col:8> col:8 implicit constexpr V 'void (struct V &&)' inline default noexcept-unevaluated 0x7fe62f871f58
|   `-ParmVarDecl 0x7fe62f872080 <col:8> col:8 'struct V &&'
|-CXXRecordDecl 0x7fe62f8429d0 <line:6:1, col:23> col:8 referenced struct A definition
| |-virtual public 'struct V'
| |-CXXRecordDecl 0x7fe62f842b50 <col:1, col:8> col:8 implicit struct A
| |-CXXMethodDecl 0x7fe62f842c48 <col:8, <invalid sloc>> col:8 implicit operator= 'struct A &(const struct A &)' inline default noexcept-unevaluated 0x7fe62f842c48
| | `-ParmVarDecl 0x7fe62f842d60 <col:8> col:8 'const struct A &'
| |-CXXMethodDecl 0x7fe62f842df8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct A &(struct A &&)' inline default noexcept-unevaluated 0x7fe62f842df8
| | `-ParmVarDecl 0x7fe62f842f10 <col:8> col:8 'struct A &&'
| |-CXXDestructorDecl 0x7fe62f842f98 <col:8> col:8 implicit ~A 'void (void)' inline default trivial noexcept-unevaluated 0x7fe62f842f98
| |-CXXConstructorDecl 0x7fe62f8717c8 <col:8> col:8 implicit used A 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 0x7fe62f8727d8 <col:8> 'struct V' 'void (void) noexcept'
| | `-CompoundStmt 0x7fe62f872848 <col:8>
| |-CXXConstructorDecl 0x7fe62f871c38 <col:8> col:8 implicit A 'void (const struct A &)' inline default noexcept-unevaluated 0x7fe62f871c38
| | `-ParmVarDecl 0x7fe62f871d60 <col:8> col:8 'const struct A &'
| `-CXXConstructorDecl 0x7fe62f8720e8 <col:8> col:8 implicit A 'void (struct A &&)' inline default noexcept-unevaluated 0x7fe62f8720e8
|   `-ParmVarDecl 0x7fe62f872240 <col:8> col:8 'struct A &&'
|-CXXRecordDecl 0x7fe62f843078 <line:8:1, col:23> col:8 referenced struct B definition
| |-virtual public 'struct V'
| |-CXXRecordDecl 0x7fe62f86ee00 <col:1, col:8> col:8 implicit struct B
| |-CXXMethodDecl 0x7fe62f86eef8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct B &(const struct B &)' inline default noexcept-unevaluated 0x7fe62f86eef8
| | `-ParmVarDecl 0x7fe62f86f010 <col:8> col:8 'const struct B &'
| |-CXXMethodDecl 0x7fe62f86f0a8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct B &(struct B &&)' inline default noexcept-unevaluated 0x7fe62f86f0a8
| | `-ParmVarDecl 0x7fe62f86f1c0 <col:8> col:8 'struct B &&'
| |-CXXDestructorDecl 0x7fe62f86f248 <col:8> col:8 implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7fe62f86f248
| |-CXXConstructorDecl 0x7fe62f8719c8 <col:8> col:8 implicit used B 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 0x7fe62f8728c8 <col:8> 'struct V' 'void (void) noexcept'
| | `-CompoundStmt 0x7fe62f872938 <col:8>
| |-CXXConstructorDecl 0x7fe62f8722a8 <col:8> col:8 implicit B 'void (const struct B &)' inline default noexcept-unevaluated 0x7fe62f8722a8
| | `-ParmVarDecl 0x7fe62f8723d0 <col:8> col:8 'const struct B &'
| `-CXXConstructorDecl 0x7fe62f872438 <col:8> col:8 implicit B 'void (struct B &&)' inline default noexcept-unevaluated 0x7fe62f872438
|   `-ParmVarDecl 0x7fe62f872560 <col:8> col:8 'struct B &&'
|-CXXRecordDecl 0x7fe62f86f328 <line:10:1, col:18> col:8 referenced struct D definition
| |-public 'struct A'
| |-public 'struct B'
| |-CXXRecordDecl 0x7fe62f86f4e0 <col:1, col:8> col:8 implicit struct D
| |-CXXMethodDecl 0x7fe62f86f5d8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D &(const struct D &)' inline default noexcept-unevaluated 0x7fe62f86f5d8
| | `-ParmVarDecl 0x7fe62f86f6f0 <col:8> col:8 'const struct D &'
| |-CXXMethodDecl 0x7fe62f86f788 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D &(struct D &&)' inline default noexcept-unevaluated 0x7fe62f86f788
| | `-ParmVarDecl 0x7fe62f86f8a0 <col:8> col:8 'struct D &&'
| |-CXXDestructorDecl 0x7fe62f86f928 <col:8> col:8 implicit ~D 'void (void)' inline default trivial noexcept-unevaluated 0x7fe62f86f928
| |-CXXConstructorDecl 0x7fe62f8716c8 <col:8> col:8 implicit used D 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 0x7fe62f872770 <col:8> 'struct V' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct A'
| | | `-CXXConstructExpr 0x7fe62f872860 <col:8> 'struct A' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 0x7fe62f872950 <col:8> 'struct B' 'void (void) noexcept'
| | `-CompoundStmt 0x7fe62f8729d0 <col:8>
| |-CXXConstructorDecl 0x7fe62f871aa8 <col:8> col:8 implicit D 'void (const struct D &)' inline default noexcept-unevaluated 0x7fe62f871aa8
| | `-ParmVarDecl 0x7fe62f871bd0 <col:8> col:8 'const struct D &'
| `-CXXConstructorDecl 0x7fe62f8725c8 <col:8> col:8 implicit D 'void (struct D &&)' inline default noexcept-unevaluated 0x7fe62f8725c8
|   `-ParmVarDecl 0x7fe62f8726f0 <col:8> col:8 'struct D &&'
|-CXXRecordDecl 0x7fe62f86fa08 <line:12:1, line:14:1> line:12:8 referenced struct B2 definition
| |-CXXRecordDecl 0x7fe62f86fb28 <col:1, col:8> col:8 implicit referenced struct B2
| |-CXXDestructorDecl 0x7fe62f86fc38 <line:13:5, col:20> col:13 used ~B2 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7fe62f8703c0 <col:19, col:20>
| |-CXXMethodDecl 0x7fe62f870200 <line:12:8, <invalid sloc>> col:8 implicit operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7fe62f870200
| | `-ParmVarDecl 0x7fe62f870320 <col:8> col:8 'const struct B2 &'
| |-CXXConstructorDecl 0x7fe62f870cd8 <col:8> col:8 implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7fe62f870cd8
| | `-ParmVarDecl 0x7fe62f870e00 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7fe62f874600 <col:8> col:8 implicit used constexpr B2 'void (void) noexcept' inline default
|   `-CompoundStmt 0x7fe62f8746e8 <col:8>
|-FunctionDecl 0x7fe62f870418 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fe62f8704f8 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fe62f8704b0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fe62f870560 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fe62f870640 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fe62f8705f8 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fe62f870728 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fe62f870808 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fe62f8707c0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fe62f870870 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7fe62f870950 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fe62f870908 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7fe62f8709b8 <line:16:1, line:18:1> line:16:8 referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl 0x7fe62f870b18 <col:1, col:8> col:8 implicit struct D2
| |-CXXMethodDecl 0x7fe62f870bf8 <line:17:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fe62f871488 <col:22, col:23>
| |-CXXConstructorDecl 0x7fe62f870e88 <line:16:8> col:8 implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7fe62f870e88
| | `-ParmVarDecl 0x7fe62f870fb0 <col:8> col:8 'struct D2 &&'
| |-CXXMethodDecl 0x7fe62f871078 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7fe62f871078
| | `-ParmVarDecl 0x7fe62f871190 <col:8> col:8 'const struct D2 &'
| |-CXXMethodDecl 0x7fe62f871200 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7fe62f871200
| | `-ParmVarDecl 0x7fe62f871320 <col:8> col:8 'struct D2 &&'
| |-CXXDestructorDecl 0x7fe62f8713a8 <col:8> col:8 implicit used ~D2 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fe62f8753f8 <col:8>
| |-CXXConstructorDecl 0x7fe62f874c00 <col:8> col:8 implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7fe62f874e78 <col:8> 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt 0x7fe62f874ee8 <col:8>
| `-CXXConstructorDecl 0x7fe62f874ce8 <col:8> col:8 implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7fe62f874ce8
|   `-ParmVarDecl 0x7fe62f874e10 <col:8> col:8 'const struct D2 &'
`-FunctionDecl 0x7fe62f8714f8 <line:20:1, line:41:1> line:20:5 main 'int (void)'
  `-CompoundStmt 0x7fe62f875388 <line:21:1, line:41:1>
    |-DeclStmt 0x7fe62f872a18 <line:22:5, col:10>
    | `-VarDecl 0x7fe62f871608 <col:5, col:9> col:7 used d 'struct D' listinit
    |   `-CXXConstructExpr 0x7fe62f8729e8 <col:7, col:9> 'struct D' 'void (void) noexcept' zeroing
    |-DeclStmt 0x7fe62f872de0 <line:23:5, col:13>
    | `-VarDecl 0x7fe62f872a40 <col:5, col:12> col:8 used a 'struct A &' cinit
    |   `-ImplicitCastExpr 0x7fe62f872ac8 <col:12> 'struct A' lvalue <DerivedToBase (A)>
    |     `-DeclRefExpr 0x7fe62f872aa0 <col:12> 'struct D' lvalue Var 0x7fe62f871608 'd' 'struct D'
    |-DeclStmt 0x7fe62f872f28 <line:24:5, col:33>
    | `-VarDecl 0x7fe62f872e08 <col:5, col:32> col:8 dr 'struct D &' cinit
    |   `-CXXDynamicCastExpr 0x7fe62f872ea0 <col:13, col:32> 'struct D' lvalue dynamic_cast<struct D &> <Dynamic>
    |     `-DeclRefExpr 0x7fe62f872e68 <col:31> 'struct A' lvalue Var 0x7fe62f872a40 'a' 'struct A &'
    |-DeclStmt 0x7fe62f873070 <line:25:5, col:33>
    | `-VarDecl 0x7fe62f872f50 <col:5, col:32> col:8 br 'struct B &' cinit
    |   `-CXXDynamicCastExpr 0x7fe62f872fe8 <col:13, col:32> 'struct B' lvalue dynamic_cast<struct B &> <Dynamic>
    |     `-DeclRefExpr 0x7fe62f872fb0 <col:31> 'struct A' lvalue Var 0x7fe62f872a40 'a' 'struct A &'
    |-DeclStmt 0x7fe62f874788 <line:28:5, col:20>
    | `-VarDecl 0x7fe62f873098 <col:5, col:18> col:9 used b1 'struct B2 *' cinit
    |   `-CXXNewExpr 0x7fe62f874730 <col:14, col:18> 'struct B2 *' Function 0x7fe62f870418 'operator new' 'void *(unsigned long)'
    |     `-CXXConstructExpr 0x7fe62f874700 <col:18> 'struct B2' 'void (void) noexcept'
    |-IfStmt 0x7fe62f874a88 <line:29:5, line:31:5>
    | |-<<<NULL>>>
    | |-DeclStmt 0x7fe62f874ac0 <line:29:9, col:40>
    | | `-VarDecl 0x7fe62f8747d0 <col:9, col:40> col:14 used dp 'struct D2 *':'struct D2 *' cinit
    | |   `-CXXDynamicCastExpr 0x7fe62f874880 <col:19, col:40> 'struct D2 *' dynamic_cast<struct D2 *> <Dynamic>
    | |     `-ImplicitCastExpr 0x7fe62f874868 <col:38> 'struct B2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fe62f874830 <col:38> 'struct B2 *' lvalue Var 0x7fe62f873098 'b1' 'struct B2 *'
    | |-ImplicitCastExpr 0x7fe62f8749b0 <col:14> '_Bool' <PointerToBoolean>
    | | `-ImplicitCastExpr 0x7fe62f874998 <col:14> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fe62f874970 <col:14> 'struct D2 *':'struct D2 *' lvalue Var 0x7fe62f8747d0 'dp' 'struct D2 *':'struct D2 *'
    | |-CompoundStmt 0x7fe62f874a68 <col:43, line:31:5>
    | | `-CXXMemberCallExpr 0x7fe62f874a40 <line:30:9, col:15> 'void'
    | |   `-MemberExpr 0x7fe62f874a08 <col:9, col:13> '<bound member function type>' ->m 0x7fe62f870bf8
    | |     `-ImplicitCastExpr 0x7fe62f8749f0 <col:9> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fe62f8749c8 <col:9> 'struct D2 *':'struct D2 *' lvalue Var 0x7fe62f8747d0 'dp' 'struct D2 *':'struct D2 *'
    | `-<<<NULL>>>
    |-DeclStmt 0x7fe62f874fa8 <line:33:5, col:20>
    | `-VarDecl 0x7fe62f874ae8 <col:5, col:18> col:9 used b2 'struct B2 *' cinit
    |   `-ImplicitCastExpr 0x7fe62f874f88 <col:14, col:18> 'struct B2 *' <DerivedToBase (B2)>
    |     `-CXXNewExpr 0x7fe62f874f30 <col:14, col:18> 'struct D2 *' Function 0x7fe62f870418 'operator new' 'void *(unsigned long)'
    |       `-CXXConstructExpr 0x7fe62f874f00 <col:18> 'struct D2' 'void (void) noexcept'
    |-IfStmt 0x7fe62f875230 <line:34:5, line:36:5>
    | |-<<<NULL>>>
    | |-DeclStmt 0x7fe62f875268 <line:34:9, col:40>
    | | `-VarDecl 0x7fe62f874fd0 <col:9, col:40> col:14 used dp 'struct D2 *':'struct D2 *' cinit
    | |   `-CXXDynamicCastExpr 0x7fe62f875080 <col:19, col:40> 'struct D2 *' dynamic_cast<struct D2 *> <Dynamic>
    | |     `-ImplicitCastExpr 0x7fe62f875068 <col:38> 'struct B2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fe62f875030 <col:38> 'struct B2 *' lvalue Var 0x7fe62f874ae8 'b2' 'struct B2 *'
    | |-ImplicitCastExpr 0x7fe62f875158 <col:14> '_Bool' <PointerToBoolean>
    | | `-ImplicitCastExpr 0x7fe62f875140 <col:14> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fe62f875118 <col:14> 'struct D2 *':'struct D2 *' lvalue Var 0x7fe62f874fd0 'dp' 'struct D2 *':'struct D2 *'
    | |-CompoundStmt 0x7fe62f875210 <col:43, line:36:5>
    | | `-CXXMemberCallExpr 0x7fe62f8751e8 <line:35:9, col:15> 'void'
    | |   `-MemberExpr 0x7fe62f8751b0 <col:9, col:13> '<bound member function type>' ->m 0x7fe62f870bf8
    | |     `-ImplicitCastExpr 0x7fe62f875198 <col:9> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fe62f875170 <col:9> 'struct D2 *':'struct D2 *' lvalue Var 0x7fe62f874fd0 'dp' 'struct D2 *':'struct D2 *'
    | `-<<<NULL>>>
    |-CXXDeleteExpr 0x7fe62f8752c0 <line:38:5, col:12> 'void' Function 0x7fe62f870728 'operator delete' 'void (void *) noexcept'
    | `-ImplicitCastExpr 0x7fe62f8752a8 <col:12> 'struct B2 *' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe62f875280 <col:12> 'struct B2 *' lvalue Var 0x7fe62f873098 'b1' 'struct B2 *'
    |-CXXDeleteExpr 0x7fe62f875328 <line:39:5, col:12> 'void' Function 0x7fe62f870728 'operator delete' 'void (void *) noexcept'
    | `-ImplicitCastExpr 0x7fe62f875310 <col:12> 'struct B2 *' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe62f8752e8 <col:12> 'struct B2 *' lvalue Var 0x7fe62f874ae8 'b2' 'struct B2 *'
    `-ReturnStmt 0x7fe62f875370 <line:40:5, col:12>
      `-IntegerLiteral 0x7fe62f875350 <col:12> 'int' 0

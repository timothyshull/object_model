TranslationUnitDecl 0x7fb03581f6d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb03581fc60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb03581f940 '__int128'
|-TypedefDecl 0x7fb03581fcd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb03581f960 'unsigned __int128'
|-TypedefDecl 0x7fb035820018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb03581fdc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fb03581fd28 '__NSConstantString_tag'
|-TypedefDecl 0x7fb0358200b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb035820070 'char *'
|   `-BuiltinType 0x7fb03581f760 'char'
|-TypedefDecl 0x7fb035852c00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb035820390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb0358201a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fb035820108 '__va_list_tag'
|-CXXRecordDecl 0x7fb035852c58 <object_model/7_object_model/04_a_type_safe_dynamic_cast.cpp:2:1, line:4:1> line:2:8 referenced struct V definition
| |-CXXRecordDecl 0x7fb035852d78 <col:1, col:8> col:8 implicit struct V
| |-CXXMethodDecl 0x7fb035852e90 <line:3:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb0358533b8 <col:22, col:23>
| |-CXXMethodDecl 0x7fb035852f88 <line:2:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct V &(const struct V &)' inline default noexcept-unevaluated 0x7fb035852f88
| | `-ParmVarDecl 0x7fb0358530a0 <col:8> col:8 'const struct V &'
| |-CXXMethodDecl 0x7fb035853138 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct V &(struct V &&)' inline default noexcept-unevaluated 0x7fb035853138
| | `-ParmVarDecl 0x7fb035853250 <col:8> col:8 'struct V &&'
| |-CXXDestructorDecl 0x7fb0358532d8 <col:8> col:8 implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7fb0358532d8
| |-CXXConstructorDecl 0x7fb035881ec8 <col:8> col:8 implicit used constexpr V 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb035882d58 <col:8>
| |-CXXConstructorDecl 0x7fb0358823c8 <col:8> col:8 implicit constexpr V 'void (const struct V &)' inline default noexcept-unevaluated 0x7fb0358823c8
| | `-ParmVarDecl 0x7fb0358824f0 <col:8> col:8 'const struct V &'
| `-CXXConstructorDecl 0x7fb035882558 <col:8> col:8 implicit constexpr V 'void (struct V &&)' inline default noexcept-unevaluated 0x7fb035882558
|   `-ParmVarDecl 0x7fb035882680 <col:8> col:8 'struct V &&'
|-CXXRecordDecl 0x7fb0358533d0 <line:6:1, col:23> col:8 referenced struct A definition
| |-virtual public 'struct V'
| |-CXXRecordDecl 0x7fb035853550 <col:1, col:8> col:8 implicit struct A
| |-CXXMethodDecl 0x7fb035853648 <col:8, <invalid sloc>> col:8 implicit operator= 'struct A &(const struct A &)' inline default noexcept-unevaluated 0x7fb035853648
| | `-ParmVarDecl 0x7fb035853760 <col:8> col:8 'const struct A &'
| |-CXXMethodDecl 0x7fb0358537f8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct A &(struct A &&)' inline default noexcept-unevaluated 0x7fb0358537f8
| | `-ParmVarDecl 0x7fb035853910 <col:8> col:8 'struct A &&'
| |-CXXDestructorDecl 0x7fb035853998 <col:8> col:8 implicit ~A 'void (void)' inline default trivial noexcept-unevaluated 0x7fb035853998
| |-CXXConstructorDecl 0x7fb035881dc8 <col:8> col:8 implicit used A 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 0x7fb035882dd8 <col:8> 'struct V' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb035882e48 <col:8>
| |-CXXConstructorDecl 0x7fb035882238 <col:8> col:8 implicit A 'void (const struct A &)' inline default noexcept-unevaluated 0x7fb035882238
| | `-ParmVarDecl 0x7fb035882360 <col:8> col:8 'const struct A &'
| `-CXXConstructorDecl 0x7fb0358826e8 <col:8> col:8 implicit A 'void (struct A &&)' inline default noexcept-unevaluated 0x7fb0358826e8
|   `-ParmVarDecl 0x7fb035882840 <col:8> col:8 'struct A &&'
|-CXXRecordDecl 0x7fb035853a78 <line:8:1, col:23> col:8 referenced struct B definition
| |-virtual public 'struct V'
| |-CXXRecordDecl 0x7fb03587f400 <col:1, col:8> col:8 implicit struct B
| |-CXXMethodDecl 0x7fb03587f4f8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct B &(const struct B &)' inline default noexcept-unevaluated 0x7fb03587f4f8
| | `-ParmVarDecl 0x7fb03587f610 <col:8> col:8 'const struct B &'
| |-CXXMethodDecl 0x7fb03587f6a8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct B &(struct B &&)' inline default noexcept-unevaluated 0x7fb03587f6a8
| | `-ParmVarDecl 0x7fb03587f7c0 <col:8> col:8 'struct B &&'
| |-CXXDestructorDecl 0x7fb03587f848 <col:8> col:8 implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7fb03587f848
| |-CXXConstructorDecl 0x7fb035881fc8 <col:8> col:8 implicit used B 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 0x7fb035882ec8 <col:8> 'struct V' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb035882f38 <col:8>
| |-CXXConstructorDecl 0x7fb0358828a8 <col:8> col:8 implicit B 'void (const struct B &)' inline default noexcept-unevaluated 0x7fb0358828a8
| | `-ParmVarDecl 0x7fb0358829d0 <col:8> col:8 'const struct B &'
| `-CXXConstructorDecl 0x7fb035882a38 <col:8> col:8 implicit B 'void (struct B &&)' inline default noexcept-unevaluated 0x7fb035882a38
|   `-ParmVarDecl 0x7fb035882b60 <col:8> col:8 'struct B &&'
|-CXXRecordDecl 0x7fb03587f928 <line:10:1, col:18> col:8 referenced struct D definition
| |-public 'struct A'
| |-public 'struct B'
| |-CXXRecordDecl 0x7fb03587fae0 <col:1, col:8> col:8 implicit struct D
| |-CXXMethodDecl 0x7fb03587fbd8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D &(const struct D &)' inline default noexcept-unevaluated 0x7fb03587fbd8
| | `-ParmVarDecl 0x7fb03587fcf0 <col:8> col:8 'const struct D &'
| |-CXXMethodDecl 0x7fb03587fd88 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D &(struct D &&)' inline default noexcept-unevaluated 0x7fb03587fd88
| | `-ParmVarDecl 0x7fb03587fea0 <col:8> col:8 'struct D &&'
| |-CXXDestructorDecl 0x7fb03587ff28 <col:8> col:8 implicit ~D 'void (void)' inline default trivial noexcept-unevaluated 0x7fb03587ff28
| |-CXXConstructorDecl 0x7fb035881cc8 <col:8> col:8 implicit used D 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 0x7fb035882d70 <col:8> 'struct V' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct A'
| | | `-CXXConstructExpr 0x7fb035882e60 <col:8> 'struct A' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 0x7fb035882f50 <col:8> 'struct B' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb035882fd0 <col:8>
| |-CXXConstructorDecl 0x7fb0358820a8 <col:8> col:8 implicit D 'void (const struct D &)' inline default noexcept-unevaluated 0x7fb0358820a8
| | `-ParmVarDecl 0x7fb0358821d0 <col:8> col:8 'const struct D &'
| `-CXXConstructorDecl 0x7fb035882bc8 <col:8> col:8 implicit D 'void (struct D &&)' inline default noexcept-unevaluated 0x7fb035882bc8
|   `-ParmVarDecl 0x7fb035882cf0 <col:8> col:8 'struct D &&'
|-CXXRecordDecl 0x7fb035880008 <line:12:1, line:14:1> line:12:8 referenced struct B2 definition
| |-CXXRecordDecl 0x7fb035880128 <col:1, col:8> col:8 implicit referenced struct B2
| |-CXXDestructorDecl 0x7fb035880238 <line:13:5, col:20> col:13 used ~B2 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7fb0358809c0 <col:19, col:20>
| |-CXXMethodDecl 0x7fb035880800 <line:12:8, <invalid sloc>> col:8 implicit operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7fb035880800
| | `-ParmVarDecl 0x7fb035880920 <col:8> col:8 'const struct B2 &'
| |-CXXConstructorDecl 0x7fb0358812d8 <col:8> col:8 implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7fb0358812d8
| | `-ParmVarDecl 0x7fb035881400 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7fb035884c00 <col:8> col:8 implicit used constexpr B2 'void (void) noexcept' inline default
|   `-CompoundStmt 0x7fb035884ce8 <col:8>
|-FunctionDecl 0x7fb035880a18 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fb035880af8 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fb035880ab0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb035880b60 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fb035880c40 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fb035880bf8 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb035880d28 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fb035880e08 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fb035880dc0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb035880e70 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7fb035880f50 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fb035880f08 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7fb035880fb8 <line:16:1, line:18:1> line:16:8 referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl 0x7fb035881118 <col:1, col:8> col:8 implicit struct D2
| |-CXXMethodDecl 0x7fb0358811f8 <line:17:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb035881a88 <col:22, col:23>
| |-CXXConstructorDecl 0x7fb035881488 <line:16:8> col:8 implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7fb035881488
| | `-ParmVarDecl 0x7fb0358815b0 <col:8> col:8 'struct D2 &&'
| |-CXXMethodDecl 0x7fb035881678 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7fb035881678
| | `-ParmVarDecl 0x7fb035881790 <col:8> col:8 'const struct D2 &'
| |-CXXMethodDecl 0x7fb035881800 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7fb035881800
| | `-ParmVarDecl 0x7fb035881920 <col:8> col:8 'struct D2 &&'
| |-CXXDestructorDecl 0x7fb0358819a8 <col:8> col:8 implicit used ~D2 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb035885a08 <col:8>
| |-CXXConstructorDecl 0x7fb035885210 <col:8> col:8 implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7fb035885488 <col:8> 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb0358854f8 <col:8>
| `-CXXConstructorDecl 0x7fb0358852f8 <col:8> col:8 implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7fb0358852f8
|   `-ParmVarDecl 0x7fb035885420 <col:8> col:8 'const struct D2 &'
`-FunctionDecl 0x7fb035881af8 <line:20:1, line:41:1> line:20:5 main 'int (void)'
  `-CompoundStmt 0x7fb035885998 <line:21:1, line:41:1>
    |-DeclStmt 0x7fb035883018 <line:22:5, col:10>
    | `-VarDecl 0x7fb035881c08 <col:5, col:9> col:7 used d 'struct D' listinit
    |   `-CXXConstructExpr 0x7fb035882fe8 <col:7, col:9> 'struct D' 'void (void) noexcept' zeroing
    |-DeclStmt 0x7fb035883420 <line:23:5, col:13>
    | `-VarDecl 0x7fb035883040 <col:5, col:12> col:8 used a 'struct A &' cinit
    |   `-ImplicitCastExpr 0x7fb0358830c8 <col:12> 'struct A' lvalue <DerivedToBase (A)>
    |     `-DeclRefExpr 0x7fb0358830a0 <col:12> 'struct D' lvalue Var 0x7fb035881c08 'd' 'struct D'
    |-DeclStmt 0x7fb035883568 <line:24:5, col:33>
    | `-VarDecl 0x7fb035883448 <col:5, col:32> col:8 dr 'struct D &' cinit
    |   `-CXXDynamicCastExpr 0x7fb0358834e0 <col:13, col:32> 'struct D' lvalue dynamic_cast<struct D &> <Dynamic>
    |     `-DeclRefExpr 0x7fb0358834a8 <col:31> 'struct A' lvalue Var 0x7fb035883040 'a' 'struct A &'
    |-DeclStmt 0x7fb0358836b0 <line:25:5, col:33>
    | `-VarDecl 0x7fb035883590 <col:5, col:32> col:8 br 'struct B &' cinit
    |   `-CXXDynamicCastExpr 0x7fb035883628 <col:13, col:32> 'struct B' lvalue dynamic_cast<struct B &> <Dynamic>
    |     `-DeclRefExpr 0x7fb0358835f0 <col:31> 'struct A' lvalue Var 0x7fb035883040 'a' 'struct A &'
    |-DeclStmt 0x7fb035884d88 <line:28:5, col:20>
    | `-VarDecl 0x7fb0358836d8 <col:5, col:18> col:9 used b1 'struct B2 *' cinit
    |   `-CXXNewExpr 0x7fb035884d30 <col:14, col:18> 'struct B2 *' Function 0x7fb035880a18 'operator new' 'void *(unsigned long)'
    |     `-CXXConstructExpr 0x7fb035884d00 <col:18> 'struct B2' 'void (void) noexcept'
    |-IfStmt 0x7fb035885088 <line:29:5, line:31:5>
    | |-<<<NULL>>>
    | |-DeclStmt 0x7fb0358850c0 <line:29:9, col:40>
    | | `-VarDecl 0x7fb035884dd0 <col:9, col:40> col:14 used dp 'struct D2 *':'struct D2 *' cinit
    | |   `-CXXDynamicCastExpr 0x7fb035884e80 <col:19, col:40> 'struct D2 *' dynamic_cast<struct D2 *> <Dynamic>
    | |     `-ImplicitCastExpr 0x7fb035884e68 <col:38> 'struct B2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fb035884e30 <col:38> 'struct B2 *' lvalue Var 0x7fb0358836d8 'b1' 'struct B2 *'
    | |-ImplicitCastExpr 0x7fb035884fb0 <col:14> '_Bool' <PointerToBoolean>
    | | `-ImplicitCastExpr 0x7fb035884f98 <col:14> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fb035884f70 <col:14> 'struct D2 *':'struct D2 *' lvalue Var 0x7fb035884dd0 'dp' 'struct D2 *':'struct D2 *'
    | |-CompoundStmt 0x7fb035885068 <col:43, line:31:5>
    | | `-CXXMemberCallExpr 0x7fb035885040 <line:30:9, col:15> 'void'
    | |   `-MemberExpr 0x7fb035885008 <col:9, col:13> '<bound member function type>' ->m 0x7fb0358811f8
    | |     `-ImplicitCastExpr 0x7fb035884ff0 <col:9> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fb035884fc8 <col:9> 'struct D2 *':'struct D2 *' lvalue Var 0x7fb035884dd0 'dp' 'struct D2 *':'struct D2 *'
    | `-<<<NULL>>>
    |-DeclStmt 0x7fb0358855b8 <line:33:5, col:20>
    | `-VarDecl 0x7fb0358850e8 <col:5, col:18> col:9 used b2 'struct B2 *' cinit
    |   `-ImplicitCastExpr 0x7fb035885598 <col:14, col:18> 'struct B2 *' <DerivedToBase (B2)>
    |     `-CXXNewExpr 0x7fb035885540 <col:14, col:18> 'struct D2 *' Function 0x7fb035880a18 'operator new' 'void *(unsigned long)'
    |       `-CXXConstructExpr 0x7fb035885510 <col:18> 'struct D2' 'void (void) noexcept'
    |-IfStmt 0x7fb035885840 <line:34:5, line:36:5>
    | |-<<<NULL>>>
    | |-DeclStmt 0x7fb035885878 <line:34:9, col:40>
    | | `-VarDecl 0x7fb0358855e0 <col:9, col:40> col:14 used dp 'struct D2 *':'struct D2 *' cinit
    | |   `-CXXDynamicCastExpr 0x7fb035885690 <col:19, col:40> 'struct D2 *' dynamic_cast<struct D2 *> <Dynamic>
    | |     `-ImplicitCastExpr 0x7fb035885678 <col:38> 'struct B2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fb035885640 <col:38> 'struct B2 *' lvalue Var 0x7fb0358850e8 'b2' 'struct B2 *'
    | |-ImplicitCastExpr 0x7fb035885768 <col:14> '_Bool' <PointerToBoolean>
    | | `-ImplicitCastExpr 0x7fb035885750 <col:14> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fb035885728 <col:14> 'struct D2 *':'struct D2 *' lvalue Var 0x7fb0358855e0 'dp' 'struct D2 *':'struct D2 *'
    | |-CompoundStmt 0x7fb035885820 <col:43, line:36:5>
    | | `-CXXMemberCallExpr 0x7fb0358857f8 <line:35:9, col:15> 'void'
    | |   `-MemberExpr 0x7fb0358857c0 <col:9, col:13> '<bound member function type>' ->m 0x7fb0358811f8
    | |     `-ImplicitCastExpr 0x7fb0358857a8 <col:9> 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |       `-DeclRefExpr 0x7fb035885780 <col:9> 'struct D2 *':'struct D2 *' lvalue Var 0x7fb0358855e0 'dp' 'struct D2 *':'struct D2 *'
    | `-<<<NULL>>>
    |-CXXDeleteExpr 0x7fb0358858d0 <line:38:5, col:12> 'void' Function 0x7fb035880d28 'operator delete' 'void (void *) noexcept'
    | `-ImplicitCastExpr 0x7fb0358858b8 <col:12> 'struct B2 *' <LValueToRValue>
    |   `-DeclRefExpr 0x7fb035885890 <col:12> 'struct B2 *' lvalue Var 0x7fb0358836d8 'b1' 'struct B2 *'
    |-CXXDeleteExpr 0x7fb035885938 <line:39:5, col:12> 'void' Function 0x7fb035880d28 'operator delete' 'void (void *) noexcept'
    | `-ImplicitCastExpr 0x7fb035885920 <col:12> 'struct B2 *' <LValueToRValue>
    |   `-DeclRefExpr 0x7fb0358858f8 <col:12> 'struct B2 *' lvalue Var 0x7fb0358850e8 'b2' 'struct B2 *'
    `-ReturnStmt 0x7fb035885980 <line:40:5, col:12>
      `-IntegerLiteral 0x7fb035885960 <col:12> 'int' 0

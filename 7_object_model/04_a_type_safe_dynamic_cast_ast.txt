TranslationUnitDecl 0x7f8ba70212d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct V definition
| |-CXXRecordDecl implicit struct V
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit constexpr operator= 'struct V &(const struct V &)' inline default noexcept-unevaluated 0x7f8ba7054b88
| | `-ParmVarDecl 'const struct V &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct V &(struct V &&)' inline default noexcept-unevaluated 0x7f8ba7054d38
| | `-ParmVarDecl 'struct V &&'
| |-CXXDestructorDecl implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ba7054ed8
| |-CXXConstructorDecl implicit used constexpr V 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr V 'void (const struct V &)' inline default noexcept-unevaluated 0x7f8ba7083fc8
| | `-ParmVarDecl 'const struct V &'
| `-CXXConstructorDecl implicit constexpr V 'void (struct V &&)' inline default noexcept-unevaluated 0x7f8ba7084158
|   `-ParmVarDecl 'struct V &&'
|-CXXRecordDecl referenced struct A definition
| |-virtual public 'struct V'
| |-CXXRecordDecl implicit struct A
| |-CXXMethodDecl > implicit operator= 'struct A &(const struct A &)' inline default noexcept-unevaluated 0x7f8ba7055248
| | `-ParmVarDecl 'const struct A &'
| |-CXXMethodDecl > implicit operator= 'struct A &(struct A &&)' inline default noexcept-unevaluated 0x7f8ba70553f8
| | `-ParmVarDecl 'struct A &&'
| |-CXXDestructorDecl implicit ~A 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ba7055598
| |-CXXConstructorDecl implicit used A 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 'struct V' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit A 'void (const struct A &)' inline default noexcept-unevaluated 0x7f8ba7083e38
| | `-ParmVarDecl 'const struct A &'
| `-CXXConstructorDecl implicit A 'void (struct A &&)' inline default noexcept-unevaluated 0x7f8ba70842e8
|   `-ParmVarDecl 'struct A &&'
|-CXXRecordDecl referenced struct B definition
| |-virtual public 'struct V'
| |-CXXRecordDecl implicit struct B
| |-CXXMethodDecl > implicit operator= 'struct B &(const struct B &)' inline default noexcept-unevaluated 0x7f8ba70810f8
| | `-ParmVarDecl 'const struct B &'
| |-CXXMethodDecl > implicit operator= 'struct B &(struct B &&)' inline default noexcept-unevaluated 0x7f8ba70812a8
| | `-ParmVarDecl 'struct B &&'
| |-CXXDestructorDecl implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ba7081448
| |-CXXConstructorDecl implicit used B 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 'struct V' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit B 'void (const struct B &)' inline default noexcept-unevaluated 0x7f8ba70844a8
| | `-ParmVarDecl 'const struct B &'
| `-CXXConstructorDecl implicit B 'void (struct B &&)' inline default noexcept-unevaluated 0x7f8ba7084638
|   `-ParmVarDecl 'struct B &&'
|-CXXRecordDecl referenced struct D definition
| |-public 'struct A'
| |-public 'struct B'
| |-CXXRecordDecl implicit struct D
| |-CXXMethodDecl > implicit operator= 'struct D &(const struct D &)' inline default noexcept-unevaluated 0x7f8ba70817d8
| | `-ParmVarDecl 'const struct D &'
| |-CXXMethodDecl > implicit operator= 'struct D &(struct D &&)' inline default noexcept-unevaluated 0x7f8ba7081988
| | `-ParmVarDecl 'struct D &&'
| |-CXXDestructorDecl implicit ~D 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ba7081b28
| |-CXXConstructorDecl implicit used D 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 'struct V' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct A'
| | | `-CXXConstructExpr 'struct A' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 'struct B' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit D 'void (const struct D &)' inline default noexcept-unevaluated 0x7f8ba7083ca8
| | `-ParmVarDecl 'const struct D &'
| `-CXXConstructorDecl implicit D 'void (struct D &&)' inline default noexcept-unevaluated 0x7f8ba70847c8
|   `-ParmVarDecl 'struct D &&'
|-CXXRecordDecl referenced struct B2 definition
| |-CXXRecordDecl implicit referenced struct B2
| |-CXXDestructorDecl used ~B2 'void (void) noexcept' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7f8ba7082400
| | `-ParmVarDecl 'const struct B2 &'
| |-CXXConstructorDecl implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7f8ba7082ed8
| | `-ParmVarDecl 'const struct B2 &'
| `-CXXConstructorDecl implicit used constexpr B2 'void (void) noexcept' inline default
|   `-CompoundStmt
|-FunctionDecl implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-CXXRecordDecl referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl implicit struct D2
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7f8ba7083088
| | `-ParmVarDecl 'struct D2 &&'
| |-CXXMethodDecl > implicit operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7f8ba7083278
| | `-ParmVarDecl 'const struct D2 &'
| |-CXXMethodDecl > implicit operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7f8ba7083400
| | `-ParmVarDecl 'struct D2 &&'
| |-CXXDestructorDecl implicit used ~D2 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt
| `-CXXConstructorDecl implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7f8ba7086ef8
|   `-ParmVarDecl 'const struct D2 &'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used d 'struct D' listinit
    |   `-CXXConstructExpr 'struct D' 'void (void) noexcept' zeroing
    |-DeclStmt
    | `-VarDecl used a 'struct A &' cinit
    |   `-ImplicitCastExpr 'struct A' lvalue <DerivedToBase (A)>
    |     `-DeclRefExpr 'struct D' lvalue Var 0x7f8ba7083808 'd' 'struct D'
    |-DeclStmt
    | `-VarDecl dr 'struct D &' cinit
    |   `-CXXDynamicCastExpr 'struct D' lvalue dynamic_cast<struct D &> <Dynamic>
    |     `-DeclRefExpr 'struct A' lvalue Var 0x7f8ba7084c40 'a' 'struct A &'
    |-DeclStmt
    | `-VarDecl br 'struct B &' cinit
    |   `-CXXDynamicCastExpr 'struct B' lvalue dynamic_cast<struct B &> <Dynamic>
    |     `-DeclRefExpr 'struct A' lvalue Var 0x7f8ba7084c40 'a' 'struct A &'
    |-DeclStmt
    | `-VarDecl used b1 'struct B2 *' cinit
    |   `-CXXNewExpr 'struct B2 *' Function 0x7f8ba7082618 'operator new' 'void *(unsigned long)'
    |     `-CXXConstructExpr 'struct B2' 'void (void) noexcept'
    |-IfStmt
    | |-<<<NULL>>>
    | |-DeclStmt
    | | `-VarDecl used dp 'struct D2 *':'struct D2 *' cinit
    | |   `-CXXDynamicCastExpr 'struct D2 *' dynamic_cast<struct D2 *> <Dynamic>
    | |     `-ImplicitCastExpr 'struct B2 *' <LValueToRValue>
    | |       `-DeclRefExpr 'struct B2 *' lvalue Var 0x7f8ba70852d8 'b1' 'struct B2 *'
    | |-ImplicitCastExpr '_Bool' <PointerToBoolean>
    | | `-ImplicitCastExpr 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |   `-DeclRefExpr 'struct D2 *':'struct D2 *' lvalue Var 0x7f8ba70869d0 'dp' 'struct D2 *':'struct D2 *'
    | |-CompoundStmt
    | | `-CXXMemberCallExpr 'void'
    | |   `-MemberExpr '<bound member function type>' ->m 0x7f8ba7082df8
    | |     `-ImplicitCastExpr 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |       `-DeclRefExpr 'struct D2 *':'struct D2 *' lvalue Var 0x7f8ba70869d0 'dp' 'struct D2 *':'struct D2 *'
    | `-<<<NULL>>>
    |-DeclStmt
    | `-VarDecl used b2 'struct B2 *' cinit
    |   `-ImplicitCastExpr 'struct B2 *' <DerivedToBase (B2)>
    |     `-CXXNewExpr 'struct D2 *' Function 0x7f8ba7082618 'operator new' 'void *(unsigned long)'
    |       `-CXXConstructExpr 'struct D2' 'void (void) noexcept'
    |-IfStmt
    | |-<<<NULL>>>
    | |-DeclStmt
    | | `-VarDecl used dp 'struct D2 *':'struct D2 *' cinit
    | |   `-CXXDynamicCastExpr 'struct D2 *' dynamic_cast<struct D2 *> <Dynamic>
    | |     `-ImplicitCastExpr 'struct B2 *' <LValueToRValue>
    | |       `-DeclRefExpr 'struct B2 *' lvalue Var 0x7f8ba7086ce8 'b2' 'struct B2 *'
    | |-ImplicitCastExpr '_Bool' <PointerToBoolean>
    | | `-ImplicitCastExpr 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |   `-DeclRefExpr 'struct D2 *':'struct D2 *' lvalue Var 0x7f8ba70871e0 'dp' 'struct D2 *':'struct D2 *'
    | |-CompoundStmt
    | | `-CXXMemberCallExpr 'void'
    | |   `-MemberExpr '<bound member function type>' ->m 0x7f8ba7082df8
    | |     `-ImplicitCastExpr 'struct D2 *':'struct D2 *' <LValueToRValue>
    | |       `-DeclRefExpr 'struct D2 *':'struct D2 *' lvalue Var 0x7f8ba70871e0 'dp' 'struct D2 *':'struct D2 *'
    | `-<<<NULL>>>
    |-CXXDeleteExpr 'void' Function 0x7f8ba7082928 'operator delete' 'void (void *) noexcept'
    | `-ImplicitCastExpr 'struct B2 *' <LValueToRValue>
    |   `-DeclRefExpr 'struct B2 *' lvalue Var 0x7f8ba70852d8 'b1' 'struct B2 *'
    |-CXXDeleteExpr 'void' Function 0x7f8ba7082928 'operator delete' 'void (void *) noexcept'
    | `-ImplicitCastExpr 'struct B2 *' <LValueToRValue>
    |   `-DeclRefExpr 'struct B2 *' lvalue Var 0x7f8ba7086ce8 'b2' 'struct B2 *'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0


*** Dumping AST Record Layout
         0 | struct B
         0 |   (B vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct D
         0 |   struct B (primary base)
         0 |     (B vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fcfc0926de8 <object_model/7_object_model/05_references_are_not_pointers.cpp:3:1, line:5:1> line:3:8 referenced struct B definition
|-CXXRecordDecl 0x7fcfc0926f08 <col:1, col:8> col:8 implicit struct B
|-CXXMethodDecl 0x7fcfc0926fe8 <line:4:5, col:23> col:18 m 'void (void)' virtual
| `-CompoundStmt 0x7fcfc0927508 <col:22, col:23>
|-CXXMethodDecl 0x7fcfc09270d8 <line:3:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B &(const struct B &)' inline default noexcept-unevaluated 0x7fcfc09270d8
| `-ParmVarDecl 0x7fcfc09271f0 <col:8> col:8 'const struct B &'
|-CXXMethodDecl 0x7fcfc0927288 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B &(struct B &&)' inline default noexcept-unevaluated 0x7fcfc0927288
| `-ParmVarDecl 0x7fcfc09273a0 <col:8> col:8 'struct B &&'
|-CXXDestructorDecl 0x7fcfc0927428 <col:8> col:8 implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7fcfc0927428
|-CXXConstructorDecl 0x7fcfc0927e38 <col:8> col:8 implicit used constexpr B 'void (void) noexcept' inline default
| `-CompoundStmt 0x7fcfc092a598 <col:8>
|-CXXConstructorDecl 0x7fcfc0927f18 <col:8> col:8 implicit used constexpr B 'void (const struct B &) noexcept' inline default
| |-ParmVarDecl 0x7fcfc0928040 <col:8> col:8 'const struct B &'
| `-CompoundStmt 0x7fcfc092ab60 <col:8>
`-CXXConstructorDecl 0x7fcfc09280a8 <col:8> col:8 implicit constexpr B 'void (struct B &&)' inline default noexcept-unevaluated 0x7fcfc09280a8
  `-ParmVarDecl 0x7fcfc09281d0 <col:8> col:8 'struct B &&'

Layout: <CGRecordLayout
  LLVMType:%struct.B = type { i32 (...)** }
  NonVirtualBaseLLVMType:%struct.B = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fcfc0927520 <object_model/7_object_model/05_references_are_not_pointers.cpp:7:1, col:15> col:8 referenced struct D definition
|-public 'struct B'
|-CXXRecordDecl 0x7fcfc0927688 <col:1, col:8> col:8 implicit struct D
|-CXXMethodDecl 0x7fcfc0927778 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D &(const struct D &)' inline default noexcept-unevaluated 0x7fcfc0927778
| `-ParmVarDecl 0x7fcfc0927890 <col:8> col:8 'const struct D &'
|-CXXMethodDecl 0x7fcfc0927928 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D &(struct D &&)' inline default noexcept-unevaluated 0x7fcfc0927928
| `-ParmVarDecl 0x7fcfc0927a40 <col:8> col:8 'struct D &&'
|-CXXDestructorDecl 0x7fcfc0927ac8 <col:8> col:8 implicit ~D 'void (void)' inline default trivial noexcept-unevaluated 0x7fcfc0927ac8
|-CXXConstructorDecl 0x7fcfc0927d38 <col:8> col:8 implicit used constexpr D 'void (void) noexcept' inline default
| |-CXXCtorInitializer 'struct B'
| | `-CXXConstructExpr 0x7fcfc092a5b0 <col:8> 'struct B' 'void (void) noexcept'
| `-CompoundStmt 0x7fcfc092a620 <col:8>
|-CXXConstructorDecl 0x7fcfc0928238 <col:8> col:8 implicit used constexpr D 'void (const struct D &) noexcept' inline default
| |-ParmVarDecl 0x7fcfc0928360 <col:8> col:8 used 'const struct D &'
| |-CXXCtorInitializer 'struct B'
| | `-CXXConstructExpr 0x7fcfc092ab78 <col:8> 'struct B' 'void (const struct B &) noexcept'
| |   `-ImplicitCastExpr 0x7fcfc092ab40 <col:8> 'const struct B' lvalue <UncheckedDerivedToBase (B)>
| |     `-DeclRefExpr 0x7fcfc092ab18 <col:8> 'const struct D' lvalue ParmVar 0x7fcfc0928360 '' 'const struct D &'
| `-CompoundStmt 0x7fcfc092abf0 <col:8>
`-CXXConstructorDecl 0x7fcfc092a400 <col:8> col:8 implicit constexpr D 'void (struct D &&)' inline default noexcept-unevaluated 0x7fcfc092a400
  `-ParmVarDecl 0x7fcfc092a530 <col:8> col:8 'struct D &&'

Layout: <CGRecordLayout
  LLVMType:%struct.D = type { %struct.B }
  NonVirtualBaseLLVMType:%struct.D = type { %struct.B }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class std::exception
         0 |   (exception vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fcfc0913df0 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/exception:97:1, line:103:1> line:97:29 referenced class exception definition
|-VisibilityAttr 0x7fcfc0913f18 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:701:47, col:71> Default
|-CXXRecordDecl 0x7fcfc0913f60 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/exception:97:1, col:29> col:29 implicit referenced class exception
|-AccessSpecDecl 0x7fcfc0913ff8 <line:99:1, col:7> col:1 public
|-CXXConstructorDecl 0x7fcfc09140c0 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/include/c++/v1/exception:100:54> col:31 used exception 'void (void) noexcept'
| |-CompoundStmt 0x7fcfc09145f8 <col:53, col:54>
| |-AlwaysInlineAttr 0x7fcfc0914168 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:729:77> always_inline
| `-VisibilityAttr 0x7fcfc09141b0 <col:51, col:74> Hidden
|-CXXDestructorDecl 0x7fcfc0914218 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/exception:101:5, /usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:758:21> /usr/local/Cellar/llvm/5.0.0/include/c++/v1/exception:101:13 used ~exception 'void (void) noexcept' virtual
|-CXXMethodDecl 0x7fcfc0914380 <line:102:5, /usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:758:21> /usr/local/Cellar/llvm/5.0.0/include/c++/v1/exception:102:25 what 'const char *(void) const noexcept' virtual
|-CXXMethodDecl 0x7fcfc0914478 <line:97:29, <invalid sloc>> col:29 implicit operator= 'class std::exception &(const class std::exception &)' inline default noexcept-unevaluated 0x7fcfc0914478
| `-ParmVarDecl 0x7fcfc0914590 <col:29> col:29 'const class std::exception &'
`-CXXConstructorDecl 0x7fcfc0914e18 <col:29> col:29 implicit used constexpr exception 'void (const class std::exception &) noexcept' inline default
  |-ParmVarDecl 0x7fcfc0914f40 <col:29> col:29 'const class std::exception &'
  `-CompoundStmt 0x7fcfc0926cb0 <col:29>

Layout: <CGRecordLayout
  LLVMType:%"class.std::exception" = type { i32 (...)** }
  NonVirtualBaseLLVMType:%"class.std::exception" = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class std::bad_cast
         0 |   class std::exception (primary base)
         0 |     (exception vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fcfc09250c0 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/typeinfo:176:1, line:183:1> line:176:29 referenced class bad_cast definition
|-public 'class std::exception'
|-VisibilityAttr 0x7fcfc09251e8 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:701:47, col:71> Default
|-CXXRecordDecl 0x7fcfc0925270 </usr/local/Cellar/llvm/5.0.0/include/c++/v1/typeinfo:176:1, col:29> col:29 implicit referenced class bad_cast
|-AccessSpecDecl 0x7fcfc0925308 <line:179:1, col:7> col:1 public
|-CXXConstructorDecl 0x7fcfc09253a0 <line:180:5, /usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:758:21> /usr/local/Cellar/llvm/5.0.0/include/c++/v1/typeinfo:180:5 used bad_cast 'void (void) noexcept'
|-CXXDestructorDecl 0x7fcfc09254a0 <line:181:5, /usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:758:21> /usr/local/Cellar/llvm/5.0.0/include/c++/v1/typeinfo:181:13 used ~bad_cast 'void (void) noexcept' virtual
|-CXXMethodDecl 0x7fcfc0925598 <line:182:5, /usr/local/Cellar/llvm/5.0.0/include/c++/v1/__config:758:21> /usr/local/Cellar/llvm/5.0.0/include/c++/v1/typeinfo:182:25 used what 'const char *(void) const noexcept' virtual
|-CXXMethodDecl 0x7fcfc0925688 <line:176:29, <invalid sloc>> col:29 implicit operator= 'class std::bad_cast &(const class std::bad_cast &)' inline default noexcept-unevaluated 0x7fcfc0925688
| `-ParmVarDecl 0x7fcfc09257a0 <col:29> col:29 'const class std::bad_cast &'
`-CXXConstructorDecl 0x7fcfc09269c8 <col:29> col:29 implicit used constexpr bad_cast 'void (const class std::bad_cast &) noexcept' inline default
  |-ParmVarDecl 0x7fcfc0926af0 <col:29> col:29 used 'const class std::bad_cast &'
  |-CXXCtorInitializer 'class std::exception'
  | `-CXXConstructExpr 0x7fcfc0926cc8 <col:29> 'class std::exception' 'void (const class std::exception &) noexcept'
  |   `-ImplicitCastExpr 0x7fcfc0926c90 <col:29> 'const class std::exception' lvalue <UncheckedDerivedToBase (exception)>
  |     `-DeclRefExpr 0x7fcfc0926c68 <col:29> 'const class std::bad_cast' lvalue ParmVar 0x7fcfc0926af0 '' 'const class std::bad_cast &'
  `-CompoundStmt 0x7fcfc0926d40 <col:29>

Layout: <CGRecordLayout
  LLVMType:%"class.std::bad_cast" = type { %"class.std::exception" }
  NonVirtualBaseLLVMType:%"class.std::bad_cast" = type { %"class.std::exception" }
  IsZeroInitializable:1
  BitFields:[
]>

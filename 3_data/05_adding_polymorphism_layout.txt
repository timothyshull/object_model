
*** Dumping AST Record Layout
         0 | class P2
         0 |   (P2 vtable pointer)
         8 |   double _x
        16 |   double _y
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fca76812a58 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/05_adding_polymorphism.cpp:1:1, line:42:1> line:1:7 referenced class P2 definition
|-CXXRecordDecl 0x7fca76812b78 <col:1, col:7> col:7 implicit referenced class P2
|-AccessSpecDecl 0x7fca76812c10 <line:2:1, col:7> col:1 public
|-CXXConstructorDecl 0x7fca76812df0 <line:3:5, col:44> col:5 P2 'void (double, double)'
| |-ParmVarDecl 0x7fca76812c50 <col:8, col:15> col:15 used x 'double'
| |-ParmVarDecl 0x7fca76812cc8 <col:18, col:25> col:25 used y 'double'
| |-CXXCtorInitializer Field 0x7fca76813730 '_x' 'double'
| | `-InitListExpr 0x7fca76825568 <col:32, col:34> 'double'
| |   `-ImplicitCastExpr 0x7fca768255a8 <col:33> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fca768254f8 <col:33> 'double' lvalue ParmVar 0x7fca76812c50 'x' 'double'
| |-CXXCtorInitializer Field 0x7fca76813790 '_y' 'double'
| | `-InitListExpr 0x7fca76825660 <col:39, col:41> 'double'
| |   `-ImplicitCastExpr 0x7fca768256a0 <col:40> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fca768255f0 <col:40> 'double' lvalue ParmVar 0x7fca76812cc8 'y' 'double'
| `-CompoundStmt 0x7fca768256f8 <col:43, col:44>
|-CXXMethodDecl 0x7fca76812f38 <line:5:5, line:8:5> line:5:12 x 'double (void) const'
| `-CompoundStmt 0x7fca76825790 <line:6:5, line:8:5>
|   `-ReturnStmt 0x7fca76825778 <line:7:9, col:16>
|     `-ImplicitCastExpr 0x7fca76825760 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fca76825728 <col:16> 'const double' lvalue ->_x 0x7fca76813730
|         `-CXXThisExpr 0x7fca76825710 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7fca768130b0 <line:10:5, line:13:5> line:10:10 x 'void (double)'
| |-ParmVarDecl 0x7fca76812fe8 <col:12, col:19> col:19 used x 'double'
| `-CompoundStmt 0x7fca76825868 <line:11:5, line:13:5>
|   `-BinaryOperator 0x7fca76825840 <line:12:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7fca768257c8 <col:9> 'double' lvalue ->_x 0x7fca76813730
|     | `-CXXThisExpr 0x7fca768257b0 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fca76825828 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fca76825800 <col:14> 'double' lvalue ParmVar 0x7fca76812fe8 'x' 'double'
|-CXXMethodDecl 0x7fca76813178 <line:15:5, line:18:5> line:15:12 y 'double (void) const'
| `-CompoundStmt 0x7fca76825908 <line:16:5, line:18:5>
|   `-ReturnStmt 0x7fca768258f0 <line:17:9, col:16>
|     `-ImplicitCastExpr 0x7fca768258d8 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fca768258a0 <col:16> 'const double' lvalue ->_y 0x7fca76813790
|         `-CXXThisExpr 0x7fca76825888 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7fca768132b0 <line:20:5, line:23:5> line:20:10 y 'void (double)'
| |-ParmVarDecl 0x7fca76813228 <col:12, col:19> col:19 used y 'double'
| `-CompoundStmt 0x7fca768259e0 <line:21:5, line:23:5>
|   `-BinaryOperator 0x7fca768259b8 <line:22:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7fca76825940 <col:9> 'double' lvalue ->_y 0x7fca76813790
|     | `-CXXThisExpr 0x7fca76825928 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fca768259a0 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fca76825978 <col:14> 'double' lvalue ParmVar 0x7fca76813228 'y' 'double'
|-CXXMethodDecl 0x7fca76813378 <line:25:5, line:28:5> line:25:20 z 'double (void) const' virtual
| `-CompoundStmt 0x7fca76825a38 <line:26:5, line:28:5>
|   `-ReturnStmt 0x7fca76825a20 <line:27:9, col:16>
|     `-FloatingLiteral 0x7fca76825a00 <col:16> 'double' 0.000000e+00
|-CXXMethodDecl 0x7fca768134b0 <line:30:5, col:29> col:18 z 'void (double)' virtual
| |-ParmVarDecl 0x7fca76813428 <col:20> col:26 'double'
| `-CompoundStmt 0x7fca76825a58 <col:28, col:29>
|-CXXMethodDecl 0x7fca76813650 <line:32:5, line:37:5> line:33:5 referenced operator+= 'void (const class P2 &)' virtual
| |-ParmVarDecl 0x7fca76813588 <col:16, col:26> col:26 used rhs 'const class P2 &'
| `-CompoundStmt 0x7fca76825c70 <line:34:5, line:37:5>
|   |-CompoundAssignOperator 0x7fca76825b38 <line:35:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 0x7fca76825a88 <col:9> 'double' lvalue ->_x 0x7fca76813730
|   | | `-CXXThisExpr 0x7fca76825a70 <col:9> 'class P2 *' this
|   | `-ImplicitCastExpr 0x7fca76825b20 <col:15, col:19> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7fca76825ae8 <col:15, col:19> 'const double' lvalue ._x 0x7fca76813730
|   |     `-DeclRefExpr 0x7fca76825ac0 <col:15> 'const class P2' lvalue ParmVar 0x7fca76813588 'rhs' 'const class P2 &'
|   `-CompoundAssignOperator 0x7fca76825c38 <line:36:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 0x7fca76825b88 <col:9> 'double' lvalue ->_y 0x7fca76813790
|     | `-CXXThisExpr 0x7fca76825b70 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fca76825c20 <col:15, col:19> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fca76825be8 <col:15, col:19> 'const double' lvalue ._y 0x7fca76813790
|         `-DeclRefExpr 0x7fca76825bc0 <col:15> 'const class P2' lvalue ParmVar 0x7fca76813588 'rhs' 'const class P2 &'
|-AccessSpecDecl 0x7fca768136f0 <line:39:1, col:10> col:1 protected
|-FieldDecl 0x7fca76813730 <line:40:5, col:17> col:12 referenced _x 'double'
| `-FloatingLiteral 0x7fca768254b8 <col:17> 'double' 0.000000e+00
|-FieldDecl 0x7fca76813790 <line:41:5, col:17> col:12 referenced _y 'double'
| `-FloatingLiteral 0x7fca768254d8 <col:17> 'double' 0.000000e+00
|-CXXMethodDecl 0x7fca76813808 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7fca76813808
| `-ParmVarDecl 0x7fca76813920 <col:7> col:7 'const class P2 &'
|-CXXMethodDecl 0x7fca76825200 <col:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(class P2 &&)' inline default noexcept-unevaluated 0x7fca76825200
| `-ParmVarDecl 0x7fca76825320 <col:7> col:7 'class P2 &&'
`-CXXDestructorDecl 0x7fca768253a8 <col:7> col:7 implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7fca768253a8

Layout: <CGRecordLayout
  LLVMType:%class.P2 = type { i32 (...)**, double, double }
  NonVirtualBaseLLVMType:%class.P2 = type { i32 (...)**, double, double }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct C
         0 |   int d1
         4 |   int d2
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class V
         0 |   (V vtable pointer)
         8 |   struct C (base)
         8 |     int d1
        12 |     int d2
        16 |   int d3
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fca7684aa28 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/05_adding_polymorphism.cpp:73:1, line:76:1> line:73:8 referenced struct C definition
|-CXXRecordDecl 0x7fca7684ab48 <col:1, col:8> col:8 implicit struct C
|-FieldDecl 0x7fca7684abf8 <line:74:5, col:9> col:9 d1 'int'
|-FieldDecl 0x7fca7684ac58 <line:75:5, col:9> col:9 d2 'int'
|-CXXMethodDecl 0x7fca7684b298 <line:73:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(const struct C &)' inline default trivial noexcept-unevaluated 0x7fca7684b298
| `-ParmVarDecl 0x7fca7684b800 <col:8> col:8 'const struct C &'
|-CXXMethodDecl 0x7fca7684b898 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(struct C &&)' inline default trivial noexcept-unevaluated 0x7fca7684b898
| `-ParmVarDecl 0x7fca7684b9b0 <col:8> col:8 'struct C &&'
|-CXXDestructorDecl 0x7fca7684bcc8 <col:8> col:8 implicit ~C 'void (void)' inline default trivial noexcept-unevaluated 0x7fca7684bcc8
|-CXXConstructorDecl 0x7fca7684c800 <col:8> col:8 implicit used C 'void (void) noexcept' inline default trivial
| `-CompoundStmt 0x7fca7684cf60 <col:8>
|-CXXConstructorDecl 0x7fca7684c8e8 <col:8> col:8 implicit constexpr C 'void (const struct C &)' inline default trivial noexcept-unevaluated 0x7fca7684c8e8
| `-ParmVarDecl 0x7fca7684ca10 <col:8> col:8 'const struct C &'
`-CXXConstructorDecl 0x7fca7684ca78 <col:8> col:8 implicit constexpr C 'void (struct C &&)' inline default trivial noexcept-unevaluated 0x7fca7684ca78
  `-ParmVarDecl 0x7fca7684cba0 <col:8> col:8 'struct C &&'

Layout: <CGRecordLayout
  LLVMType:%struct.C = type { i32, i32 }
  NonVirtualBaseLLVMType:%struct.C = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fca7684acc0 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/05_adding_polymorphism.cpp:78:1, line:84:1> line:78:7 referenced class V definition
|-public 'struct C'
|-CXXRecordDecl 0x7fca7684ae28 <col:1, col:7> col:7 implicit class V
|-AccessSpecDecl 0x7fca7684aec0 <line:79:1, col:7> col:1 public
|-CXXMethodDecl 0x7fca7684af38 <line:80:5, col:25> col:18 foo 'void (void)' virtual
| `-CompoundStmt 0x7fca7684bda8 <col:24, col:25>
|-AccessSpecDecl 0x7fca7684afd0 <line:82:1, col:8> col:1 private
|-FieldDecl 0x7fca7684b010 <line:83:5, col:9> col:9 d3 'int'
|-CXXMethodDecl 0x7fca7684b0b8 <line:78:7, <invalid sloc>> col:7 implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7fca7684b0b8
| `-ParmVarDecl 0x7fca7684b1d0 <col:7> col:7 'const class V &'
|-CXXMethodDecl 0x7fca7684ba48 <col:7, <invalid sloc>> col:7 implicit operator= 'class V &(class V &&)' inline default noexcept-unevaluated 0x7fca7684ba48
| `-ParmVarDecl 0x7fca7684bb60 <col:7> col:7 'class V &&'
|-CXXDestructorDecl 0x7fca7684bbe8 <col:7> col:7 implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7fca7684bbe8
|-CXXConstructorDecl 0x7fca7684c6e8 <col:7> col:7 implicit used V 'void (void) noexcept' inline default
| |-CXXCtorInitializer 'struct C'
| | `-CXXConstructExpr 0x7fca7684cf78 <col:7> 'struct C' 'void (void) noexcept'
| `-CompoundStmt 0x7fca7684cfe8 <col:7>
|-CXXConstructorDecl 0x7fca7684cc08 <col:7> col:7 implicit constexpr V 'void (const class V &)' inline default noexcept-unevaluated 0x7fca7684cc08
| `-ParmVarDecl 0x7fca7684cd30 <col:7> col:7 'const class V &'
`-CXXConstructorDecl 0x7fca7684cd98 <col:7> col:7 implicit constexpr V 'void (class V &&)' inline default noexcept-unevaluated 0x7fca7684cd98
  `-ParmVarDecl 0x7fca7684cec0 <col:7> col:7 'class V &&'

Layout: <CGRecordLayout
  LLVMType:%class.V = type <{ i32 (...)**, %struct.C, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.V.base = type <{ i32 (...)**, %struct.C, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

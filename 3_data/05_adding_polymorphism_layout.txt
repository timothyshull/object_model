
*** Dumping AST Record Layout
         0 | class P2
         0 |   (P2 vtable pointer)
         8 |   double _x
        16 |   double _y
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fdc7b840c58 <object_model/3_data/05_adding_polymorphism.cpp:2:1, line:43:1> line:2:7 referenced class P2 definition
|-CXXRecordDecl 0x7fdc7b840d78 <col:1, col:7> col:7 implicit referenced class P2
|-AccessSpecDecl 0x7fdc7b840e10 <line:3:1, col:7> col:1 public
|-CXXConstructorDecl 0x7fdc7b840ff0 <line:4:5, col:44> col:5 used P2 'void (double, double)'
| |-ParmVarDecl 0x7fdc7b840e50 <col:8, col:15> col:15 used x 'double'
| |-ParmVarDecl 0x7fdc7b840ec8 <col:18, col:25> col:25 used y 'double'
| |-CXXCtorInitializer Field 0x7fdc7b841930 '_x' 'double'
| | `-InitListExpr 0x7fdc7c000768 <col:32, col:34> 'double'
| |   `-ImplicitCastExpr 0x7fdc7c0007a8 <col:33> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fdc7c0006f8 <col:33> 'double' lvalue ParmVar 0x7fdc7b840e50 'x' 'double'
| |-CXXCtorInitializer Field 0x7fdc7b841990 '_y' 'double'
| | `-InitListExpr 0x7fdc7c000860 <col:39, col:41> 'double'
| |   `-ImplicitCastExpr 0x7fdc7c0008a0 <col:40> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fdc7c0007f0 <col:40> 'double' lvalue ParmVar 0x7fdc7b840ec8 'y' 'double'
| `-CompoundStmt 0x7fdc7c0008f8 <col:43, col:44>
|-CXXMethodDecl 0x7fdc7b841138 <line:6:5, line:9:5> line:6:12 x 'double (void) const'
| `-CompoundStmt 0x7fdc7c000990 <line:7:5, line:9:5>
|   `-ReturnStmt 0x7fdc7c000978 <line:8:9, col:16>
|     `-ImplicitCastExpr 0x7fdc7c000960 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fdc7c000928 <col:16> 'const double' lvalue ->_x 0x7fdc7b841930
|         `-CXXThisExpr 0x7fdc7c000910 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7fdc7b8412b0 <line:11:5, line:14:5> line:11:10 x 'void (double)'
| |-ParmVarDecl 0x7fdc7b8411e8 <col:12, col:19> col:19 used x 'double'
| `-CompoundStmt 0x7fdc7c000a68 <line:12:5, line:14:5>
|   `-BinaryOperator 0x7fdc7c000a40 <line:13:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7fdc7c0009c8 <col:9> 'double' lvalue ->_x 0x7fdc7b841930
|     | `-CXXThisExpr 0x7fdc7c0009b0 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fdc7c000a28 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fdc7c000a00 <col:14> 'double' lvalue ParmVar 0x7fdc7b8411e8 'x' 'double'
|-CXXMethodDecl 0x7fdc7b841378 <line:16:5, line:19:5> line:16:12 y 'double (void) const'
| `-CompoundStmt 0x7fdc7c000b08 <line:17:5, line:19:5>
|   `-ReturnStmt 0x7fdc7c000af0 <line:18:9, col:16>
|     `-ImplicitCastExpr 0x7fdc7c000ad8 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fdc7c000aa0 <col:16> 'const double' lvalue ->_y 0x7fdc7b841990
|         `-CXXThisExpr 0x7fdc7c000a88 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7fdc7b8414b0 <line:21:5, line:24:5> line:21:10 y 'void (double)'
| |-ParmVarDecl 0x7fdc7b841428 <col:12, col:19> col:19 used y 'double'
| `-CompoundStmt 0x7fdc7c000be0 <line:22:5, line:24:5>
|   `-BinaryOperator 0x7fdc7c000bb8 <line:23:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7fdc7c000b40 <col:9> 'double' lvalue ->_y 0x7fdc7b841990
|     | `-CXXThisExpr 0x7fdc7c000b28 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fdc7c000ba0 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fdc7c000b78 <col:14> 'double' lvalue ParmVar 0x7fdc7b841428 'y' 'double'
|-CXXMethodDecl 0x7fdc7b841578 <line:26:5, line:29:5> line:26:20 used z 'double (void) const' virtual
| `-CompoundStmt 0x7fdc7c000c38 <line:27:5, line:29:5>
|   `-ReturnStmt 0x7fdc7c000c20 <line:28:9, col:16>
|     `-FloatingLiteral 0x7fdc7c000c00 <col:16> 'double' 0.000000e+00
|-CXXMethodDecl 0x7fdc7b8416b0 <line:31:5, col:29> col:18 z 'void (double)' virtual
| |-ParmVarDecl 0x7fdc7b841628 <col:20> col:26 'double'
| `-CompoundStmt 0x7fdc7c000c58 <col:28, col:29>
|-CXXMethodDecl 0x7fdc7b841850 <line:33:5, line:38:5> line:34:5 used operator+= 'void (const class P2 &)' virtual
| |-ParmVarDecl 0x7fdc7b841788 <col:16, col:26> col:26 used rhs 'const class P2 &'
| `-CompoundStmt 0x7fdc7c000e70 <line:35:5, line:38:5>
|   |-CompoundAssignOperator 0x7fdc7c000d38 <line:36:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 0x7fdc7c000c88 <col:9> 'double' lvalue ->_x 0x7fdc7b841930
|   | | `-CXXThisExpr 0x7fdc7c000c70 <col:9> 'class P2 *' this
|   | `-ImplicitCastExpr 0x7fdc7c000d20 <col:15, col:19> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7fdc7c000ce8 <col:15, col:19> 'const double' lvalue ._x 0x7fdc7b841930
|   |     `-DeclRefExpr 0x7fdc7c000cc0 <col:15> 'const class P2' lvalue ParmVar 0x7fdc7b841788 'rhs' 'const class P2 &'
|   `-CompoundAssignOperator 0x7fdc7c000e38 <line:37:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 0x7fdc7c000d88 <col:9> 'double' lvalue ->_y 0x7fdc7b841990
|     | `-CXXThisExpr 0x7fdc7c000d70 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fdc7c000e20 <col:15, col:19> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fdc7c000de8 <col:15, col:19> 'const double' lvalue ._y 0x7fdc7b841990
|         `-DeclRefExpr 0x7fdc7c000dc0 <col:15> 'const class P2' lvalue ParmVar 0x7fdc7b841788 'rhs' 'const class P2 &'
|-AccessSpecDecl 0x7fdc7b8418f0 <line:40:1, col:10> col:1 protected
|-FieldDecl 0x7fdc7b841930 <line:41:5, col:17> col:12 referenced _x 'double'
| `-FloatingLiteral 0x7fdc7c0006b8 <col:17> 'double' 0.000000e+00
|-FieldDecl 0x7fdc7b841990 <line:42:5, col:17> col:12 referenced _y 'double'
| `-FloatingLiteral 0x7fdc7c0006d8 <col:17> 'double' 0.000000e+00
|-CXXMethodDecl 0x7fdc7b841a08 <line:2:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7fdc7b841a08
| `-ParmVarDecl 0x7fdc7b841b20 <col:7> col:7 'const class P2 &'
|-CXXMethodDecl 0x7fdc7c000400 <col:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(class P2 &&)' inline default noexcept-unevaluated 0x7fdc7c000400
| `-ParmVarDecl 0x7fdc7c000520 <col:7> col:7 'class P2 &&'
|-CXXDestructorDecl 0x7fdc7c0005a8 <col:7> col:7 implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7fdc7c0005a8
|-CXXConstructorDecl 0x7fdc7b8718d8 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7fdc7b8718d8
| `-ParmVarDecl 0x7fdc7b8719c0 <col:7> col:7 'const class P2 &'
`-CXXConstructorDecl 0x7fdc7b871a28 <col:7> col:7 implicit constexpr P2 'void (class P2 &&)' inline default noexcept-unevaluated 0x7fdc7b871a28
  `-ParmVarDecl 0x7fdc7b871b50 <col:7> col:7 'class P2 &&'

Layout: <CGRecordLayout
  LLVMType:%class.P2 = type { i32 (...)**, double, double }
  NonVirtualBaseLLVMType:%class.P2 = type { i32 (...)**, double, double }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct C
         0 |   int d1
         4 |   int d2
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class V
         0 |   (V vtable pointer)
         8 |   struct C (base)
         8 |     int d1
        12 |     int d2
        16 |   int d3
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | class P3
         0 |   class P2 (primary base)
         0 |     (P2 vtable pointer)
         8 |     double _x
        16 |     double _y
        24 |   double _z
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fdc7c000e98 <object_model/3_data/05_adding_polymorphism.cpp:47:1, line:69:1> line:47:7 referenced class P3 definition
|-public 'class P2'
|-CXXRecordDecl 0x7fdc7c000ff8 <col:1, col:7> col:7 implicit referenced class P3
|-AccessSpecDecl 0x7fdc7c001090 <line:48:1, col:7> col:1 public
|-CXXConstructorDecl 0x7fdc7c0012f0 <line:49:5, col:57> col:5 used P3 'void (double, double, double)'
| |-ParmVarDecl 0x7fdc7c0010d0 <col:8, col:15> col:15 used x 'double'
| |-ParmVarDecl 0x7fdc7c001148 <col:18, col:25> col:25 used y 'double'
| |-ParmVarDecl 0x7fdc7c0011c0 <col:28, col:35> col:35 used z 'double'
| |-CXXCtorInitializer 'class P2'
| | `-CXXConstructExpr 0x7fdc7b871be8 <col:40, col:47> 'class P2' 'void (double, double)'
| |   |-ImplicitCastExpr 0x7fdc7b871bb8 <col:43> 'double' <LValueToRValue>
| |   | `-DeclRefExpr 0x7fdc7b871828 <col:43> 'double' lvalue ParmVar 0x7fdc7c0010d0 'x' 'double'
| |   `-ImplicitCastExpr 0x7fdc7b871bd0 <col:46> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fdc7b871850 <col:46> 'double' lvalue ParmVar 0x7fdc7c001148 'y' 'double'
| |-CXXCtorInitializer Field 0x7fdc7b871350 '_z' 'double'
| | `-InitListExpr 0x7fdc7b871cc0 <col:52, col:54> 'double'
| |   `-ImplicitCastExpr 0x7fdc7b871d00 <col:53> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fdc7b871c50 <col:53> 'double' lvalue ParmVar 0x7fdc7c0011c0 'z' 'double'
| `-CompoundStmt 0x7fdc7b871d58 <col:56, col:57>
|-CXXMethodDecl 0x7fdc7b871000 <line:51:5, line:54:5> line:51:12 z 'double (void) const'
| `-CompoundStmt 0x7fdc7b871df0 <line:52:5, line:54:5>
|   `-ReturnStmt 0x7fdc7b871dd8 <line:53:9, col:16>
|     `-ImplicitCastExpr 0x7fdc7b871dc0 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fdc7b871d88 <col:16> 'const double' lvalue ->_z 0x7fdc7b871350
|         `-CXXThisExpr 0x7fdc7b871d70 <col:16> 'const class P3 *' this
|-CXXMethodDecl 0x7fdc7b871138 <line:56:5, line:59:5> line:56:10 z 'void (double)'
| |-ParmVarDecl 0x7fdc7b8710b0 <col:12, col:19> col:19 used z 'double'
| `-CompoundStmt 0x7fdc7b871ec8 <line:57:5, line:59:5>
|   `-BinaryOperator 0x7fdc7b871ea0 <line:58:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7fdc7b871e28 <col:9> 'double' lvalue ->_z 0x7fdc7b871350
|     | `-CXXThisExpr 0x7fdc7b871e10 <col:9> 'class P3 *' this
|     `-ImplicitCastExpr 0x7fdc7b871e88 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fdc7b871e60 <col:14> 'double' lvalue ParmVar 0x7fdc7b8710b0 'z' 'double'
|-CXXMethodDecl 0x7fdc7b871270 <line:61:5, line:65:5> line:61:10 operator+= 'void (const class P2 &)'
| |-ParmVarDecl 0x7fdc7b8711e8 <col:21, col:31> col:31 used rhs 'const class P2 &'
| `-CompoundStmt 0x7fdc7b8731b0 <line:62:5, line:65:5>
|   |-CXXMemberCallExpr 0x7fdc7b871fe0 <line:63:9, col:27> 'void'
|   | |-MemberExpr 0x7fdc7b871f68 <col:9, col:21> '<bound member function type>' ->operator+= 0x7fdc7b841850
|   | | `-ImplicitCastExpr 0x7fdc7b873010 <col:13> 'class P2 *' <UncheckedDerivedToBase (P2)>
|   | |   `-CXXThisExpr 0x7fdc7b871f50 <col:13> 'class P3 *' this
|   | `-DeclRefExpr 0x7fdc7b871fb8 <col:24> 'const class P2' lvalue ParmVar 0x7fdc7b8711e8 'rhs' 'const class P2 &'
|   `-CompoundAssignOperator 0x7fdc7b873178 <line:64:9, col:21> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 0x7fdc7b873048 <col:9> 'double' lvalue ->_z 0x7fdc7b871350
|     | `-CXXThisExpr 0x7fdc7b873030 <col:9> 'class P3 *' this
|     `-CXXMemberCallExpr 0x7fdc7b873150 <col:15, col:21> 'double'
|       `-MemberExpr 0x7fdc7b873118 <col:15, col:19> '<bound member function type>' .z 0x7fdc7b841578
|         `-DeclRefExpr 0x7fdc7b873080 <col:15> 'const class P2' lvalue ParmVar 0x7fdc7b8711e8 'rhs' 'const class P2 &'
|-AccessSpecDecl 0x7fdc7b871310 <line:67:1, col:10> col:1 protected
|-FieldDecl 0x7fdc7b871350 <line:68:5, col:12> col:12 referenced _z 'double'
|-CXXMethodDecl 0x7fdc7b8713f8 <line:47:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7fdc7b8713f8
| `-ParmVarDecl 0x7fdc7b871510 <col:7> col:7 'const class P3 &'
|-CXXMethodDecl 0x7fdc7b8715a8 <col:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(class P3 &&)' inline default noexcept-unevaluated 0x7fdc7b8715a8
| `-ParmVarDecl 0x7fdc7b8716c0 <col:7> col:7 'class P3 &&'
|-CXXDestructorDecl 0x7fdc7b871748 <col:7> col:7 implicit ~P3 'void (void)' inline default trivial noexcept-unevaluated 0x7fdc7b871748
|-CXXConstructorDecl 0x7fdc7c804c00 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7fdc7c804c00
| `-ParmVarDecl 0x7fdc7c804d30 <col:7> col:7 'const class P3 &'
`-CXXConstructorDecl 0x7fdc7c804d98 <col:7> col:7 implicit constexpr P3 'void (class P3 &&)' inline default noexcept-unevaluated 0x7fdc7c804d98
  `-ParmVarDecl 0x7fdc7c804ec0 <col:7> col:7 'class P3 &&'

Layout: <CGRecordLayout
  LLVMType:%class.P3 = type { %class.P2, double }
  NonVirtualBaseLLVMType:%class.P3 = type { %class.P2, double }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fdc7b873620 <object_model/3_data/05_adding_polymorphism.cpp:77:1, line:80:1> line:77:8 referenced struct C definition
|-CXXRecordDecl 0x7fdc7b873748 <col:1, col:8> col:8 implicit struct C
|-FieldDecl 0x7fdc7b8737f8 <line:78:5, col:9> col:9 d1 'int'
|-FieldDecl 0x7fdc7b873858 <line:79:5, col:9> col:9 d2 'int'
|-CXXMethodDecl 0x7fdc7b873e98 <line:77:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(const struct C &)' inline default trivial noexcept-unevaluated 0x7fdc7b873e98
| `-ParmVarDecl 0x7fdc7c804400 <col:8> col:8 'const struct C &'
|-CXXMethodDecl 0x7fdc7c804498 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(struct C &&)' inline default trivial noexcept-unevaluated 0x7fdc7c804498
| `-ParmVarDecl 0x7fdc7c8045b0 <col:8> col:8 'struct C &&'
|-CXXDestructorDecl 0x7fdc7c8048c8 <col:8> col:8 implicit ~C 'void (void)' inline default trivial noexcept-unevaluated 0x7fdc7c8048c8
|-CXXConstructorDecl 0x7fdc7c8075c8 <col:8> col:8 implicit used C 'void (void) noexcept' inline default trivial
| `-CompoundStmt 0x7fdc7c807d20 <col:8>
|-CXXConstructorDecl 0x7fdc7c8076a8 <col:8> col:8 implicit constexpr C 'void (const struct C &)' inline default trivial noexcept-unevaluated 0x7fdc7c8076a8
| `-ParmVarDecl 0x7fdc7c8077d0 <col:8> col:8 'const struct C &'
`-CXXConstructorDecl 0x7fdc7c807838 <col:8> col:8 implicit constexpr C 'void (struct C &&)' inline default trivial noexcept-unevaluated 0x7fdc7c807838
  `-ParmVarDecl 0x7fdc7c807960 <col:8> col:8 'struct C &&'

Layout: <CGRecordLayout
  LLVMType:%struct.C = type { i32, i32 }
  NonVirtualBaseLLVMType:%struct.C = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fdc7b8738c0 <object_model/3_data/05_adding_polymorphism.cpp:82:1, line:88:1> line:82:7 referenced class V definition
|-public 'struct C'
|-CXXRecordDecl 0x7fdc7b873a28 <col:1, col:7> col:7 implicit class V
|-AccessSpecDecl 0x7fdc7b873ac0 <line:83:1, col:7> col:1 public
|-CXXMethodDecl 0x7fdc7b873b38 <line:84:5, col:23> col:18 m 'void (void)' virtual
| `-CompoundStmt 0x7fdc7c8049a8 <col:22, col:23>
|-AccessSpecDecl 0x7fdc7b873bd0 <line:86:1, col:8> col:1 private
|-FieldDecl 0x7fdc7b873c10 <line:87:5, col:9> col:9 d3 'int'
|-CXXMethodDecl 0x7fdc7b873cb8 <line:82:7, <invalid sloc>> col:7 implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7fdc7b873cb8
| `-ParmVarDecl 0x7fdc7b873dd0 <col:7> col:7 'const class V &'
|-CXXMethodDecl 0x7fdc7c804648 <col:7, <invalid sloc>> col:7 implicit operator= 'class V &(class V &&)' inline default noexcept-unevaluated 0x7fdc7c804648
| `-ParmVarDecl 0x7fdc7c804760 <col:7> col:7 'class V &&'
|-CXXDestructorDecl 0x7fdc7c8047e8 <col:7> col:7 implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7fdc7c8047e8
|-CXXConstructorDecl 0x7fdc7c8074c8 <col:7> col:7 implicit used V 'void (void) noexcept' inline default
| |-CXXCtorInitializer 'struct C'
| | `-CXXConstructExpr 0x7fdc7c807d38 <col:7> 'struct C' 'void (void) noexcept'
| `-CompoundStmt 0x7fdc7c807da8 <col:7>
|-CXXConstructorDecl 0x7fdc7c8079c8 <col:7> col:7 implicit constexpr V 'void (const class V &)' inline default noexcept-unevaluated 0x7fdc7c8079c8
| `-ParmVarDecl 0x7fdc7c807af0 <col:7> col:7 'const class V &'
`-CXXConstructorDecl 0x7fdc7c807b58 <col:7> col:7 implicit constexpr V 'void (class V &&)' inline default noexcept-unevaluated 0x7fdc7c807b58
  `-ParmVarDecl 0x7fdc7c807c80 <col:7> col:7 'class V &&'

Layout: <CGRecordLayout
  LLVMType:%class.V = type <{ i32 (...)**, %struct.C, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.V.base = type <{ i32 (...)**, %struct.C, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

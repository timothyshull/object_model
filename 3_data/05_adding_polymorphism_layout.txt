
*** Dumping AST Record Layout
         0 | class P2
         0 |   (P2 vtable pointer)
         8 |   double _x
        16 |   double _y
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fcd11869658 <object_model_refined/3_data/05_adding_polymorphism.cpp:1:1, line:42:1> line:1:7 referenced class P2 definition
|-CXXRecordDecl 0x7fcd11869778 <col:1, col:7> col:7 implicit referenced class P2
|-AccessSpecDecl 0x7fcd11869810 <line:2:1, col:7> col:1 public
|-CXXConstructorDecl 0x7fcd118699f0 <line:3:5, col:44> col:5 P2 'void (double, double)'
| |-ParmVarDecl 0x7fcd11869850 <col:8, col:15> col:15 used x 'double'
| |-ParmVarDecl 0x7fcd118698c8 <col:18, col:25> col:25 used y 'double'
| |-CXXCtorInitializer Field 0x7fcd1186a330 '_x' 'double'
| | `-InitListExpr 0x7fcd11878168 <col:32, col:34> 'double'
| |   `-ImplicitCastExpr 0x7fcd118781a8 <col:33> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fcd118780f8 <col:33> 'double' lvalue ParmVar 0x7fcd11869850 'x' 'double'
| |-CXXCtorInitializer Field 0x7fcd1186a390 '_y' 'double'
| | `-InitListExpr 0x7fcd11878260 <col:39, col:41> 'double'
| |   `-ImplicitCastExpr 0x7fcd118782a0 <col:40> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7fcd118781f0 <col:40> 'double' lvalue ParmVar 0x7fcd118698c8 'y' 'double'
| `-CompoundStmt 0x7fcd118782f8 <col:43, col:44>
|-CXXMethodDecl 0x7fcd11869b38 <line:5:5, line:8:5> line:5:12 x 'double (void) const'
| `-CompoundStmt 0x7fcd11878390 <line:6:5, line:8:5>
|   `-ReturnStmt 0x7fcd11878378 <line:7:9, col:16>
|     `-ImplicitCastExpr 0x7fcd11878360 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fcd11878328 <col:16> 'const double' lvalue ->_x 0x7fcd1186a330
|         `-CXXThisExpr 0x7fcd11878310 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7fcd11869cb0 <line:10:5, line:13:5> line:10:10 x 'void (double)'
| |-ParmVarDecl 0x7fcd11869be8 <col:12, col:19> col:19 used x 'double'
| `-CompoundStmt 0x7fcd11878468 <line:11:5, line:13:5>
|   `-BinaryOperator 0x7fcd11878440 <line:12:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7fcd118783c8 <col:9> 'double' lvalue ->_x 0x7fcd1186a330
|     | `-CXXThisExpr 0x7fcd118783b0 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fcd11878428 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fcd11878400 <col:14> 'double' lvalue ParmVar 0x7fcd11869be8 'x' 'double'
|-CXXMethodDecl 0x7fcd11869d78 <line:15:5, line:18:5> line:15:12 y 'double (void) const'
| `-CompoundStmt 0x7fcd11878508 <line:16:5, line:18:5>
|   `-ReturnStmt 0x7fcd118784f0 <line:17:9, col:16>
|     `-ImplicitCastExpr 0x7fcd118784d8 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fcd118784a0 <col:16> 'const double' lvalue ->_y 0x7fcd1186a390
|         `-CXXThisExpr 0x7fcd11878488 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7fcd11869eb0 <line:20:5, line:23:5> line:20:10 y 'void (double)'
| |-ParmVarDecl 0x7fcd11869e28 <col:12, col:19> col:19 used y 'double'
| `-CompoundStmt 0x7fcd118785e0 <line:21:5, line:23:5>
|   `-BinaryOperator 0x7fcd118785b8 <line:22:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7fcd11878540 <col:9> 'double' lvalue ->_y 0x7fcd1186a390
|     | `-CXXThisExpr 0x7fcd11878528 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fcd118785a0 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fcd11878578 <col:14> 'double' lvalue ParmVar 0x7fcd11869e28 'y' 'double'
|-CXXMethodDecl 0x7fcd11869f78 <line:25:5, line:28:5> line:25:20 z 'double (void) const' virtual
| `-CompoundStmt 0x7fcd11878638 <line:26:5, line:28:5>
|   `-ReturnStmt 0x7fcd11878620 <line:27:9, col:16>
|     `-FloatingLiteral 0x7fcd11878600 <col:16> 'double' 0.000000e+00
|-CXXMethodDecl 0x7fcd1186a0b0 <line:30:5, col:29> col:18 z 'void (double)' virtual
| |-ParmVarDecl 0x7fcd1186a028 <col:20> col:26 'double'
| `-CompoundStmt 0x7fcd11878658 <col:28, col:29>
|-CXXMethodDecl 0x7fcd1186a250 <line:32:5, line:37:5> line:33:5 referenced operator+= 'void (const class P2 &)' virtual
| |-ParmVarDecl 0x7fcd1186a188 <col:16, col:26> col:26 used rhs 'const class P2 &'
| `-CompoundStmt 0x7fcd11878870 <line:34:5, line:37:5>
|   |-CompoundAssignOperator 0x7fcd11878738 <line:35:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 0x7fcd11878688 <col:9> 'double' lvalue ->_x 0x7fcd1186a330
|   | | `-CXXThisExpr 0x7fcd11878670 <col:9> 'class P2 *' this
|   | `-ImplicitCastExpr 0x7fcd11878720 <col:15, col:19> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7fcd118786e8 <col:15, col:19> 'const double' lvalue ._x 0x7fcd1186a330
|   |     `-DeclRefExpr 0x7fcd118786c0 <col:15> 'const class P2' lvalue ParmVar 0x7fcd1186a188 'rhs' 'const class P2 &'
|   `-CompoundAssignOperator 0x7fcd11878838 <line:36:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 0x7fcd11878788 <col:9> 'double' lvalue ->_y 0x7fcd1186a390
|     | `-CXXThisExpr 0x7fcd11878770 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7fcd11878820 <col:15, col:19> 'double' <LValueToRValue>
|       `-MemberExpr 0x7fcd118787e8 <col:15, col:19> 'const double' lvalue ._y 0x7fcd1186a390
|         `-DeclRefExpr 0x7fcd118787c0 <col:15> 'const class P2' lvalue ParmVar 0x7fcd1186a188 'rhs' 'const class P2 &'
|-AccessSpecDecl 0x7fcd1186a2f0 <line:39:1, col:10> col:1 protected
|-FieldDecl 0x7fcd1186a330 <line:40:5, col:17> col:12 referenced _x 'double'
| `-FloatingLiteral 0x7fcd118780b8 <col:17> 'double' 0.000000e+00
|-FieldDecl 0x7fcd1186a390 <line:41:5, col:17> col:12 referenced _y 'double'
| `-FloatingLiteral 0x7fcd118780d8 <col:17> 'double' 0.000000e+00
|-CXXMethodDecl 0x7fcd1186a408 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7fcd1186a408
| `-ParmVarDecl 0x7fcd1186a520 <col:7> col:7 'const class P2 &'
|-CXXMethodDecl 0x7fcd11877e00 <col:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(class P2 &&)' inline default noexcept-unevaluated 0x7fcd11877e00
| `-ParmVarDecl 0x7fcd11877f20 <col:7> col:7 'class P2 &&'
`-CXXDestructorDecl 0x7fcd11877fa8 <col:7> col:7 implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7fcd11877fa8

Layout: <CGRecordLayout
  LLVMType:%class.P2 = type { i32 (...)**, double, double }
  NonVirtualBaseLLVMType:%class.P2 = type { i32 (...)**, double, double }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct C
         0 |   int d1
         4 |   int d2
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class V
         0 |   (V vtable pointer)
         8 |   struct C (base)
         8 |     int d1
        12 |     int d2
        16 |   int d3
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fcd12008488 <object_model_refined/3_data/05_adding_polymorphism.cpp:73:1, line:76:1> line:73:8 referenced struct C definition
|-CXXRecordDecl 0x7fcd120085a8 <col:1, col:8> col:8 implicit struct C
|-FieldDecl 0x7fcd12008658 <line:74:5, col:9> col:9 d1 'int'
|-FieldDecl 0x7fcd120086b8 <line:75:5, col:9> col:9 d2 'int'
|-CXXMethodDecl 0x7fcd12008cf8 <line:73:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(const struct C &)' inline default trivial noexcept-unevaluated 0x7fcd12008cf8
| `-ParmVarDecl 0x7fcd12009240 <col:8> col:8 'const struct C &'
|-CXXMethodDecl 0x7fcd120092d8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(struct C &&)' inline default trivial noexcept-unevaluated 0x7fcd120092d8
| `-ParmVarDecl 0x7fcd120093f0 <col:8> col:8 'struct C &&'
|-CXXDestructorDecl 0x7fcd12009708 <col:8> col:8 implicit ~C 'void (void)' inline default trivial noexcept-unevaluated 0x7fcd12009708
|-CXXConstructorDecl 0x7fcd1200a258 <col:8> col:8 implicit used C 'void (void) noexcept' inline default trivial
| `-CompoundStmt 0x7fcd1200a9b0 <col:8>
|-CXXConstructorDecl 0x7fcd1200a338 <col:8> col:8 implicit constexpr C 'void (const struct C &)' inline default trivial noexcept-unevaluated 0x7fcd1200a338
| `-ParmVarDecl 0x7fcd1200a460 <col:8> col:8 'const struct C &'
`-CXXConstructorDecl 0x7fcd1200a4c8 <col:8> col:8 implicit constexpr C 'void (struct C &&)' inline default trivial noexcept-unevaluated 0x7fcd1200a4c8
  `-ParmVarDecl 0x7fcd1200a5f0 <col:8> col:8 'struct C &&'

Layout: <CGRecordLayout
  LLVMType:%struct.C = type { i32, i32 }
  NonVirtualBaseLLVMType:%struct.C = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7fcd12008720 <object_model_refined/3_data/05_adding_polymorphism.cpp:78:1, line:84:1> line:78:7 referenced class V definition
|-public 'struct C'
|-CXXRecordDecl 0x7fcd12008888 <col:1, col:7> col:7 implicit class V
|-AccessSpecDecl 0x7fcd12008920 <line:79:1, col:7> col:1 public
|-CXXMethodDecl 0x7fcd12008998 <line:80:5, col:25> col:18 foo 'void (void)' virtual
| `-CompoundStmt 0x7fcd120097e8 <col:24, col:25>
|-AccessSpecDecl 0x7fcd12008a30 <line:82:1, col:8> col:1 private
|-FieldDecl 0x7fcd12008a70 <line:83:5, col:9> col:9 d3 'int'
|-CXXMethodDecl 0x7fcd12008b18 <line:78:7, <invalid sloc>> col:7 implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7fcd12008b18
| `-ParmVarDecl 0x7fcd12008c30 <col:7> col:7 'const class V &'
|-CXXMethodDecl 0x7fcd12009488 <col:7, <invalid sloc>> col:7 implicit operator= 'class V &(class V &&)' inline default noexcept-unevaluated 0x7fcd12009488
| `-ParmVarDecl 0x7fcd120095a0 <col:7> col:7 'class V &&'
|-CXXDestructorDecl 0x7fcd12009628 <col:7> col:7 implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7fcd12009628
|-CXXConstructorDecl 0x7fcd1200a148 <col:7> col:7 implicit used V 'void (void) noexcept' inline default
| |-CXXCtorInitializer 'struct C'
| | `-CXXConstructExpr 0x7fcd1200a9c8 <col:7> 'struct C' 'void (void) noexcept'
| `-CompoundStmt 0x7fcd1200aa38 <col:7>
|-CXXConstructorDecl 0x7fcd1200a658 <col:7> col:7 implicit constexpr V 'void (const class V &)' inline default noexcept-unevaluated 0x7fcd1200a658
| `-ParmVarDecl 0x7fcd1200a780 <col:7> col:7 'const class V &'
`-CXXConstructorDecl 0x7fcd1200a7e8 <col:7> col:7 implicit constexpr V 'void (class V &&)' inline default noexcept-unevaluated 0x7fcd1200a7e8
  `-ParmVarDecl 0x7fcd1200a910 <col:7> col:7 'class V &&'

Layout: <CGRecordLayout
  LLVMType:%class.V = type <{ i32 (...)**, %struct.C, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.V.base = type <{ i32 (...)**, %struct.C, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

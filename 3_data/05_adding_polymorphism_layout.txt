
*** Dumping AST Record Layout
         0 | class P2
         0 |   (P2 vtable pointer)
         8 |   double _x
        16 |   double _y
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7ffe5b80de58 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/05_adding_polymorphism.cpp:2:1, line:43:1> line:2:7 referenced class P2 definition
|-CXXRecordDecl 0x7ffe5b80df78 <col:1, col:7> col:7 implicit referenced class P2
|-AccessSpecDecl 0x7ffe5b80e010 <line:3:1, col:7> col:1 public
|-CXXConstructorDecl 0x7ffe5b80e1f0 <line:4:5, col:44> col:5 used P2 'void (double, double)'
| |-ParmVarDecl 0x7ffe5b80e050 <col:8, col:15> col:15 used x 'double'
| |-ParmVarDecl 0x7ffe5b80e0c8 <col:18, col:25> col:25 used y 'double'
| |-CXXCtorInitializer Field 0x7ffe5b80eb30 '_x' 'double'
| | `-InitListExpr 0x7ffe5b820968 <col:32, col:34> 'double'
| |   `-ImplicitCastExpr 0x7ffe5b8209a8 <col:33> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7ffe5b8208f8 <col:33> 'double' lvalue ParmVar 0x7ffe5b80e050 'x' 'double'
| |-CXXCtorInitializer Field 0x7ffe5b80eb90 '_y' 'double'
| | `-InitListExpr 0x7ffe5b820a60 <col:39, col:41> 'double'
| |   `-ImplicitCastExpr 0x7ffe5b820aa0 <col:40> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7ffe5b8209f0 <col:40> 'double' lvalue ParmVar 0x7ffe5b80e0c8 'y' 'double'
| `-CompoundStmt 0x7ffe5b820af8 <col:43, col:44>
|-CXXMethodDecl 0x7ffe5b80e338 <line:6:5, line:9:5> line:6:12 x 'double (void) const'
| `-CompoundStmt 0x7ffe5b820b90 <line:7:5, line:9:5>
|   `-ReturnStmt 0x7ffe5b820b78 <line:8:9, col:16>
|     `-ImplicitCastExpr 0x7ffe5b820b60 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7ffe5b820b28 <col:16> 'const double' lvalue ->_x 0x7ffe5b80eb30
|         `-CXXThisExpr 0x7ffe5b820b10 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7ffe5b80e4b0 <line:11:5, line:14:5> line:11:10 x 'void (double)'
| |-ParmVarDecl 0x7ffe5b80e3e8 <col:12, col:19> col:19 used x 'double'
| `-CompoundStmt 0x7ffe5b820c68 <line:12:5, line:14:5>
|   `-BinaryOperator 0x7ffe5b820c40 <line:13:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7ffe5b820bc8 <col:9> 'double' lvalue ->_x 0x7ffe5b80eb30
|     | `-CXXThisExpr 0x7ffe5b820bb0 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7ffe5b820c28 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7ffe5b820c00 <col:14> 'double' lvalue ParmVar 0x7ffe5b80e3e8 'x' 'double'
|-CXXMethodDecl 0x7ffe5b80e578 <line:16:5, line:19:5> line:16:12 y 'double (void) const'
| `-CompoundStmt 0x7ffe5b820d08 <line:17:5, line:19:5>
|   `-ReturnStmt 0x7ffe5b820cf0 <line:18:9, col:16>
|     `-ImplicitCastExpr 0x7ffe5b820cd8 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7ffe5b820ca0 <col:16> 'const double' lvalue ->_y 0x7ffe5b80eb90
|         `-CXXThisExpr 0x7ffe5b820c88 <col:16> 'const class P2 *' this
|-CXXMethodDecl 0x7ffe5b80e6b0 <line:21:5, line:24:5> line:21:10 y 'void (double)'
| |-ParmVarDecl 0x7ffe5b80e628 <col:12, col:19> col:19 used y 'double'
| `-CompoundStmt 0x7ffe5b820de0 <line:22:5, line:24:5>
|   `-BinaryOperator 0x7ffe5b820db8 <line:23:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7ffe5b820d40 <col:9> 'double' lvalue ->_y 0x7ffe5b80eb90
|     | `-CXXThisExpr 0x7ffe5b820d28 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7ffe5b820da0 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7ffe5b820d78 <col:14> 'double' lvalue ParmVar 0x7ffe5b80e628 'y' 'double'
|-CXXMethodDecl 0x7ffe5b80e778 <line:26:5, line:29:5> line:26:20 used z 'double (void) const' virtual
| `-CompoundStmt 0x7ffe5b820e38 <line:27:5, line:29:5>
|   `-ReturnStmt 0x7ffe5b820e20 <line:28:9, col:16>
|     `-FloatingLiteral 0x7ffe5b820e00 <col:16> 'double' 0.000000e+00
|-CXXMethodDecl 0x7ffe5b80e8b0 <line:31:5, col:29> col:18 z 'void (double)' virtual
| |-ParmVarDecl 0x7ffe5b80e828 <col:20> col:26 'double'
| `-CompoundStmt 0x7ffe5b820e58 <col:28, col:29>
|-CXXMethodDecl 0x7ffe5b80ea50 <line:33:5, line:38:5> line:34:5 used operator+= 'void (const class P2 &)' virtual
| |-ParmVarDecl 0x7ffe5b80e988 <col:16, col:26> col:26 used rhs 'const class P2 &'
| `-CompoundStmt 0x7ffe5b821070 <line:35:5, line:38:5>
|   |-CompoundAssignOperator 0x7ffe5b820f38 <line:36:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 0x7ffe5b820e88 <col:9> 'double' lvalue ->_x 0x7ffe5b80eb30
|   | | `-CXXThisExpr 0x7ffe5b820e70 <col:9> 'class P2 *' this
|   | `-ImplicitCastExpr 0x7ffe5b820f20 <col:15, col:19> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7ffe5b820ee8 <col:15, col:19> 'const double' lvalue ._x 0x7ffe5b80eb30
|   |     `-DeclRefExpr 0x7ffe5b820ec0 <col:15> 'const class P2' lvalue ParmVar 0x7ffe5b80e988 'rhs' 'const class P2 &'
|   `-CompoundAssignOperator 0x7ffe5b821038 <line:37:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 0x7ffe5b820f88 <col:9> 'double' lvalue ->_y 0x7ffe5b80eb90
|     | `-CXXThisExpr 0x7ffe5b820f70 <col:9> 'class P2 *' this
|     `-ImplicitCastExpr 0x7ffe5b821020 <col:15, col:19> 'double' <LValueToRValue>
|       `-MemberExpr 0x7ffe5b820fe8 <col:15, col:19> 'const double' lvalue ._y 0x7ffe5b80eb90
|         `-DeclRefExpr 0x7ffe5b820fc0 <col:15> 'const class P2' lvalue ParmVar 0x7ffe5b80e988 'rhs' 'const class P2 &'
|-AccessSpecDecl 0x7ffe5b80eaf0 <line:40:1, col:10> col:1 protected
|-FieldDecl 0x7ffe5b80eb30 <line:41:5, col:17> col:12 referenced _x 'double'
| `-FloatingLiteral 0x7ffe5b8208b8 <col:17> 'double' 0.000000e+00
|-FieldDecl 0x7ffe5b80eb90 <line:42:5, col:17> col:12 referenced _y 'double'
| `-FloatingLiteral 0x7ffe5b8208d8 <col:17> 'double' 0.000000e+00
|-CXXMethodDecl 0x7ffe5b80ec08 <line:2:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7ffe5b80ec08
| `-ParmVarDecl 0x7ffe5b80ed20 <col:7> col:7 'const class P2 &'
|-CXXMethodDecl 0x7ffe5b820600 <col:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(class P2 &&)' inline default noexcept-unevaluated 0x7ffe5b820600
| `-ParmVarDecl 0x7ffe5b820720 <col:7> col:7 'class P2 &&'
|-CXXDestructorDecl 0x7ffe5b8207a8 <col:7> col:7 implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7ffe5b8207a8
|-CXXConstructorDecl 0x7ffe5b83fed8 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7ffe5b83fed8
| `-ParmVarDecl 0x7ffe5b83ffc0 <col:7> col:7 'const class P2 &'
`-CXXConstructorDecl 0x7ffe5b840028 <col:7> col:7 implicit constexpr P2 'void (class P2 &&)' inline default noexcept-unevaluated 0x7ffe5b840028
  `-ParmVarDecl 0x7ffe5b840150 <col:7> col:7 'class P2 &&'

Layout: <CGRecordLayout
  LLVMType:%class.P2 = type { i32 (...)**, double, double }
  NonVirtualBaseLLVMType:%class.P2 = type { i32 (...)**, double, double }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct C
         0 |   int d1
         4 |   int d2
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class V
         0 |   (V vtable pointer)
         8 |   struct C (base)
         8 |     int d1
        12 |     int d2
        16 |   int d3
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | class P3
         0 |   class P2 (primary base)
         0 |     (P2 vtable pointer)
         8 |     double _x
        16 |     double _y
        24 |   double _z
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7ffe5b821098 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/05_adding_polymorphism.cpp:47:1, line:69:1> line:47:7 referenced class P3 definition
|-public 'class P2'
|-CXXRecordDecl 0x7ffe5b8211f8 <col:1, col:7> col:7 implicit referenced class P3
|-AccessSpecDecl 0x7ffe5b821290 <line:48:1, col:7> col:1 public
|-CXXConstructorDecl 0x7ffe5b8214f0 <line:49:5, col:57> col:5 used P3 'void (double, double, double)'
| |-ParmVarDecl 0x7ffe5b8212d0 <col:8, col:15> col:15 used x 'double'
| |-ParmVarDecl 0x7ffe5b821348 <col:18, col:25> col:25 used y 'double'
| |-ParmVarDecl 0x7ffe5b8213c0 <col:28, col:35> col:35 used z 'double'
| |-CXXCtorInitializer 'class P2'
| | `-CXXConstructExpr 0x7ffe5b8401e8 <col:40, col:47> 'class P2' 'void (double, double)'
| |   |-ImplicitCastExpr 0x7ffe5b8401b8 <col:43> 'double' <LValueToRValue>
| |   | `-DeclRefExpr 0x7ffe5b83fe28 <col:43> 'double' lvalue ParmVar 0x7ffe5b8212d0 'x' 'double'
| |   `-ImplicitCastExpr 0x7ffe5b8401d0 <col:46> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7ffe5b83fe50 <col:46> 'double' lvalue ParmVar 0x7ffe5b821348 'y' 'double'
| |-CXXCtorInitializer Field 0x7ffe5b83f950 '_z' 'double'
| | `-InitListExpr 0x7ffe5b8402c0 <col:52, col:54> 'double'
| |   `-ImplicitCastExpr 0x7ffe5b840300 <col:53> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x7ffe5b840250 <col:53> 'double' lvalue ParmVar 0x7ffe5b8213c0 'z' 'double'
| `-CompoundStmt 0x7ffe5b840358 <col:56, col:57>
|-CXXMethodDecl 0x7ffe5b83f600 <line:51:5, line:54:5> line:51:12 z 'double (void) const'
| `-CompoundStmt 0x7ffe5b8403f0 <line:52:5, line:54:5>
|   `-ReturnStmt 0x7ffe5b8403d8 <line:53:9, col:16>
|     `-ImplicitCastExpr 0x7ffe5b8403c0 <col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x7ffe5b840388 <col:16> 'const double' lvalue ->_z 0x7ffe5b83f950
|         `-CXXThisExpr 0x7ffe5b840370 <col:16> 'const class P3 *' this
|-CXXMethodDecl 0x7ffe5b83f738 <line:56:5, line:59:5> line:56:10 z 'void (double)'
| |-ParmVarDecl 0x7ffe5b83f6b0 <col:12, col:19> col:19 used z 'double'
| `-CompoundStmt 0x7ffe5b8404c8 <line:57:5, line:59:5>
|   `-BinaryOperator 0x7ffe5b8404a0 <line:58:9, col:14> 'double' lvalue '='
|     |-MemberExpr 0x7ffe5b840428 <col:9> 'double' lvalue ->_z 0x7ffe5b83f950
|     | `-CXXThisExpr 0x7ffe5b840410 <col:9> 'class P3 *' this
|     `-ImplicitCastExpr 0x7ffe5b840488 <col:14> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7ffe5b840460 <col:14> 'double' lvalue ParmVar 0x7ffe5b83f6b0 'z' 'double'
|-CXXMethodDecl 0x7ffe5b83f870 <line:61:5, line:65:5> line:61:10 operator+= 'void (const class P2 &)'
| |-ParmVarDecl 0x7ffe5b83f7e8 <col:21, col:31> col:31 used rhs 'const class P2 &'
| `-CompoundStmt 0x7ffe5c0009b0 <line:62:5, line:65:5>
|   |-CXXMemberCallExpr 0x7ffe5b8405e0 <line:63:9, col:27> 'void'
|   | |-MemberExpr 0x7ffe5b840568 <col:9, col:21> '<bound member function type>' ->operator+= 0x7ffe5b80ea50
|   | | `-ImplicitCastExpr 0x7ffe5c000810 <col:13> 'class P2 *' <UncheckedDerivedToBase (P2)>
|   | |   `-CXXThisExpr 0x7ffe5b840550 <col:13> 'class P3 *' this
|   | `-DeclRefExpr 0x7ffe5b8405b8 <col:24> 'const class P2' lvalue ParmVar 0x7ffe5b83f7e8 'rhs' 'const class P2 &'
|   `-CompoundAssignOperator 0x7ffe5c000978 <line:64:9, col:21> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 0x7ffe5c000848 <col:9> 'double' lvalue ->_z 0x7ffe5b83f950
|     | `-CXXThisExpr 0x7ffe5c000830 <col:9> 'class P3 *' this
|     `-CXXMemberCallExpr 0x7ffe5c000950 <col:15, col:21> 'double'
|       `-MemberExpr 0x7ffe5c000918 <col:15, col:19> '<bound member function type>' .z 0x7ffe5b80e778
|         `-DeclRefExpr 0x7ffe5c000880 <col:15> 'const class P2' lvalue ParmVar 0x7ffe5b83f7e8 'rhs' 'const class P2 &'
|-AccessSpecDecl 0x7ffe5b83f910 <line:67:1, col:10> col:1 protected
|-FieldDecl 0x7ffe5b83f950 <line:68:5, col:12> col:12 referenced _z 'double'
|-CXXMethodDecl 0x7ffe5b83f9f8 <line:47:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7ffe5b83f9f8
| `-ParmVarDecl 0x7ffe5b83fb10 <col:7> col:7 'const class P3 &'
|-CXXMethodDecl 0x7ffe5b83fba8 <col:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(class P3 &&)' inline default noexcept-unevaluated 0x7ffe5b83fba8
| `-ParmVarDecl 0x7ffe5b83fcc0 <col:7> col:7 'class P3 &&'
|-CXXDestructorDecl 0x7ffe5b83fd48 <col:7> col:7 implicit ~P3 'void (void)' inline default trivial noexcept-unevaluated 0x7ffe5b83fd48
|-CXXConstructorDecl 0x7ffe5c005c00 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7ffe5c005c00
| `-ParmVarDecl 0x7ffe5c005d30 <col:7> col:7 'const class P3 &'
`-CXXConstructorDecl 0x7ffe5c005d98 <col:7> col:7 implicit constexpr P3 'void (class P3 &&)' inline default noexcept-unevaluated 0x7ffe5c005d98
  `-ParmVarDecl 0x7ffe5c005ec0 <col:7> col:7 'class P3 &&'

Layout: <CGRecordLayout
  LLVMType:%class.P3 = type { %class.P2, double }
  NonVirtualBaseLLVMType:%class.P3 = type { %class.P2, double }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7ffe5c000e20 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/05_adding_polymorphism.cpp:77:1, line:80:1> line:77:8 referenced struct C definition
|-CXXRecordDecl 0x7ffe5c000f48 <col:1, col:8> col:8 implicit struct C
|-FieldDecl 0x7ffe5c000ff8 <line:78:5, col:9> col:9 d1 'int'
|-FieldDecl 0x7ffe5c001058 <line:79:5, col:9> col:9 d2 'int'
|-CXXMethodDecl 0x7ffe5c001698 <line:77:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(const struct C &)' inline default trivial noexcept-unevaluated 0x7ffe5c001698
| `-ParmVarDecl 0x7ffe5c005400 <col:8> col:8 'const struct C &'
|-CXXMethodDecl 0x7ffe5c005498 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C &(struct C &&)' inline default trivial noexcept-unevaluated 0x7ffe5c005498
| `-ParmVarDecl 0x7ffe5c0055b0 <col:8> col:8 'struct C &&'
|-CXXDestructorDecl 0x7ffe5c0058c8 <col:8> col:8 implicit ~C 'void (void)' inline default trivial noexcept-unevaluated 0x7ffe5c0058c8
|-CXXConstructorDecl 0x7ffe5c0085c8 <col:8> col:8 implicit used C 'void (void) noexcept' inline default trivial
| `-CompoundStmt 0x7ffe5c008d20 <col:8>
|-CXXConstructorDecl 0x7ffe5c0086a8 <col:8> col:8 implicit constexpr C 'void (const struct C &)' inline default trivial noexcept-unevaluated 0x7ffe5c0086a8
| `-ParmVarDecl 0x7ffe5c0087d0 <col:8> col:8 'const struct C &'
`-CXXConstructorDecl 0x7ffe5c008838 <col:8> col:8 implicit constexpr C 'void (struct C &&)' inline default trivial noexcept-unevaluated 0x7ffe5c008838
  `-ParmVarDecl 0x7ffe5c008960 <col:8> col:8 'struct C &&'

Layout: <CGRecordLayout
  LLVMType:%struct.C = type { i32, i32 }
  NonVirtualBaseLLVMType:%struct.C = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x7ffe5c0010c0 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/05_adding_polymorphism.cpp:82:1, line:88:1> line:82:7 referenced class V definition
|-public 'struct C'
|-CXXRecordDecl 0x7ffe5c001228 <col:1, col:7> col:7 implicit class V
|-AccessSpecDecl 0x7ffe5c0012c0 <line:83:1, col:7> col:1 public
|-CXXMethodDecl 0x7ffe5c001338 <line:84:5, col:23> col:18 m 'void (void)' virtual
| `-CompoundStmt 0x7ffe5c0059a8 <col:22, col:23>
|-AccessSpecDecl 0x7ffe5c0013d0 <line:86:1, col:8> col:1 private
|-FieldDecl 0x7ffe5c001410 <line:87:5, col:9> col:9 d3 'int'
|-CXXMethodDecl 0x7ffe5c0014b8 <line:82:7, <invalid sloc>> col:7 implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7ffe5c0014b8
| `-ParmVarDecl 0x7ffe5c0015d0 <col:7> col:7 'const class V &'
|-CXXMethodDecl 0x7ffe5c005648 <col:7, <invalid sloc>> col:7 implicit operator= 'class V &(class V &&)' inline default noexcept-unevaluated 0x7ffe5c005648
| `-ParmVarDecl 0x7ffe5c005760 <col:7> col:7 'class V &&'
|-CXXDestructorDecl 0x7ffe5c0057e8 <col:7> col:7 implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7ffe5c0057e8
|-CXXConstructorDecl 0x7ffe5c0084c8 <col:7> col:7 implicit used V 'void (void) noexcept' inline default
| |-CXXCtorInitializer 'struct C'
| | `-CXXConstructExpr 0x7ffe5c008d38 <col:7> 'struct C' 'void (void) noexcept'
| `-CompoundStmt 0x7ffe5c008da8 <col:7>
|-CXXConstructorDecl 0x7ffe5c0089c8 <col:7> col:7 implicit constexpr V 'void (const class V &)' inline default noexcept-unevaluated 0x7ffe5c0089c8
| `-ParmVarDecl 0x7ffe5c008af0 <col:7> col:7 'const class V &'
`-CXXConstructorDecl 0x7ffe5c008b58 <col:7> col:7 implicit constexpr V 'void (class V &&)' inline default noexcept-unevaluated 0x7ffe5c008b58
  `-ParmVarDecl 0x7ffe5c008c80 <col:7> col:7 'class V &&'

Layout: <CGRecordLayout
  LLVMType:%class.V = type <{ i32 (...)**, %struct.C, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.V.base = type <{ i32 (...)**, %struct.C, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

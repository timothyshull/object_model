TranslationUnitDecl 0x7fa3328326d0
|-TypedefDecl implicit referenced __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit referenced __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-NamespaceDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:442:1, > std
| `-NamespaceDecl <scratch space>:25:1 __1 inline
|-LinkageSpecDecl </usr/include/sys/cdefs.h:71:23, > C
| |-TypedefDecl </usr/include/math.h:44:5, > float_t 'float'
| | `-BuiltinType 'float'
| |-TypedefDecl double_t 'double'
| | `-BuiltinType 'double'
| |-FunctionDecl __math_errhandling 'int (void)' extern
| |-FunctionDecl referenced __fpclassifyf 'int (float)' extern
| | `-ParmVarDecl 'float'
| |-FunctionDecl referenced __fpclassifyd 'int (double)' extern
| | `-ParmVarDecl 'double'
| |-FunctionDecl referenced __fpclassifyl 'int (long double)' extern
| | `-ParmVarDecl 'long double'
| |-FunctionDecl </usr/include/sys/cdefs.h:300:36, /usr/include/math.h:188:52> used __inline_isfinitef 'int (float)' inline
| | |-ParmVarDecl 'float'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl used __inline_isfinited 'int (double)' inline
| | |-ParmVarDecl 'double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl used __inline_isfinitel 'int (long double)' inline
| | |-ParmVarDecl 'long double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isinff 'int (float)' inline
| | |-ParmVarDecl 'float'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isinfd 'int (double)' inline
| | |-ParmVarDecl 'double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isinfl 'int (long double)' inline
| | |-ParmVarDecl 'long double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isnanf 'int (float)' inline
| | |-ParmVarDecl 'float'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isnand 'int (double)' inline
| | |-ParmVarDecl 'double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isnanl 'int (long double)' inline
| | |-ParmVarDecl 'long double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isnormalf 'int (float)' inline
| | |-ParmVarDecl 'float'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isnormald 'int (double)' inline
| | |-ParmVarDecl 'double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_isnormall 'int (long double)' inline
| | |-ParmVarDecl 'long double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_signbitf 'int (float)' inline
| | |-ParmVarDecl 'float'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_signbitd 'int (double)' inline
| | |-ParmVarDecl 'double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __inline_signbitl 'int (long double)' inline
| | |-ParmVarDecl 'long double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa33302f7e0 used __inline_isfinitef 'int (float)' inline
| | |-ParmVarDecl used __x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '&&'
| | |       |-BinaryOperator '_Bool' '=='
| | |       | |-ImplicitCastExpr 'float' <LValueToRValue>
| | |       | | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330d2300 '__x' 'float'
| | |       | `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       |   `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330d2300 '__x' 'float'
| | |       `-BinaryOperator '_Bool' '!='
| | |         |-CallExpr 'float'
| | |         | |-ImplicitCastExpr 'float (*)(float) noexcept' <BuiltinFnToFnPtr>
| | |         | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d25e8 '__builtin_fabsf' 'float (float) noexcept'
| | |         | `-ImplicitCastExpr 'float' <LValueToRValue>
| | |         |   `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330d2300 '__x' 'float'
| | |         `-CallExpr 'float'
| | |           `-ImplicitCastExpr 'float (*)(void) noexcept' <BuiltinFnToFnPtr>
| | |             `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d2900 '__builtin_inff' 'float (void) noexcept'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa33302f970 used __inline_isfinited 'int (double)' inline
| | |-ParmVarDecl used __x 'double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '&&'
| | |       |-BinaryOperator '_Bool' '=='
| | |       | |-ImplicitCastExpr 'double' <LValueToRValue>
| | |       | | `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330d2b70 '__x' 'double'
| | |       | `-ImplicitCastExpr 'double' <LValueToRValue>
| | |       |   `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330d2b70 '__x' 'double'
| | |       `-BinaryOperator '_Bool' '!='
| | |         |-CallExpr 'double'
| | |         | |-ImplicitCastExpr 'double (*)(double) noexcept' <BuiltinFnToFnPtr>
| | |         | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d2e58 '__builtin_fabs' 'double (double) noexcept'
| | |         | `-ImplicitCastExpr 'double' <LValueToRValue>
| | |         |   `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330d2b70 '__x' 'double'
| | |         `-CallExpr 'double'
| | |           `-ImplicitCastExpr 'double (*)(void) noexcept' <BuiltinFnToFnPtr>
| | |             `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d3600 '__builtin_inf' 'double (void) noexcept'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa33302fb00 used __inline_isfinitel 'int (long double)' inline
| | |-ParmVarDecl used __x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '&&'
| | |       |-BinaryOperator '_Bool' '=='
| | |       | |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       | | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330d3870 '__x' 'long double'
| | |       | `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       |   `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330d3870 '__x' 'long double'
| | |       `-BinaryOperator '_Bool' '!='
| | |         |-CallExpr 'long double'
| | |         | |-ImplicitCastExpr 'long double (*)(long double) noexcept' <BuiltinFnToFnPtr>
| | |         | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d3b58 '__builtin_fabsl' 'long double (long double) noexcept'
| | |         | `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |         |   `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330d3870 '__x' 'long double'
| | |         `-CallExpr 'long double'
| | |           `-ImplicitCastExpr 'long double (*)(void) noexcept' <BuiltinFnToFnPtr>
| | |             `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d3e70 '__builtin_infl' 'long double (void) noexcept'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa33302fc90 referenced __inline_isinff 'int (float)' inline
| | |-ParmVarDecl used __x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '=='
| | |       |-CallExpr 'float'
| | |       | |-ImplicitCastExpr 'float (*)(float) noexcept' <BuiltinFnToFnPtr>
| | |       | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d25e8 '__builtin_fabsf' 'float (float) noexcept'
| | |       | `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       |   `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330d40e0 '__x' 'float'
| | |       `-CallExpr 'float'
| | |         `-ImplicitCastExpr 'float (*)(void) noexcept' <BuiltinFnToFnPtr>
| | |           `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d2900 '__builtin_inff' 'float (void) noexcept'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d1230 referenced __inline_isinfd 'int (double)' inline
| | |-ParmVarDecl used __x 'double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '=='
| | |       |-CallExpr 'double'
| | |       | |-ImplicitCastExpr 'double (*)(double) noexcept' <BuiltinFnToFnPtr>
| | |       | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d2e58 '__builtin_fabs' 'double (double) noexcept'
| | |       | `-ImplicitCastExpr 'double' <LValueToRValue>
| | |       |   `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330d4400 '__x' 'double'
| | |       `-CallExpr 'double'
| | |         `-ImplicitCastExpr 'double (*)(void) noexcept' <BuiltinFnToFnPtr>
| | |           `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d3600 '__builtin_inf' 'double (void) noexcept'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d13c0 referenced __inline_isinfl 'int (long double)' inline
| | |-ParmVarDecl used __x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '=='
| | |       |-CallExpr 'long double'
| | |       | |-ImplicitCastExpr 'long double (*)(long double) noexcept' <BuiltinFnToFnPtr>
| | |       | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d3b58 '__builtin_fabsl' 'long double (long double) noexcept'
| | |       | `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       |   `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330d4b20 '__x' 'long double'
| | |       `-CallExpr 'long double'
| | |         `-ImplicitCastExpr 'long double (*)(void) noexcept' <BuiltinFnToFnPtr>
| | |           `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d3e70 '__builtin_infl' 'long double (void) noexcept'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d1550 referenced __inline_isnanf 'int (float)' inline
| | |-ParmVarDecl used __x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '!='
| | |       |-ImplicitCastExpr 'float' <LValueToRValue>
| | |       | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330d4e40 '__x' 'float'
| | |       `-ImplicitCastExpr 'float' <LValueToRValue>
| | |         `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330d4e40 '__x' 'float'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d16e0 referenced __inline_isnand 'int (double)' inline
| | |-ParmVarDecl used __x 'double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '!='
| | |       |-ImplicitCastExpr 'double' <LValueToRValue>
| | |       | `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330d50c8 '__x' 'double'
| | |       `-ImplicitCastExpr 'double' <LValueToRValue>
| | |         `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330d50c8 '__x' 'double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d1870 referenced __inline_isnanl 'int (long double)' inline
| | |-ParmVarDecl used __x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'int' <IntegralCast>
| | |     `-BinaryOperator '_Bool' '!='
| | |       |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330d5350 '__x' 'long double'
| | |       `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |         `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330d5350 '__x' 'long double'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d1eb0 referenced __inline_signbitf 'int (float)' inline
| | |-ParmVarDecl used __x 'float'
| | |-CompoundStmt
| | | |-DeclStmt
| | | | |-CXXRecordDecl union definition
| | | | | |-FieldDecl referenced __f 'float'
| | | | | |-FieldDecl referenced __u 'unsigned int'
| | | | | |-CXXConstructorDecl implicit used  'void (void) noexcept' inline default trivial
| | | | | | `-CompoundStmt
| | | | | |-CXXConstructorDecl implicit constexpr  'void (const union (anonymous at /usr/include/math.h:232:5) &)' inline default trivial noexcept-unevaluated 0x7fa3330d6bc8
| | | | | | `-ParmVarDecl 'const union (anonymous at /usr/include/math.h:232:5) &'
| | | | | `-CXXConstructorDecl implicit constexpr  'void (union (anonymous at /usr/include/math.h:232:5) &&)' inline default trivial noexcept-unevaluated 0x7fa3330d6d88
| | | | |   `-ParmVarDecl 'union (anonymous at /usr/include/math.h:232:5) &&'
| | | | `-VarDecl used __u 'union (anonymous union at /usr/include/math.h:232:5)':'union (anonymous at /usr/include/math.h:232:5)' callinit
| | | |   `-CXXConstructExpr 'union (anonymous union at /usr/include/math.h:232:5)':'union (anonymous at /usr/include/math.h:232:5)' 'void (void) noexcept'
| | | |-BinaryOperator 'float' lvalue '='
| | | | |-MemberExpr 'float' lvalue .__f 0x7fa3330d5890
| | | | | `-DeclRefExpr 'union (anonymous union at /usr/include/math.h:232:5)':'union (anonymous at /usr/include/math.h:232:5)' lvalue Var 0x7fa3330d6a00 '__u' 'union (anonymous union at /usr/include/math.h:232:5)':'union (anonymous at /usr/include/math.h:232:5)'
| | | | `-ImplicitCastExpr 'float' <LValueToRValue>
| | | |   `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330d55d8 '__x' 'float'
| | | `-ReturnStmt
| | |   `-CStyleCastExpr 'int' <NoOp>
| | |     `-ImplicitCastExpr 'int' <IntegralCast>
| | |       `-ParenExpr 'unsigned int'
| | |         `-BinaryOperator 'unsigned int' '>>'
| | |           |-ImplicitCastExpr 'unsigned int' <LValueToRValue>
| | |           | `-MemberExpr 'unsigned int' lvalue .__u 0x7fa3330d58f0
| | |           |   `-DeclRefExpr 'union (anonymous union at /usr/include/math.h:232:5)':'union (anonymous at /usr/include/math.h:232:5)' lvalue Var 0x7fa3330d6a00 '__u' 'union (anonymous union at /usr/include/math.h:232:5)':'union (anonymous at /usr/include/math.h:232:5)'
| | |           `-IntegerLiteral 'int' 31
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d2040 referenced __inline_signbitd 'int (double)' inline
| | |-ParmVarDecl used __x 'double'
| | |-CompoundStmt
| | | |-DeclStmt
| | | | |-CXXRecordDecl union definition
| | | | | |-FieldDecl referenced __f 'double'
| | | | | |-FieldDecl referenced __u 'unsigned long long'
| | | | | |-CXXConstructorDecl implicit used  'void (void) noexcept' inline default trivial
| | | | | | `-CompoundStmt
| | | | | |-CXXConstructorDecl implicit constexpr  'void (const union (anonymous at /usr/include/math.h:237:5) &)' inline default trivial noexcept-unevaluated 0x7fa3330d7888
| | | | | | `-ParmVarDecl 'const union (anonymous at /usr/include/math.h:237:5) &'
| | | | | `-CXXConstructorDecl implicit constexpr  'void (union (anonymous at /usr/include/math.h:237:5) &&)' inline default trivial noexcept-unevaluated 0x7fa3330d9498
| | | | |   `-ParmVarDecl 'union (anonymous at /usr/include/math.h:237:5) &&'
| | | | `-VarDecl used __u 'union (anonymous union at /usr/include/math.h:237:5)':'union (anonymous at /usr/include/math.h:237:5)' callinit
| | | |   `-CXXConstructExpr 'union (anonymous union at /usr/include/math.h:237:5)':'union (anonymous at /usr/include/math.h:237:5)' 'void (void) noexcept'
| | | |-BinaryOperator 'double' lvalue '='
| | | | |-MemberExpr 'double' lvalue .__f 0x7fa3330d75d0
| | | | | `-DeclRefExpr 'union (anonymous union at /usr/include/math.h:237:5)':'union (anonymous at /usr/include/math.h:237:5)' lvalue Var 0x7fa3330d76f0 '__u' 'union (anonymous union at /usr/include/math.h:237:5)':'union (anonymous at /usr/include/math.h:237:5)'
| | | | `-ImplicitCastExpr 'double' <LValueToRValue>
| | | |   `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330d7320 '__x' 'double'
| | | `-ReturnStmt
| | |   `-CStyleCastExpr 'int' <NoOp>
| | |     `-ImplicitCastExpr 'int' <IntegralCast>
| | |       `-ParenExpr 'unsigned long long'
| | |         `-BinaryOperator 'unsigned long long' '>>'
| | |           |-ImplicitCastExpr 'unsigned long long' <LValueToRValue>
| | |           | `-MemberExpr 'unsigned long long' lvalue .__u 0x7fa3330d7630
| | |           |   `-DeclRefExpr 'union (anonymous union at /usr/include/math.h:237:5)':'union (anonymous at /usr/include/math.h:237:5)' lvalue Var 0x7fa3330d76f0 '__u' 'union (anonymous union at /usr/include/math.h:237:5)':'union (anonymous at /usr/include/math.h:237:5)'
| | |           `-IntegerLiteral 'int' 63
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d2200 referenced __inline_signbitl 'int (long double)' inline
| | |-ParmVarDecl used __x 'long double'
| | |-CompoundStmt
| | | |-DeclStmt
| | | | |-CXXRecordDecl union definition
| | | | | |-FieldDecl referenced __ld 'long double'
| | | | | |-CXXRecordDecl struct definition
| | | | | | |-FieldDecl __m 'unsigned long long'
| | | | | | |-FieldDecl referenced __sexp 'unsigned short'
| | | | | | |-CXXConstructorDecl implicit  'void (void) noexcept' inline default trivial
| | | | | | |-CXXDestructorDecl implicit ~ 'void (void)' inline default trivial noexcept-unevaluated 0x7fa3330da288
| | | | | | |-CXXConstructorDecl implicit constexpr  'void (const struct (anonymous at /usr/include/math.h:245:9) &)' inline default trivial noexcept-unevaluated 0x7fa3330dadc8
| | | | | | | `-ParmVarDecl 'const struct (anonymous at /usr/include/math.h:245:9) &'
| | | | | | `-CXXConstructorDecl implicit constexpr  'void (struct (anonymous at /usr/include/math.h:245:9) &&)' inline default trivial noexcept-unevaluated 0x7fa3330daf88
| | | | | |   `-ParmVarDecl 'struct (anonymous at /usr/include/math.h:245:9) &&'
| | | | | |-FieldDecl referenced __p 'struct (anonymous struct at /usr/include/math.h:245:9)':'struct (anonymous at /usr/include/math.h:245:9)'
| | | | | |-CXXConstructorDecl implicit used  'void (void) noexcept' inline default trivial
| | | | | | `-CompoundStmt
| | | | | |-CXXConstructorDecl implicit constexpr  'void (const union (anonymous at /usr/include/math.h:243:5) &)' inline default trivial noexcept-unevaluated 0x7fa3330dac00
| | | | | | `-ParmVarDecl 'const union (anonymous at /usr/include/math.h:243:5) &'
| | | | | `-CXXConstructorDecl implicit constexpr  'void (union (anonymous at /usr/include/math.h:243:5) &&)' inline default trivial noexcept-unevaluated 0x7fa3330db148
| | | | |   `-ParmVarDecl 'union (anonymous at /usr/include/math.h:243:5) &&'
| | | | `-VarDecl used __u 'union (anonymous union at /usr/include/math.h:243:5)':'union (anonymous at /usr/include/math.h:243:5)' callinit
| | | |   `-CXXConstructExpr 'union (anonymous union at /usr/include/math.h:243:5)':'union (anonymous at /usr/include/math.h:243:5)' 'void (void) noexcept'
| | | |-BinaryOperator 'long double' lvalue '='
| | | | |-MemberExpr 'long double' lvalue .__ld 0x7fa3330d9cb0
| | | | | `-DeclRefExpr 'union (anonymous union at /usr/include/math.h:243:5)':'union (anonymous at /usr/include/math.h:243:5)' lvalue Var 0x7fa3330da020 '__u' 'union (anonymous union at /usr/include/math.h:243:5)':'union (anonymous at /usr/include/math.h:243:5)'
| | | | `-ImplicitCastExpr 'long double' <LValueToRValue>
| | | |   `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330d99f8 '__x' 'long double'
| | | `-ReturnStmt
| | |   `-CStyleCastExpr 'int' <NoOp>
| | |     `-ParenExpr 'int'
| | |       `-BinaryOperator 'int' '>>'
| | |         |-ImplicitCastExpr 'int' <IntegralCast>
| | |         | `-ImplicitCastExpr 'unsigned short' <LValueToRValue>
| | |         |   `-MemberExpr 'unsigned short' lvalue .__sexp 0x7fa3330d9e90
| | |         |     `-MemberExpr 'struct (anonymous struct at /usr/include/math.h:245:9)':'struct (anonymous at /usr/include/math.h:245:9)' lvalue .__p 0x7fa3330d9f50
| | |         |       `-DeclRefExpr 'union (anonymous union at /usr/include/math.h:243:5)':'union (anonymous at /usr/include/math.h:243:5)' lvalue Var 0x7fa3330da020 '__u' 'union (anonymous union at /usr/include/math.h:243:5)':'union (anonymous at /usr/include/math.h:243:5)'
| | |         `-IntegerLiteral 'int' 15
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d1a00 referenced __inline_isnormalf 'int (float)' inline
| | |-ParmVarDecl used __x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt :145:21>
| | |   `-ImplicitCastExpr </usr/include/math.h:258:12, <built-in>:145:21> 'int' <IntegralCast>
| | |     `-BinaryOperator </usr/include/math.h:258:12, <built-in>:145:21> '_Bool' '&&'
| | |       |-ImplicitCastExpr </usr/include/math.h:258:12, > '_Bool' <IntegralToBoolean>
| | |       | `-CallExpr 'int'
| | |       |   |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| | |       |   | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa3330d2390 '__inline_isfinitef' 'int (float)'
| | |       |   `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       |     `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330db7a8 '__x' 'float'
| | |       `-BinaryOperator :145:21> '_Bool' '>='
| | |         |-CallExpr </usr/include/math.h:258:39, > 'float'
| | |         | |-ImplicitCastExpr 'float (*)(float) noexcept' <BuiltinFnToFnPtr>
| | |         | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d25e8 '__builtin_fabsf' 'float (float) noexcept'
| | |         | `-ImplicitCastExpr 'float' <LValueToRValue>
| | |         |   `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330db7a8 '__x' 'float'
| | |         `-FloatingLiteral <<built-in>:145:21> 'float' 1.175494e-38
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d1b90 referenced __inline_isnormald 'int (double)' inline
| | |-ParmVarDecl used __x 'double'
| | |-CompoundStmt
| | | `-ReturnStmt :159:21>
| | |   `-ImplicitCastExpr </usr/include/math.h:261:12, <built-in>:159:21> 'int' <IntegralCast>
| | |     `-BinaryOperator </usr/include/math.h:261:12, <built-in>:159:21> '_Bool' '&&'
| | |       |-ImplicitCastExpr </usr/include/math.h:261:12, > '_Bool' <IntegralToBoolean>
| | |       | `-CallExpr 'int'
| | |       |   |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| | |       |   | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa3330d2c00 '__inline_isfinited' 'int (double)'
| | |       |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |       |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330dc000 '__x' 'double'
| | |       `-BinaryOperator :159:21> '_Bool' '>='
| | |         |-CallExpr </usr/include/math.h:261:39, > 'double'
| | |         | |-ImplicitCastExpr 'double (*)(double) noexcept' <BuiltinFnToFnPtr>
| | |         | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d2e58 '__builtin_fabs' 'double (double) noexcept'
| | |         | `-ImplicitCastExpr 'double' <LValueToRValue>
| | |         |   `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330dc000 '__x' 'double'
| | |         `-FloatingLiteral <<built-in>:159:21> 'double' 2.225074e-308
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330d1d20 referenced __inline_isnormall 'int (long double)' inline
| | |-ParmVarDecl used __x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt :173:22>
| | |   `-ImplicitCastExpr </usr/include/math.h:264:12, <built-in>:173:22> 'int' <IntegralCast>
| | |     `-BinaryOperator </usr/include/math.h:264:12, <built-in>:173:22> '_Bool' '&&'
| | |       |-ImplicitCastExpr </usr/include/math.h:264:12, > '_Bool' <IntegralToBoolean>
| | |       | `-CallExpr 'int'
| | |       |   |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| | |       |   | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa3330d3900 '__inline_isfinitel' 'int (long double)'
| | |       |   `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       |     `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330dc448 '__x' 'long double'
| | |       `-BinaryOperator :173:22> '_Bool' '>='
| | |         |-CallExpr </usr/include/math.h:264:39, > 'long double'
| | |         | |-ImplicitCastExpr 'long double (*)(long double) noexcept' <BuiltinFnToFnPtr>
| | |         | | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3330d3b58 '__builtin_fabsl' 'long double (long double) noexcept'
| | |         | `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |         |   `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3330dc448 '__x' 'long double'
| | |         `-FloatingLiteral <<built-in>:173:22> 'long double' 0.000000e+00
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl </usr/include/math.h:322:1, > used acosf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced acos 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used acosl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used asinf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced asin 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used asinl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used atanf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced atan 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used atanl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used atan2f 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl atan2 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used atan2l 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used cosf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced cos 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used cosl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used sinf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced sin 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used sinl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used tanf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced tan 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used tanl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used acoshf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced acosh 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used acoshl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used asinhf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced asinh 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used asinhl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used atanhf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced atanh 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used atanhl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used coshf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced cosh 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used coshl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used sinhf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced sinh 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used sinhl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used tanhf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced tanh 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used tanhl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used expf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced exp 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used expl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used exp2f 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced exp2 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used exp2l 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used expm1f 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced expm1 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used expm1l 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used logf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced log 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used logl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used log10f 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced log10 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used log10l 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used log2f 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced log2 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used log2l 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used log1pf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced log1p 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used log1pl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used logbf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced logb 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used logbl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used modff 'float (float, float *)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float *'
| | `-NoThrowAttr Implicit
| |-FunctionDecl modf 'double (double, double *)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double *'
| | `-NoThrowAttr Implicit
| |-FunctionDecl used modfl 'long double (long double, long double *)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double *'
| | `-NoThrowAttr Implicit
| |-FunctionDecl used ldexpf 'float (float, int)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'int'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced ldexp 'double (double, int)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'int'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used ldexpl 'long double (long double, int)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'int'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used frexpf 'float (float, int *)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'int *'
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced frexp 'double (double, int *)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'int *'
| | `-NoThrowAttr Implicit
| |-FunctionDecl used frexpl 'long double (long double, int *)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'int *'
| | `-NoThrowAttr Implicit
| |-FunctionDecl used ilogbf 'int (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced ilogb 'int (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used ilogbl 'int (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used scalbnf 'float (float, int)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'int'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced scalbn 'double (double, int)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'int'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used scalbnl 'long double (long double, int)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'int'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used scalblnf 'float (float, long)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'long'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced scalbln 'double (double, long)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'long'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used scalblnl 'long double (long double, long)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used fabsf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used fabs 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used fabsl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used cbrtf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced cbrt 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used cbrtl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used hypotf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl hypot 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used hypotl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used powf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl pow 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used powl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used sqrtf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used sqrt 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used sqrtl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used erff 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced erf 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used erfl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used erfcf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced erfc 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used erfcl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used lgammaf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced lgamma 'double (double)' extern
| | |-ParmVarDecl 'double'
| | `-NoThrowAttr Implicit
| |-FunctionDecl used lgammal 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | `-NoThrowAttr Implicit
| |-FunctionDecl used tgammaf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced tgamma 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used tgammal 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used ceilf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl referenced ceil 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used ceill 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used floorf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl referenced floor 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used floorl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used nearbyintf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl referenced nearbyint 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used nearbyintl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used rintf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl referenced rint 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used rintl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used lrintf 'long (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced lrint 'long (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used lrintl 'long (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used roundf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl referenced round 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used roundl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used lroundf 'long (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced lround 'long (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used lroundl 'long (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used llrintf 'long long (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced llrint 'long long (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used llrintl 'long long (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used llroundf 'long long (float)' extern
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced llround 'long long (double)' extern
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used llroundl 'long long (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used truncf 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl referenced trunc 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used truncl 'long double (long double)' extern
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used fmodf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl fmod 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used fmodl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used remainderf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl remainder 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used remainderl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used remquof 'float (float, float, int *)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | `-ParmVarDecl 'int *'
| |-FunctionDecl remquo 'double (double, double, int *)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | `-ParmVarDecl 'int *'
| |-FunctionDecl used remquol 'long double (long double, long double, int *)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | `-ParmVarDecl 'int *'
| |-FunctionDecl used copysignf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl copysign 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used copysignl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl nanf 'float (const char *)' extern
| | |-ParmVarDecl 'const char *'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl nan 'double (const char *)' extern
| | |-ParmVarDecl 'const char *'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl nanl 'long double (const char *)' extern
| | |-ParmVarDecl 'const char *'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used nextafterf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl nextafter 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used nextafterl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl referenced nexttoward 'double (double, long double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used nexttowardf 'float (float, long double)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used nexttowardl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used fdimf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl fdim 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used fdiml 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used fmaxf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl fmax 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used fmaxl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used fminf 'float (float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl fmin 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used fminl 'long double (long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-NoThrowAttr Implicit
| | `-ConstAttr Implicit
| |-FunctionDecl used fmaf 'float (float, float, float)' extern
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ParmVarDecl 'float'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl fma 'double (double, double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl used fmal 'long double (long double, long double, long double)' extern
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ParmVarDecl 'long double'
| | |-ConstAttr Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl /usr/include/math.h:565:14 __inff 'float (void)' extern
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| |-FunctionDecl </usr/include/math.h:566:1, /usr/include/AvailabilityInternal.h:20732:140> /usr/include/math.h:566:15 __inf 'double (void)' extern
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| |-FunctionDecl </usr/include/math.h:567:1, /usr/include/AvailabilityInternal.h:20732:140> /usr/include/math.h:567:20 __infl 'long double (void)' extern
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| |-FunctionDecl </usr/include/math.h:569:1, /usr/include/AvailabilityInternal.h:20677:124> /usr/include/math.h:569:14 __nan 'float (void)' extern
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20677:87, > macos 10.0 0 0 "" ""
| |-FunctionDecl </usr/include/math.h:597:1, /usr/include/AvailabilityInternal.h:21622:124> /usr/include/math.h:597:14 __exp10f 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:597:14> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl /usr/include/math.h:598:15 __exp10 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:598:15> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl </usr/include/sys/cdefs.h:300:36, /usr/include/math.h:604:78> __sincosf 'void (float, float *, float *)' inline
| | |-ParmVarDecl __x 'float'
| | |-ParmVarDecl __sinp 'float *'
| | |-ParmVarDecl __cosp 'float *'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __sincos 'void (double, double *, double *)' inline
| | |-ParmVarDecl __x 'double'
| | |-ParmVarDecl __sinp 'double *'
| | |-ParmVarDecl __cosp 'double *'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl </usr/include/math.h:614:1, /usr/include/AvailabilityInternal.h:21622:124> /usr/include/math.h:614:14 __cospif 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:614:14> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl /usr/include/math.h:615:15 __cospi 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:615:15> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl /usr/include/math.h:616:14 __sinpif 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:616:14> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl /usr/include/math.h:617:15 __sinpi 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:617:15> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl /usr/include/math.h:618:14 __tanpif 'float (float)' extern
| | |-ParmVarDecl 'float'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:618:14> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl /usr/include/math.h:619:15 __tanpi 'double (double)' extern
| | |-ParmVarDecl 'double'
| | |-AvailabilityAttr </usr/include/AvailabilityInternal.h:21622:87, > macos 10.9 0 0 "" ""
| | |-ConstAttr </usr/include/math.h:619:15> Implicit
| | `-NoThrowAttr Implicit
| |-FunctionDecl </usr/include/sys/cdefs.h:300:36, /usr/include/math.h:645:80> __sincospif 'void (float, float *, float *)' inline
| | |-ParmVarDecl __x 'float'
| | |-ParmVarDecl __sinp 'float *'
| | |-ParmVarDecl __cosp 'float *'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl __sincospi 'void (double, double *, double *)' inline
| | |-ParmVarDecl __x 'double'
| | |-ParmVarDecl __sinp 'double *'
| | |-ParmVarDecl __cosp 'double *'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-CXXRecordDecl </usr/include/math.h:653:1, > struct __float2 definition
| | |-CXXRecordDecl implicit struct __float2
| | |-FieldDecl referenced __sinval 'float'
| | |-FieldDecl referenced __cosval 'float'
| | |-CXXDestructorDecl implicit referenced ~__float2 'void (void) noexcept' inline default trivial
| | |-CXXConstructorDecl implicit __float2 'void (void)' inline default trivial noexcept-unevaluated 0x7fa333109168
| | |-CXXConstructorDecl implicit constexpr __float2 'void (const struct __float2 &)' inline default trivial noexcept-unevaluated 0x7fa333109278
| | | `-ParmVarDecl 'const struct __float2 &'
| | `-CXXConstructorDecl implicit used constexpr __float2 'void (struct __float2 &&) noexcept' inline default trivial
| |   |-ParmVarDecl used 'struct __float2 &&'
| |   |-CXXCtorInitializer Field 0x7fa333101fc8 '__sinval' 'float'
| |   | `-ImplicitCastExpr 'float' <LValueToRValue>
| |   |   `-MemberExpr 'float' xvalue .__sinval 0x7fa333101fc8
| |   |     `-CXXStaticCastExpr 'struct __float2' xvalue static_cast<struct __float2 &&> <NoOp>
| |   |       `-DeclRefExpr 'struct __float2' lvalue ParmVar 0x7fa333109560 '' 'struct __float2 &&'
| |   |-CXXCtorInitializer Field 0x7fa333102028 '__cosval' 'float'
| |   | `-ImplicitCastExpr 'float' <LValueToRValue>
| |   |   `-MemberExpr 'float' xvalue .__cosval 0x7fa333102028
| |   |     `-CXXStaticCastExpr 'struct __float2' xvalue static_cast<struct __float2 &&> <NoOp>
| |   |       `-DeclRefExpr 'struct __float2' lvalue ParmVar 0x7fa333109560 '' 'struct __float2 &&'
| |   `-CompoundStmt
| |-CXXRecordDecl struct __double2 definition
| | |-CXXRecordDecl implicit struct __double2
| | |-FieldDecl referenced __sinval 'double'
| | |-FieldDecl referenced __cosval 'double'
| | |-CXXDestructorDecl implicit referenced ~__double2 'void (void) noexcept' inline default trivial
| | |-CXXConstructorDecl implicit __double2 'void (void)' inline default trivial noexcept-unevaluated 0x7fa3330a6188
| | |-CXXConstructorDecl implicit constexpr __double2 'void (const struct __double2 &)' inline default trivial noexcept-unevaluated 0x7fa3330a6298
| | | `-ParmVarDecl 'const struct __double2 &'
| | `-CXXConstructorDecl implicit used constexpr __double2 'void (struct __double2 &&) noexcept' inline default trivial
| |   |-ParmVarDecl used 'struct __double2 &&'
| |   |-CXXCtorInitializer Field 0x7fa333102268 '__sinval' 'double'
| |   | `-ImplicitCastExpr 'double' <LValueToRValue>
| |   |   `-MemberExpr 'double' xvalue .__sinval 0x7fa333102268
| |   |     `-CXXStaticCastExpr 'struct __double2' xvalue static_cast<struct __double2 &&> <NoOp>
| |   |       `-DeclRefExpr 'struct __double2' lvalue ParmVar 0x7fa3330a6580 '' 'struct __double2 &&'
| |   |-CXXCtorInitializer Field 0x7fa3331022c8 '__cosval' 'double'
| |   | `-ImplicitCastExpr 'double' <LValueToRValue>
| |   |   `-MemberExpr 'double' xvalue .__cosval 0x7fa3331022c8
| |   |     `-CXXStaticCastExpr 'struct __double2' xvalue static_cast<struct __double2 &&> <NoOp>
| |   |       `-DeclRefExpr 'struct __double2' lvalue ParmVar 0x7fa3330a6580 '' 'struct __double2 &&'
| |   `-CompoundStmt
| |-FunctionDecl used __sincosf_stret 'struct __float2 (float)' extern
| | `-ParmVarDecl 'float'
| |-FunctionDecl used __sincos_stret 'struct __double2 (double)' extern
| | `-ParmVarDecl 'double'
| |-FunctionDecl used __sincospif_stret 'struct __float2 (float)' extern
| | `-ParmVarDecl 'float'
| |-FunctionDecl used __sincospi_stret 'struct __double2 (double)' extern
| | `-ParmVarDecl 'double'
| |-FunctionDecl prev 0x7fa3330fa800 </usr/include/sys/cdefs.h:300:36, /usr/include/math.h:664:1> __sincosf 'void (float, float *, float *)' inline
| | |-ParmVarDecl used __x 'float'
| | |-ParmVarDecl used __sinp 'float *'
| | |-ParmVarDecl used __cosp 'float *'
| | |-CompoundStmt
| | | |-DeclStmt
| | | | `-VarDecl used __stret 'const struct __float2':'const struct __float2' cinit
| | | |   `-ExprWithCleanups 'const struct __float2':'const struct __float2'
| | | |     `-CXXConstructExpr 'const struct __float2':'const struct __float2' 'void (struct __float2 &&) noexcept' elidable
| | | |       `-MaterializeTemporaryExpr 'struct __float2':'struct __float2' xvalue
| | | |         `-CallExpr 'struct __float2':'struct __float2'
| | | |           |-ImplicitCastExpr 'struct __float2 (*)(float)' <FunctionToPointerDecay>
| | | |           | `-DeclRefExpr 'struct __float2 (float)' lvalue Function 0x7fa333102490 '__sincosf_stret' 'struct __float2 (float)'
| | | |           `-ImplicitCastExpr 'float' <LValueToRValue>
| | | |             `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333108c08 '__x' 'float'
| | | |-BinaryOperator 'float' lvalue '='
| | | | |-UnaryOperator 'float' lvalue prefix '*'
| | | | | `-ImplicitCastExpr 'float *' <LValueToRValue>
| | | | |   `-DeclRefExpr 'float *' lvalue ParmVar 0x7fa333108c80 '__sinp' 'float *'
| | | | `-ImplicitCastExpr 'float' <LValueToRValue>
| | | |   `-MemberExpr 'const float' lvalue .__sinval 0x7fa333101fc8
| | | |     `-DeclRefExpr 'const struct __float2':'const struct __float2' lvalue Var 0x7fa333108ea8 '__stret' 'const struct __float2':'const struct __float2'
| | | `-BinaryOperator 'float' lvalue '='
| | |   |-UnaryOperator 'float' lvalue prefix '*'
| | |   | `-ImplicitCastExpr 'float *' <LValueToRValue>
| | |   |   `-DeclRefExpr 'float *' lvalue ParmVar 0x7fa333108cf8 '__cosp' 'float *'
| | |   `-ImplicitCastExpr 'float' <LValueToRValue>
| | |     `-MemberExpr 'const float' lvalue .__cosval 0x7fa333102028
| | |       `-DeclRefExpr 'const struct __float2':'const struct __float2' lvalue Var 0x7fa333108ea8 '__stret' 'const struct __float2':'const struct __float2'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa3330faae0 __sincos 'void (double, double *, double *)' inline
| | |-ParmVarDecl used __x 'double'
| | |-ParmVarDecl used __sinp 'double *'
| | |-ParmVarDecl used __cosp 'double *'
| | |-CompoundStmt
| | | |-DeclStmt
| | | | `-VarDecl used __stret 'const struct __double2':'const struct __double2' cinit
| | | |   `-ExprWithCleanups 'const struct __double2':'const struct __double2'
| | | |     `-CXXConstructExpr 'const struct __double2':'const struct __double2' 'void (struct __double2 &&) noexcept' elidable
| | | |       `-MaterializeTemporaryExpr 'struct __double2':'struct __double2' xvalue
| | | |         `-CallExpr 'struct __double2':'struct __double2'
| | | |           |-ImplicitCastExpr 'struct __double2 (*)(double)' <FunctionToPointerDecay>
| | | |           | `-DeclRefExpr 'struct __double2 (double)' lvalue Function 0x7fa333102690 '__sincos_stret' 'struct __double2 (double)'
| | | |           `-ImplicitCastExpr 'double' <LValueToRValue>
| | | |             `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330a5c28 '__x' 'double'
| | | |-BinaryOperator 'double' lvalue '='
| | | | |-UnaryOperator 'double' lvalue prefix '*'
| | | | | `-ImplicitCastExpr 'double *' <LValueToRValue>
| | | | |   `-DeclRefExpr 'double *' lvalue ParmVar 0x7fa3330a5ca0 '__sinp' 'double *'
| | | | `-ImplicitCastExpr 'double' <LValueToRValue>
| | | |   `-MemberExpr 'const double' lvalue .__sinval 0x7fa333102268
| | | |     `-DeclRefExpr 'const struct __double2':'const struct __double2' lvalue Var 0x7fa3330a5ec8 '__stret' 'const struct __double2':'const struct __double2'
| | | `-BinaryOperator 'double' lvalue '='
| | |   |-UnaryOperator 'double' lvalue prefix '*'
| | |   | `-ImplicitCastExpr 'double *' <LValueToRValue>
| | |   |   `-DeclRefExpr 'double *' lvalue ParmVar 0x7fa3330a5d18 '__cosp' 'double *'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue .__cosval 0x7fa3331022c8
| | |       `-DeclRefExpr 'const struct __double2':'const struct __double2' lvalue Var 0x7fa3330a5ec8 '__stret' 'const struct __double2':'const struct __double2'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa333101a60 __sincospif 'void (float, float *, float *)' inline
| | |-ParmVarDecl used __x 'float'
| | |-ParmVarDecl used __sinp 'float *'
| | |-ParmVarDecl used __cosp 'float *'
| | |-CompoundStmt
| | | |-DeclStmt
| | | | `-VarDecl used __stret 'const struct __float2':'const struct __float2' cinit
| | | |   `-ExprWithCleanups 'const struct __float2':'const struct __float2'
| | | |     `-CXXConstructExpr 'const struct __float2':'const struct __float2' 'void (struct __float2 &&) noexcept' elidable
| | | |       `-MaterializeTemporaryExpr 'struct __float2':'struct __float2' xvalue
| | | |         `-CallExpr 'struct __float2':'struct __float2'
| | | |           |-ImplicitCastExpr 'struct __float2 (*)(float)' <FunctionToPointerDecay>
| | | |           | `-DeclRefExpr 'struct __float2 (float)' lvalue Function 0x7fa333108a00 '__sincospif_stret' 'struct __float2 (float)'
| | | |           `-ImplicitCastExpr 'float' <LValueToRValue>
| | | |             `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3330a6c28 '__x' 'float'
| | | |-BinaryOperator 'float' lvalue '='
| | | | |-UnaryOperator 'float' lvalue prefix '*'
| | | | | `-ImplicitCastExpr 'float *' <LValueToRValue>
| | | | |   `-DeclRefExpr 'float *' lvalue ParmVar 0x7fa3330a6ca0 '__sinp' 'float *'
| | | | `-ImplicitCastExpr 'float' <LValueToRValue>
| | | |   `-MemberExpr 'const float' lvalue .__sinval 0x7fa333101fc8
| | | |     `-DeclRefExpr 'const struct __float2':'const struct __float2' lvalue Var 0x7fa3330a6ec8 '__stret' 'const struct __float2':'const struct __float2'
| | | `-BinaryOperator 'float' lvalue '='
| | |   |-UnaryOperator 'float' lvalue prefix '*'
| | |   | `-ImplicitCastExpr 'float *' <LValueToRValue>
| | |   |   `-DeclRefExpr 'float *' lvalue ParmVar 0x7fa3330a6d18 '__cosp' 'float *'
| | |   `-ImplicitCastExpr 'float' <LValueToRValue>
| | |     `-MemberExpr 'const float' lvalue .__cosval 0x7fa333102028
| | |       `-DeclRefExpr 'const struct __float2':'const struct __float2' lvalue Var 0x7fa3330a6ec8 '__stret' 'const struct __float2':'const struct __float2'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl prev 0x7fa333101cf8 __sincospi 'void (double, double *, double *)' inline
| | |-ParmVarDecl used __x 'double'
| | |-ParmVarDecl used __sinp 'double *'
| | |-ParmVarDecl used __cosp 'double *'
| | |-CompoundStmt
| | | |-DeclStmt
| | | | `-VarDecl used __stret 'const struct __double2':'const struct __double2' cinit
| | | |   `-ExprWithCleanups 'const struct __double2':'const struct __double2'
| | | |     `-CXXConstructExpr 'const struct __double2':'const struct __double2' 'void (struct __double2 &&) noexcept' elidable
| | | |       `-MaterializeTemporaryExpr 'struct __double2':'struct __double2' xvalue
| | | |         `-CallExpr 'struct __double2':'struct __double2'
| | | |           |-ImplicitCastExpr 'struct __double2 (*)(double)' <FunctionToPointerDecay>
| | | |           | `-DeclRefExpr 'struct __double2 (double)' lvalue Function 0x7fa333108b50 '__sincospi_stret' 'struct __double2 (double)'
| | | |           `-ImplicitCastExpr 'double' <LValueToRValue>
| | | |             `-DeclRefExpr 'double' lvalue ParmVar 0x7fa3330a7350 '__x' 'double'
| | | |-BinaryOperator 'double' lvalue '='
| | | | |-UnaryOperator 'double' lvalue prefix '*'
| | | | | `-ImplicitCastExpr 'double *' <LValueToRValue>
| | | | |   `-DeclRefExpr 'double *' lvalue ParmVar 0x7fa3330a73c8 '__sinp' 'double *'
| | | | `-ImplicitCastExpr 'double' <LValueToRValue>
| | | |   `-MemberExpr 'const double' lvalue .__sinval 0x7fa333102268
| | | |     `-DeclRefExpr 'const struct __double2':'const struct __double2' lvalue Var 0x7fa3330a75f0 '__stret' 'const struct __double2':'const struct __double2'
| | | `-BinaryOperator 'double' lvalue '='
| | |   |-UnaryOperator 'double' lvalue prefix '*'
| | |   | `-ImplicitCastExpr 'double *' <LValueToRValue>
| | |   |   `-DeclRefExpr 'double *' lvalue ParmVar 0x7fa3330a7440 '__cosp' 'double *'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue .__cosval 0x7fa3331022c8
| | |       `-DeclRefExpr 'const struct __double2':'const struct __double2' lvalue Var 0x7fa3330a75f0 '__stret' 'const struct __double2':'const struct __double2'
| | `-AlwaysInlineAttr </usr/include/sys/cdefs.h:313:68> always_inline
| |-FunctionDecl </usr/include/math.h:687:1, /usr/include/AvailabilityInternal.h:20677:124> /usr/include/math.h:687:15 j0 'double (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20677:87, > macos 10.0 0 0 "" ""
| |-FunctionDecl </usr/include/math.h:688:1, /usr/include/AvailabilityInternal.h:20677:124> /usr/include/math.h:688:15 j1 'double (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20677:87, > macos 10.0 0 0 "" ""
| |-FunctionDecl </usr/include/math.h:689:1, /usr/include/AvailabilityInternal.h:20677:124> /usr/include/math.h:689:15 jn 'double (int, double)' extern
| | |-ParmVarDecl 'int'
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20677:87, > macos 10.0 0 0 "" ""
| |-FunctionDecl </usr/include/math.h:690:1, /usr/include/AvailabilityInternal.h:20677:124> /usr/include/math.h:690:15 y0 'double (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20677:87, > macos 10.0 0 0 "" ""
| |-FunctionDecl </usr/include/math.h:691:1, /usr/include/AvailabilityInternal.h:20677:124> /usr/include/math.h:691:15 y1 'double (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20677:87, > macos 10.0 0 0 "" ""
| |-FunctionDecl </usr/include/math.h:692:1, /usr/include/AvailabilityInternal.h:20677:124> /usr/include/math.h:692:15 yn 'double (int, double)' extern
| | |-ParmVarDecl 'int'
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20677:87, > macos 10.0 0 0 "" ""
| |-FunctionDecl </usr/include/math.h:693:1, > scalb 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | `-ParmVarDecl 'double'
| |-VarDecl signgam 'int' extern
| |-FunctionDecl /usr/include/math.h:751:17 rinttol 'long (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| |-FunctionDecl </usr/include/math.h:753:1, /usr/include/AvailabilityInternal.h:20732:140> /usr/include/math.h:753:17 roundtol 'long (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| |-FunctionDecl </usr/include/math.h:755:1, /usr/include/AvailabilityInternal.h:20732:140> /usr/include/math.h:755:15 drem 'double (double, double)' extern
| | |-ParmVarDecl 'double'
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| |-FunctionDecl </usr/include/math.h:757:1, /usr/include/AvailabilityInternal.h:20732:140> /usr/include/math.h:757:12 finite 'int (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| |-FunctionDecl </usr/include/math.h:759:1, /usr/include/AvailabilityInternal.h:20732:140> /usr/include/math.h:759:15 gamma 'double (double)' extern
| | |-ParmVarDecl 'double'
| | `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
| `-FunctionDecl </usr/include/math.h:761:1, /usr/include/AvailabilityInternal.h:20732:140> /usr/include/math.h:761:15 significand 'double (double)' extern
|   |-ParmVarDecl 'double'
|   `-AvailabilityAttr </usr/include/AvailabilityInternal.h:20732:87, > macos 10.0 10.9 0 "" ""
|-LinkageSpecDecl </usr/include/math.h:205:26> implicit C
| `-FunctionDecl implicit used __builtin_fabsf 'float (float) noexcept' extern
|   |-ParmVarDecl 'float'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_inff 'float (void) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_fabs 'double (double) noexcept' extern
|   |-ParmVarDecl 'double'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_inf 'double (void) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_fabsl 'long double (long double) noexcept' extern
|   |-ParmVarDecl 'long double'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_infl 'long double (void) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:307:1, > C++
| |-TypedefDecl </usr/local/Cellar/llvm/5.0.0/bin/../lib/clang/5.0.0/include/stddef.h:51:1, > ptrdiff_t 'long'
| | `-BuiltinType 'long'
| |-TypedefDecl referenced size_t 'unsigned long'
| | `-BuiltinType 'unsigned long'
| |-TypedefDecl </usr/local/Cellar/llvm/5.0.0/bin/../lib/clang/5.0.0/include/__stddef_max_align_t.h:32:1, > max_align_t 'long double'
| | `-BuiltinType 'long double'
| |-NamespaceDecl prev 0x7fa33302ee58 </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__nullptr:55:1, > std
| | |-original Namespace 0x7fa33302ee58 'std'
| | `-TypedefDecl referenced nullptr_t 'decltype(nullptr)':'nullptr_t'
| |   `-DecltypeType 'decltype(nullptr)' sugar
| |     |-CXXNullPtrLiteralExpr 'nullptr_t'
| |     `-BuiltinType 'nullptr_t'
| |-NamespaceDecl prev 0x7fa33310c888 </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:438:37, > std
| | |-original Namespace 0x7fa33302ee58 'std'
| | `-NamespaceDecl prev 0x7fa33302eec0 <scratch space>:343:1 __1 inline
| |   |-original Namespace 0x7fa33302eec0 '__1'
| |   |-UsingDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cstddef:49:1, > ::ptrdiff_t
| |   |-UsingShadowDecl implicit Typedef 0x7fa33310c750 'ptrdiff_t'
| |   | `-<<<NULL>>>
| |   |-UsingDecl ::size_t
| |   |-UsingShadowDecl implicit Typedef 0x7fa33310c7c0 'size_t'
| |   | `-TypedefType 'size_t' sugar
| |   |   |-Typedef 'size_t'
| |   |   `-BuiltinType 'unsigned long'
| |   |-UsingDecl ::max_align_t
| |   `-UsingShadowDecl implicit Typedef 0x7fa33310c830 'max_align_t'
| |     `-<<<NULL>>>
| |-NamespaceDecl prev 0x7fa33310f600 </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:438:37, > std
| | |-original Namespace 0x7fa33302ee58 'std'
| | `-NamespaceDecl prev 0x7fa33310f668 <scratch space>:344:1 __1 inline
| |   |-original Namespace 0x7fa33302eec0 '__1'
| |   |-ClassTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:398:1, > pair
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _T1
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _T2
| |   | `-CXXRecordDecl struct pair
| |   |   `-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |-ClassTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:399:1, > reference_wrapper
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl class reference_wrapper
| |   |   `-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |-ClassTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:400:1, > hash
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct hash
| |   |   `-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |-ClassTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:402:1, > __void_t
| |   | |-TemplateTypeParmDecl class depth 0 index 0
| |   | `-CXXRecordDecl struct __void_t definition
| |   |   |-CXXRecordDecl implicit struct __void_t
| |   |   `-TypedefDecl type 'void'
| |   |     `-BuiltinType 'void'
| |   |-ClassTemplateDecl __identity
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __identity definition
| |   |   |-CXXRecordDecl implicit struct __identity
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplateDecl __dependent_type
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | `-CXXRecordDecl struct __dependent_type definition
| |   |   |-public '_Tp'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:409:1, > implicit struct __dependent_type
| |   |-ClassTemplateDecl conditional
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0 _Bp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _If
| |   | |-TemplateTypeParmDecl class depth 0 index 2 _Then
| |   | `-CXXRecordDecl struct conditional definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:412:5, > implicit struct conditional
| |   |   `-TypedefDecl type '_If'
| |   |     `-TemplateTypeParmType '_If' dependent depth 0 index 1
| |   |       `-TemplateTypeParm '_If'
| |   |-ClassTemplatePartialSpecializationDecl struct conditional definition
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _If
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Then
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:414:5, > implicit struct conditional
| |   | `-TypedefDecl type '_Then'
| |   |   `-TemplateTypeParmType '_Then' dependent depth 0 index 1
| |   |     `-TemplateTypeParm '_Then'
| |   |-TypeAliasTemplateDecl conditional_t
| |   | |-NonTypeTemplateParmDecl referenced '_Bool' depth 0 index 0 _Bp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _If
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _Then
| |   | `-TypeAliasDecl conditional_t 'typename conditional<_Bp, _If, _Then>::type'
| |   |   `-DependentNameType 'typename conditional<_Bp, _If, _Then>::type' dependent
| |   |-ClassTemplateDecl __lazy_enable_if
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Tp
| |   | `-CXXRecordDecl struct __lazy_enable_if definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:420:28, > implicit struct __lazy_enable_if
| |   |-ClassTemplatePartialSpecializationDecl struct __lazy_enable_if definition
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:421:22, > implicit struct __lazy_enable_if
| |   | `-TypedefDecl type 'typename _Tp::type'
| |   |   `-DependentNameType 'typename _Tp::type' dependent
| |   |-ClassTemplateDecl enable_if
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Tp
| |   | | `-TemplateArgument type 'void'
| |   | |-CXXRecordDecl struct enable_if definition
| |   | | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:423:35, > implicit struct enable_if
| |   | |-ClassTemplateSpecializationDecl struct enable_if definition
| |   | | |-TemplateArgument integral 0
| |   | | |-TemplateArgument type 'double'
| |   | | `-CXXRecordDecl prev 0x7fa333821480 implicit struct enable_if
| |   | |-ClassTemplateSpecializationDecl struct enable_if definition
| |   | | |-TemplateArgument integral 0
| |   | | |-TemplateArgument type 'int'
| |   | | `-CXXRecordDecl prev 0x7fa333902788 implicit struct enable_if
| |   | |-ClassTemplateSpecializationDecl struct enable_if definition
| |   | | |-TemplateArgument integral 0
| |   | | |-TemplateArgument type 'long long'
| |   | | `-CXXRecordDecl prev 0x7fa333904b38 implicit struct enable_if
| |   | `-ClassTemplateSpecializationDecl struct enable_if definition
| |   |   |-TemplateArgument integral 0
| |   |   |-TemplateArgument type 'long'
| |   |   `-CXXRecordDecl prev 0x7fa33390ade8 implicit struct enable_if
| |   |-ClassTemplatePartialSpecializationDecl struct enable_if definition
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:424:22, > implicit struct enable_if
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-TypeAliasTemplateDecl enable_if_t
| |   | |-NonTypeTemplateParmDecl referenced '_Bool' depth 0 index 0 _Bp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Tp
| |   | | `-TemplateArgument type 'void'
| |   | `-TypeAliasDecl enable_if_t 'typename enable_if<_Bp, _Tp>::type'
| |   |   `-DependentNameType 'typename enable_if<_Bp, _Tp>::type' dependent
| |   |-FunctionTemplateDecl addressof
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl addressof '_Tp *(_Tp &) noexcept' inline
| |   |   |-ParmVarDecl referenced __x '_Tp &'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr '<dependent type>'
| |   |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa333116ca8 '__builtin_addressof' 'void *(void &) noexcept'
| |   |   |     `-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa3331168b8 '__x' '_Tp &'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   |-VisibilityAttr Hidden
| |   |   `-NoSanitizeAttr cfi
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:496:1, > addressof
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl addressof '_Tp *(const _Tp &&) noexcept' delete
| |   |   `-ParmVarDecl 'const _Tp &&'
| |   |-CXXRecordDecl referenced struct __two definition
| |   | |-CXXRecordDecl implicit struct __two
| |   | `-FieldDecl __lx 'char [2]'
| |   |-ClassTemplateDecl integral_constant
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced '_Tp' depth 0 index 1 __v
| |   | |-CXXRecordDecl struct integral_constant definition
| |   | | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:504:1, > implicit referenced struct integral_constant
| |   | | |-VarDecl referenced value 'const _Tp' static constexpr cinit
| |   | | | `-DeclRefExpr '_Tp' NonTypeTemplateParm 0x7fa3331174b8 '__v' '_Tp'
| |   | | |-TypedefDecl referenced value_type '_Tp'
| |   | | | `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | | |   `-TemplateTypeParm '_Tp'
| |   | | |-TypedefDecl type 'integral_constant<_Tp, __v>'
| |   | | | `-InjectedClassNameType 'integral_constant<_Tp, __v>' dependent
| |   | | |   `-CXXRecord 'integral_constant'
| |   | | |-CXXConversionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:510:79> constexpr operator type-parameter-0-0 'std::__1::integral_constant::value_type (void) const noexcept'
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-DeclRefExpr 'const _Tp' lvalue Var 0x7fa333118000 'value' 'const _Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | `-CXXMethodDecl constexpr operator() 'std::__1::integral_constant::value_type (void) const noexcept'
| |   | |   |-CompoundStmt
| |   | |   | `-ReturnStmt
| |   | |   |   `-DeclRefExpr 'const _Tp' lvalue Var 0x7fa333118000 'value' 'const _Tp'
| |   | |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | |   `-VisibilityAttr Hidden
| |   | |-ClassTemplateSpecializationDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:503:1, > struct integral_constant definition
| |   | | |-TemplateArgument type '_Bool'
| |   | | |-TemplateArgument integral 1
| |   | | |-CXXRecordDecl prev 0x7fa333118aa8 implicit struct integral_constant
| |   | | |-VarDecl value 'const _Bool':'const _Bool' static constexpr cinit
| |   | | | `-SubstNonTypeTemplateParmExpr '_Bool'
| |   | | |   `-CXXBoolLiteralExpr '_Bool' true
| |   | | |-TypedefDecl value_type '_Bool':'_Bool'
| |   | | | `-SubstTemplateTypeParmType '_Bool' sugar
| |   | | |   |-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | | |   | `-TemplateTypeParm '_Tp'
| |   | | |   `-BuiltinType '_Bool'
| |   | | |-TypedefDecl type 'struct std::__1::integral_constant<_Bool, true>'
| |   | | | `-RecordType 'struct std::__1::integral_constant<_Bool, true>'
| |   | | |   `-ClassTemplateSpecialization 'integral_constant'
| |   | | |-CXXConversionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:510:79> constexpr operator bool 'std::__1::integral_constant<_Bool, true>::value_type (void) const noexcept'
| |   | | | `-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-CXXMethodDecl constexpr operator() 'std::__1::integral_constant<_Bool, true>::value_type (void) const noexcept'
| |   | |   `-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | |-ClassTemplateSpecializationDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:503:1, > struct integral_constant definition
| |   | | |-TemplateArgument type '_Bool'
| |   | | |-TemplateArgument integral 0
| |   | | |-CXXRecordDecl prev 0x7fa333118d80 implicit struct integral_constant
| |   | | |-VarDecl referenced value 'const _Bool':'const _Bool' static constexpr cinit
| |   | | | `-SubstNonTypeTemplateParmExpr '_Bool'
| |   | | |   `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-TypedefDecl value_type '_Bool':'_Bool'
| |   | | | `-SubstTemplateTypeParmType '_Bool' sugar
| |   | | |   |-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | | |   | `-TemplateTypeParm '_Tp'
| |   | | |   `-BuiltinType '_Bool'
| |   | | |-TypedefDecl type 'struct std::__1::integral_constant<_Bool, false>'
| |   | | | `-RecordType 'struct std::__1::integral_constant<_Bool, false>'
| |   | | |   `-ClassTemplateSpecialization 'integral_constant'
| |   | | |-CXXConversionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:510:79> constexpr operator bool 'std::__1::integral_constant<_Bool, false>::value_type (void) const noexcept'
| |   | | | `-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-CXXMethodDecl constexpr operator() 'std::__1::integral_constant<_Bool, false>::value_type (void) const noexcept'
| |   | |   `-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-ClassTemplateSpecializationDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:503:1, > struct integral_constant definition
| |   |   |-TemplateArgument type 'unsigned long'
| |   |   |-TemplateArgument integral 0
| |   |   |-CXXRecordDecl prev 0x7fa333165100 implicit struct integral_constant
| |   |   |-VarDecl value 'const unsigned long':'const unsigned long' static constexpr cinit
| |   |   | `-SubstNonTypeTemplateParmExpr 'unsigned long'
| |   |   |   `-IntegerLiteral 'unsigned long' 0
| |   |   |-TypedefDecl value_type 'unsigned long':'unsigned long'
| |   |   | `-SubstTemplateTypeParmType 'unsigned long' sugar
| |   |   |   |-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |   |   | `-TemplateTypeParm '_Tp'
| |   |   |   `-BuiltinType 'unsigned long'
| |   |   |-TypedefDecl type 'struct std::__1::integral_constant<unsigned long, 0>'
| |   |   | `-RecordType 'struct std::__1::integral_constant<unsigned long, 0>'
| |   |   |   `-ClassTemplateSpecialization 'integral_constant'
| |   |   |-CXXConversionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:510:79> constexpr operator unsigned long 'std::__1::integral_constant<unsigned long, 0>::value_type (void) const noexcept'
| |   |   | `-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-CXXMethodDecl constexpr operator() 'std::__1::integral_constant<unsigned long, 0>::value_type (void) const noexcept'
| |   |     `-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |-VarDecl parent 0x7fa333117560 prev 0x7fa333118000 </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:517:1, > value 'const _Tp' constexpr
| |   |-TypedefDecl referenced true_type 'integral_constant<_Bool, (true)>':'struct std::__1::integral_constant<_Bool, true>'
| |   | `-TemplateSpecializationType 'integral_constant<_Bool, (true)>' sugar integral_constant
| |   |   |-TemplateArgument type '_Bool'
| |   |   |-TemplateArgument expr
| |   |   | `-ParenExpr '_Bool'
| |   |   |   `-CXXBoolLiteralExpr '_Bool' true
| |   |   `-RecordType 'struct std::__1::integral_constant<_Bool, true>'
| |   |     `-ClassTemplateSpecialization 'integral_constant'
| |   |-TypedefDecl referenced false_type 'integral_constant<_Bool, (false)>':'struct std::__1::integral_constant<_Bool, false>'
| |   | `-TemplateSpecializationType 'integral_constant<_Bool, (false)>' sugar integral_constant
| |   |   |-TemplateArgument type '_Bool'
| |   |   |-TemplateArgument expr
| |   |   | `-ParenExpr '_Bool'
| |   |   |   `-CXXBoolLiteralExpr '_Bool' false
| |   |   `-RecordType 'struct std::__1::integral_constant<_Bool, false>'
| |   |     `-ClassTemplateSpecialization 'integral_constant'
| |   |-ClassTemplateDecl __lazy_and_impl
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0 _Last
| |   | |-TemplateTypeParmDecl class depth 0 index 1 ... _Preds
| |   | |-CXXRecordDecl struct __lazy_and_impl
| |   | `-ClassTemplateSpecialization '__lazy_and_impl'
| |   |-ClassTemplatePartialSpecializationDecl struct __lazy_and_impl definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 ... _Preds
| |   | `-CXXRecordDecl implicit struct __lazy_and_impl
| |   |-ClassTemplateSpecializationDecl struct __lazy_and_impl definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument pack
| |   | `-CXXRecordDecl implicit struct __lazy_and_impl
| |   |-ClassTemplatePartialSpecializationDecl struct __lazy_and_impl definition
| |   | |-public 'integral_constant<_Bool, _Pred::type::value>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Pred
| |   | `-CXXRecordDecl implicit struct __lazy_and_impl
| |   |-ClassTemplatePartialSpecializationDecl struct __lazy_and_impl definition
| |   | |-public '__lazy_and_impl<_Hp::type::value, _Tp...>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | `-TemplateArgument type 'type-parameter-0-1...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Tp
| |   | `-CXXRecordDecl implicit struct __lazy_and_impl
| |   |-ClassTemplateDecl __lazy_and
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _P1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Pr
| |   | `-CXXRecordDecl struct __lazy_and definition
| |   |   |-public '__lazy_and_impl<_P1::type::value, _Pr...>'
| |   |   `-CXXRecordDecl implicit struct __lazy_and
| |   |-ClassTemplateDecl __lazy_or_impl
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0 _List
| |   | |-TemplateTypeParmDecl class depth 0 index 1 ... _Preds
| |   | |-CXXRecordDecl struct __lazy_or_impl
| |   | `-ClassTemplateSpecialization '__lazy_or_impl'
| |   |-ClassTemplatePartialSpecializationDecl struct __lazy_or_impl definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 ... _Preds
| |   | `-CXXRecordDecl implicit struct __lazy_or_impl
| |   |-ClassTemplateSpecializationDecl struct __lazy_or_impl definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument pack
| |   | `-CXXRecordDecl implicit struct __lazy_or_impl
| |   |-ClassTemplatePartialSpecializationDecl struct __lazy_or_impl definition
| |   | |-public '__lazy_or_impl<_Hp::type::value, _Tp...>'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | `-TemplateArgument type 'type-parameter-0-1...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Tp
| |   | `-CXXRecordDecl implicit struct __lazy_or_impl
| |   |-ClassTemplateDecl __lazy_or
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _P1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Pr
| |   | `-CXXRecordDecl struct __lazy_or definition
| |   |   |-public '__lazy_or_impl<_P1::type::value, _Pr...>'
| |   |   `-CXXRecordDecl implicit struct __lazy_or
| |   |-ClassTemplateDecl __lazy_not
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Pred
| |   | `-CXXRecordDecl struct __lazy_not definition
| |   |   |-public 'integral_constant<_Bool, !_Pred::type::value>'
| |   |   `-CXXRecordDecl implicit struct __lazy_not
| |   |-ClassTemplateDecl __and_
| |   | |-TemplateTypeParmDecl class depth 0 index 0 ...
| |   | |-CXXRecordDecl struct __and_
| |   | `-ClassTemplateSpecialization '__and_'
| |   |-ClassTemplateSpecializationDecl struct __and_ definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument pack
| |   | `-CXXRecordDecl implicit struct __and_
| |   |-ClassTemplatePartialSpecializationDecl struct __and_ definition
| |   | |-public '_B0'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _B0
| |   | `-CXXRecordDecl implicit struct __and_
| |   |-ClassTemplatePartialSpecializationDecl struct __and_ definition
| |   | |-public 'conditional<_B0::value, _B1, _B0>::type'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | `-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _B0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _B1
| |   | `-CXXRecordDecl implicit struct __and_
| |   |-ClassTemplatePartialSpecializationDecl struct __and_ definition
| |   | |-public 'conditional<_B0::value, __and_<_B1, _B2, _Bn...>, _B0>::type'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | |-TemplateArgument type 'type-parameter-0-1'
| |   | | |-TemplateArgument type 'type-parameter-0-2'
| |   | | `-TemplateArgument type 'type-parameter-0-3...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _B0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _B1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _B2
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 ... _Bn
| |   | `-CXXRecordDecl implicit struct __and_
| |   |-ClassTemplateDecl __or_
| |   | |-TemplateTypeParmDecl class depth 0 index 0 ...
| |   | |-CXXRecordDecl struct __or_
| |   | `-ClassTemplateSpecialization '__or_'
| |   |-ClassTemplateSpecializationDecl struct __or_ definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument pack
| |   | `-CXXRecordDecl implicit struct __or_
| |   |-ClassTemplatePartialSpecializationDecl struct __or_ definition
| |   | |-public '_B0'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _B0
| |   | `-CXXRecordDecl implicit struct __or_
| |   |-ClassTemplatePartialSpecializationDecl struct __or_ definition
| |   | |-public 'conditional<_B0::value, _B0, _B1>::type'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | `-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _B0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _B1
| |   | `-CXXRecordDecl implicit struct __or_
| |   |-ClassTemplatePartialSpecializationDecl struct __or_ definition
| |   | |-public 'conditional<_B0::value, _B0, __or_<_B1, _B2, _Bn...> >::type'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | |-TemplateArgument type 'type-parameter-0-1'
| |   | | |-TemplateArgument type 'type-parameter-0-2'
| |   | | `-TemplateArgument type 'type-parameter-0-3...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _B0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _B1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _B2
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 ... _Bn
| |   | `-CXXRecordDecl implicit struct __or_
| |   |-ClassTemplateDecl __not_
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __not_ definition
| |   |   |-public 'conditional<_Tp::value, false_type, true_type>::type'
| |   |   `-CXXRecordDecl implicit struct __not_
| |   |-ClassTemplateDecl is_const
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_const definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:610:22, > implicit struct is_const
| |   |-ClassTemplatePartialSpecializationDecl struct is_const definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'const type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:611:22, > implicit struct is_const
| |   |-ClassTemplateDecl is_volatile
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_volatile definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:620:22, > implicit struct is_volatile
| |   |-ClassTemplatePartialSpecializationDecl struct is_volatile definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'volatile type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:621:22, > implicit struct is_volatile
| |   |-ClassTemplateDecl remove_const
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct remove_const definition
| |   | | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:630:22, > implicit struct remove_const
| |   | | `-TypedefDecl type '_Tp'
| |   | |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | |     `-TemplateTypeParm '_Tp'
| |   | `-ClassTemplateSpecializationDecl struct remove_const definition
| |   |   |-TemplateArgument type 'double'
| |   |   |-CXXRecordDecl prev 0x7fa333820538 implicit struct remove_const
| |   |   `-TypedefDecl referenced type 'double':'double'
| |   |     `-SubstTemplateTypeParmType 'double' sugar
| |   |       |-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Tp'
| |   |       `-BuiltinType 'double'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_const definition
| |   | |-TemplateArgument type 'const type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:631:22, > implicit struct remove_const
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-TypeAliasTemplateDecl remove_const_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl remove_const_t 'typename remove_const<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_const<_Tp>::type' dependent
| |   |-ClassTemplateDecl remove_volatile
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct remove_volatile definition
| |   | | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:638:22, > implicit struct remove_volatile
| |   | | `-TypedefDecl type '_Tp'
| |   | |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | |     `-TemplateTypeParm '_Tp'
| |   | `-ClassTemplateSpecializationDecl struct remove_volatile definition
| |   |   |-TemplateArgument type 'double'
| |   |   |-CXXRecordDecl prev 0x7fa333820940 implicit struct remove_volatile
| |   |   `-TypedefDecl referenced type 'double':'double'
| |   |     `-SubstTemplateTypeParmType 'double' sugar
| |   |       |-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Tp'
| |   |       `-BuiltinType 'double'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_volatile definition
| |   | |-TemplateArgument type 'volatile type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:639:22, > implicit struct remove_volatile
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-TypeAliasTemplateDecl remove_volatile_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl remove_volatile_t 'typename remove_volatile<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_volatile<_Tp>::type' dependent
| |   |-ClassTemplateDecl remove_cv
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct remove_cv definition
| |   | | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:646:22, > implicit struct remove_cv
| |   | | `-TypedefDecl type 'typename remove_volatile<typename remove_const<_Tp>::type>::type'
| |   | |   `-DependentNameType 'typename remove_volatile<typename remove_const<_Tp>::type>::type' dependent
| |   | `-ClassTemplateSpecializationDecl struct remove_cv definition
| |   |   |-TemplateArgument type 'double'
| |   |   |-CXXRecordDecl prev 0x7fa333820258 implicit struct remove_cv
| |   |   `-TypedefDecl referenced type 'typename remove_volatile<typename remove_const<double>::type>::type':'double'
| |   |     `-ElaboratedType 'typename remove_volatile<typename remove_const<double>::type>::type' sugar
| |   |       `-TypedefType 'std::__1::remove_volatile<double>::type' sugar
| |   |         |-Typedef 'type'
| |   |         `-SubstTemplateTypeParmType 'double' sugar
| |   |           |-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |           | `-TemplateTypeParm '_Tp'
| |   |           `-BuiltinType 'double'
| |   |-TypeAliasTemplateDecl remove_cv_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl remove_cv_t 'typename remove_cv<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_cv<_Tp>::type' dependent
| |   |-ClassTemplateDecl __libcpp_is_void
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct __libcpp_is_void definition
| |   | | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | | `-CXXRecordDecl implicit struct __libcpp_is_void
| |   | `-ClassTemplateSpecialization '__libcpp_is_void'
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_void definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'void'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_void
| |   |-ClassTemplateDecl is_void
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_void definition
| |   |   |-public '__libcpp_is_void<typename remove_cv<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:657:22, > implicit struct is_void
| |   |-ClassTemplateDecl __is_nullptr_t_impl
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct __is_nullptr_t_impl definition
| |   | | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | | `-CXXRecordDecl implicit struct __is_nullptr_t_impl
| |   | `-ClassTemplateSpecialization '__is_nullptr_t_impl'
| |   |-ClassTemplateSpecializationDecl struct __is_nullptr_t_impl definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'nullptr_t'
| |   | `-CXXRecordDecl implicit struct __is_nullptr_t_impl
| |   |-ClassTemplateDecl __is_nullptr_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __is_nullptr_t definition
| |   |   |-public '__is_nullptr_t_impl<typename remove_cv<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:670:22, > implicit struct __is_nullptr_t
| |   |-ClassTemplateDecl is_null_pointer
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_null_pointer definition
| |   |   |-public '__is_nullptr_t_impl<typename remove_cv<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:674:22, > implicit struct is_null_pointer
| |   |-ClassTemplateDecl __libcpp_is_integral
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct __libcpp_is_integral definition
| |   | | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | |-ClassTemplateSpecialization '__libcpp_is_integral'
| |   | `-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TemplateArgument type 'double'
| |   |   `-CXXRecordDecl prev 0x7fa333820e40 implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type '_Bool'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'char'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'signed char'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'unsigned char'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'wchar_t'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'char16_t'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'char32_t'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'short'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'unsigned short'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'int'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'unsigned int'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'long'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'unsigned long'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'long long'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'unsigned long long'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type '__int128'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_integral definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'unsigned __int128'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_integral
| |   |-ClassTemplateDecl is_integral
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct is_integral definition
| |   | | |-public '__libcpp_is_integral<typename remove_cv<_Tp>::type>'
| |   | | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:708:22, > implicit struct is_integral
| |   | `-ClassTemplateSpecializationDecl struct is_integral definition
| |   |   |-public '__libcpp_is_integral<typename remove_cv<double>::type>':'struct std::__1::__libcpp_is_integral<double>'
| |   |   |-TemplateArgument type 'double'
| |   |   `-CXXRecordDecl prev 0x7fa333820008 implicit struct is_integral
| |   |-ClassTemplateDecl __libcpp_is_floating_point
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct __libcpp_is_floating_point definition
| |   | | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | | `-CXXRecordDecl implicit struct __libcpp_is_floating_point
| |   | |-ClassTemplateSpecialization '__libcpp_is_floating_point'
| |   | |-ClassTemplateSpecialization '__libcpp_is_floating_point'
| |   | `-ClassTemplateSpecialization '__libcpp_is_floating_point'
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_floating_point definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'float'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_floating_point
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_floating_point definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'double'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_floating_point
| |   |-ClassTemplateSpecializationDecl struct __libcpp_is_floating_point definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'long double'
| |   | `-CXXRecordDecl implicit struct __libcpp_is_floating_point
| |   |-ClassTemplateDecl is_floating_point
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_floating_point definition
| |   |   |-public '__libcpp_is_floating_point<typename remove_cv<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:723:22, > implicit struct is_floating_point
| |   |-ClassTemplateDecl is_array
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_array definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:733:22, > implicit struct is_array
| |   |-ClassTemplatePartialSpecializationDecl struct is_array definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 []'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:735:22, > implicit struct is_array
| |   |-ClassTemplatePartialSpecializationDecl struct is_array definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Np
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:737:34, > implicit struct is_array
| |   |-ClassTemplateDecl __libcpp_is_pointer
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __libcpp_is_pointer definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_pointer
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_pointer definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 *'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_pointer
| |   |-ClassTemplateDecl is_pointer
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_pointer definition
| |   |   |-public '__libcpp_is_pointer<typename remove_cv<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:750:22, > implicit struct is_pointer
| |   |-ClassTemplateDecl is_lvalue_reference
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_lvalue_reference definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:760:22, > implicit struct is_lvalue_reference
| |   |-ClassTemplatePartialSpecializationDecl struct is_lvalue_reference definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:761:22, > implicit struct is_lvalue_reference
| |   |-ClassTemplateDecl is_rvalue_reference
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_rvalue_reference definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:763:22, > implicit struct is_rvalue_reference
| |   |-ClassTemplatePartialSpecializationDecl struct is_rvalue_reference definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:765:22, > implicit struct is_rvalue_reference
| |   |-ClassTemplateDecl is_reference
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_reference definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:768:22, > implicit struct is_reference
| |   |-ClassTemplatePartialSpecializationDecl struct is_reference definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:769:22, > implicit struct is_reference
| |   |-ClassTemplatePartialSpecializationDecl struct is_reference definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:771:22, > implicit struct is_reference
| |   |-ClassTemplateDecl is_union
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_union definition
| |   |   |-public 'integral_constant<_Bool, __is_union(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:788:22, > implicit struct is_union
| |   |-ClassTemplateDecl is_class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_class definition
| |   |   |-public 'integral_constant<_Bool, __is_class(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:808:22, > implicit struct is_class
| |   |-ClassTemplateDecl is_same
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Up
| |   | `-CXXRecordDecl struct is_same definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:831:33, > implicit struct is_same
| |   |-ClassTemplatePartialSpecializationDecl struct is_same definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:832:33, > implicit struct is_same
| |   |-NamespaceDecl __libcpp_is_function_imp
| |   | |-CXXRecordDecl referenced struct __dummy_type definition
| |   | | `-CXXRecordDecl implicit struct __dummy_type
| |   | |-FunctionTemplateDecl __test
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | | `-FunctionDecl __test 'char (_Tp *)'
| |   | |   `-ParmVarDecl '_Tp *'
| |   | |-FunctionTemplateDecl __test
| |   | | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | | `-FunctionDecl __test 'char (struct std::__1::__libcpp_is_function_imp::__dummy_type)'
| |   | |   `-ParmVarDecl 'struct std::__1::__libcpp_is_function_imp::__dummy_type'
| |   | |-FunctionTemplateDecl __test
| |   | | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | | `-FunctionDecl __test 'struct std::__1::__two (...)'
| |   | |-FunctionTemplateDecl __source
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | | `-FunctionDecl __source '_Tp &(int)'
| |   | |   `-ParmVarDecl 'int'
| |   | `-FunctionTemplateDecl __source
| |   |   |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   |   `-FunctionDecl __source 'struct std::__1::__libcpp_is_function_imp::__dummy_type (...)'
| |   |-ClassTemplateDecl __libcpp_is_function
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '||'
| |   | |     |-BinaryOperator '<dependent type>' '||'
| |   | |     | |-BinaryOperator '<dependent type>' '||'
| |   | |     | | |-BinaryOperator '<dependent type>' '||'
| |   | |     | | | |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     | | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __libcpp_is_function definition
| |   |   |-public 'integral_constant<_Bool, sizeof (__libcpp_is_function_imp::__test<_Tp>(__libcpp_is_function_imp::__source<_Tp>(0))) == 1>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_function
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_function definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_function
| |   |-ClassTemplateDecl is_function
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_function definition
| |   |   |-public '__libcpp_is_function<_Tp>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:861:22, > implicit struct is_function
| |   |-ClassTemplateDecl __member_pointer_traits_imp
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _MP
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1 _IsMemberFunctionPtr
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 2 _IsMemberObjectPtr
| |   | `-CXXRecordDecl struct __member_pointer_traits_imp definition
| |   |   `-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   |-ClassTemplateDecl __libcpp_is_member_function_pointer
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __libcpp_is_member_function_pointer definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_member_function_pointer
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_member_function_pointer definition
| |   | |-public 'is_function<_Ret>'
| |   | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Ret
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Class
| |   | `-CXXRecordDecl implicit struct __libcpp_is_member_function_pointer
| |   |-ClassTemplateDecl is_member_function_pointer
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_member_function_pointer definition
| |   |   |-public '__libcpp_is_member_function_pointer<typename remove_cv<_Tp>::type>::type'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:888:22, > implicit struct is_member_function_pointer
| |   |-ClassTemplateDecl __libcpp_is_member_pointer
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __libcpp_is_member_pointer definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_member_pointer
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_member_pointer definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Up
| |   | `-CXXRecordDecl implicit struct __libcpp_is_member_pointer
| |   |-ClassTemplateDecl is_member_pointer
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_member_pointer definition
| |   |   |-public '__libcpp_is_member_pointer<typename remove_cv<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:901:22, > implicit struct is_member_pointer
| |   |-ClassTemplateDecl is_member_object_pointer
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_member_object_pointer definition
| |   |   |-public 'integral_constant<_Bool, is_member_pointer<_Tp>::value && !is_member_function_pointer<_Tp>::value>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:911:22, > implicit struct is_member_object_pointer
| |   |-ClassTemplateDecl is_enum
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_enum definition
| |   |   |-public 'integral_constant<_Bool, __is_enum(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:924:22, > implicit struct is_enum
| |   |-ClassTemplateDecl is_arithmetic
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_arithmetic definition
| |   |   |-public 'integral_constant<_Bool, is_integral<_Tp>::value || is_floating_point<_Tp>::value>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:950:22, > implicit struct is_arithmetic
| |   |-ClassTemplateDecl is_fundamental
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_fundamental definition
| |   |   |-public 'integral_constant<_Bool, is_void<_Tp>::value || __is_nullptr_t<_Tp>::value || is_arithmetic<_Tp>::value>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:961:22, > implicit struct is_fundamental
| |   |-ClassTemplateDecl is_scalar
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct is_scalar definition
| |   | | |-public 'integral_constant<_Bool, is_arithmetic<_Tp>::value || is_member_pointer<_Tp>::value || is_pointer<_Tp>::value || __is_nullptr_t<_Tp>::value || is_enum<_Tp>::value>'
| |   | | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:973:22, > implicit struct is_scalar
| |   | `-ClassTemplateSpecialization 'is_scalar'
| |   |-ClassTemplateSpecializationDecl struct is_scalar definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'nullptr_t'
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:980:13, > implicit struct is_scalar
| |   |-ClassTemplateDecl is_object
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_object definition
| |   |   |-public 'integral_constant<_Bool, is_scalar<_Tp>::value || is_array<_Tp>::value || is_union<_Tp>::value || is_class<_Tp>::value>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:989:22, > implicit struct is_object
| |   |-ClassTemplateDecl is_compound
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_compound definition
| |   |   |-public 'integral_constant<_Bool, !is_fundamental<_Tp>::value>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1002:22, > implicit struct is_compound
| |   |-CXXRecordDecl struct __is_referenceable_impl definition
| |   | |-CXXRecordDecl implicit struct __is_referenceable_impl
| |   | |-FunctionTemplateDecl __test
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | | `-CXXMethodDecl __test '_Tp &(int)' static
| |   | |   `-ParmVarDecl 'int'
| |   | `-FunctionTemplateDecl __test
| |   |   |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   |   `-CXXMethodDecl __test 'struct std::__1::__two (...)' static
| |   |-ClassTemplateDecl __is_referenceable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __is_referenceable definition
| |   |   |-public 'integral_constant<_Bool, !is_same<decltype(struct __is_referenceable_impl::__test<_Tp>(0)), struct __two>::value>'
| |   |   `-CXXRecordDecl implicit struct __is_referenceable
| |   |-ClassTemplateDecl __add_const
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '||'
| |   | |     |-BinaryOperator '<dependent type>' '||'
| |   | |     | |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __add_const definition
| |   |   |-CXXRecordDecl implicit struct __add_const
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct __add_const definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __add_const
| |   | `-TypedefDecl type 'const _Tp'
| |   |   `-QualType 'const _Tp' const
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplateDecl add_const
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct add_const definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1033:22, > implicit struct add_const
| |   |   `-TypedefDecl type 'typename __add_const<_Tp>::type'
| |   |     `-DependentNameType 'typename __add_const<_Tp>::type' dependent
| |   |-TypeAliasTemplateDecl add_const_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl add_const_t 'typename add_const<_Tp>::type'
| |   |   `-DependentNameType 'typename add_const<_Tp>::type' dependent
| |   |-ClassTemplateDecl __add_volatile
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '||'
| |   | |     |-BinaryOperator '<dependent type>' '||'
| |   | |     | |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __add_volatile definition
| |   |   |-CXXRecordDecl implicit struct __add_volatile
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct __add_volatile definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __add_volatile
| |   | `-TypedefDecl type 'volatile _Tp'
| |   |   `-QualType 'volatile _Tp' volatile
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplateDecl add_volatile
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct add_volatile definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1050:22, > implicit struct add_volatile
| |   |   `-TypedefDecl type 'typename __add_volatile<_Tp>::type'
| |   |     `-DependentNameType 'typename __add_volatile<_Tp>::type' dependent
| |   |-TypeAliasTemplateDecl add_volatile_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl add_volatile_t 'typename add_volatile<_Tp>::type'
| |   |   `-DependentNameType 'typename add_volatile<_Tp>::type' dependent
| |   |-ClassTemplateDecl add_cv
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct add_cv definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1059:22, > implicit struct add_cv
| |   |   `-TypedefDecl type 'typename add_const<typename add_volatile<_Tp>::type>::type'
| |   |     `-DependentNameType 'typename add_const<typename add_volatile<_Tp>::type>::type' dependent
| |   |-TypeAliasTemplateDecl add_cv_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl add_cv_t 'typename add_cv<_Tp>::type'
| |   |   `-DependentNameType 'typename add_cv<_Tp>::type' dependent
| |   |-ClassTemplateDecl remove_reference
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct remove_reference definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1068:22, > implicit struct remove_reference
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_reference definition
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1069:22, > implicit struct remove_reference
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_reference definition
| |   | |-TemplateArgument type 'type-parameter-0-0 &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1071:22, > implicit struct remove_reference
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-TypeAliasTemplateDecl remove_reference_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl remove_reference_t 'typename remove_reference<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_reference<_Tp>::type' dependent
| |   |-ClassTemplateDecl __add_lvalue_reference_impl
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __add_lvalue_reference_impl definition
| |   |   |-CXXRecordDecl implicit struct __add_lvalue_reference_impl
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct __add_lvalue_reference_impl definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __add_lvalue_reference_impl
| |   | `-TypedefDecl type '_Tp &'
| |   |   `-LValueReferenceType '_Tp &' dependent
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplateDecl add_lvalue_reference
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct add_lvalue_reference definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1083:22, > implicit struct add_lvalue_reference
| |   |   `-TypedefDecl type 'typename __add_lvalue_reference_impl<_Tp>::type'
| |   |     `-DependentNameType 'typename __add_lvalue_reference_impl<_Tp>::type' dependent
| |   |-TypeAliasTemplateDecl add_lvalue_reference_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl add_lvalue_reference_t 'typename add_lvalue_reference<_Tp>::type'
| |   |   `-DependentNameType 'typename add_lvalue_reference<_Tp>::type' dependent
| |   |-ClassTemplateDecl __add_rvalue_reference_impl
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __add_rvalue_reference_impl definition
| |   |   |-CXXRecordDecl implicit struct __add_rvalue_reference_impl
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct __add_rvalue_reference_impl definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __add_rvalue_reference_impl
| |   | `-TypedefDecl type '_Tp &&'
| |   |   `-RValueReferenceType '_Tp &&' dependent
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplateDecl add_rvalue_reference
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct add_rvalue_reference definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1095:22, > implicit struct add_rvalue_reference
| |   |   `-TypedefDecl type 'typename __add_rvalue_reference_impl<_Tp>::type'
| |   |     `-DependentNameType 'typename __add_rvalue_reference_impl<_Tp>::type' dependent
| |   |-TypeAliasTemplateDecl add_rvalue_reference_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl add_rvalue_reference_t 'typename add_rvalue_reference<_Tp>::type'
| |   |   `-DependentNameType 'typename add_rvalue_reference<_Tp>::type' dependent
| |   |-FunctionTemplateDecl __declval
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl __declval '_Tp &&(int)'
| |   |   `-ParmVarDecl 'int'
| |   |-FunctionTemplateDecl __declval
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl __declval '_Tp (long)'
| |   |   `-ParmVarDecl 'long'
| |   |-FunctionTemplateDecl /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1111:1 declval
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1111:1 declval 'decltype(std::__1::__declval<_Tp>(0)) (void) noexcept'
| |   |-ClassTemplateDecl __uncvref
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __uncvref definition
| |   |   |-CXXRecordDecl implicit struct __uncvref
| |   |   `-TypedefDecl type 'typename remove_cv<typename remove_reference<_Tp>::type>::type'
| |   |     `-DependentNameType 'typename remove_cv<typename remove_reference<_Tp>::type>::type' dependent
| |   |-ClassTemplateDecl __unconstref
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __unconstref definition
| |   |   |-CXXRecordDecl implicit struct __unconstref
| |   |   `-TypedefDecl type 'typename remove_const<typename remove_reference<_Tp>::type>::type'
| |   |     `-DependentNameType 'typename remove_const<typename remove_reference<_Tp>::type>::type' dependent
| |   |-TypeAliasTemplateDecl __uncvref_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl __uncvref_t 'typename __uncvref<_Tp>::type'
| |   |   `-DependentNameType 'typename __uncvref<_Tp>::type' dependent
| |   |-ClassTemplateDecl __is_same_uncvref
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | `-CXXRecordDecl struct __is_same_uncvref definition
| |   |   |-public 'is_same<typename __uncvref<_Tp>::type, typename __uncvref<_Up>::type>'
| |   |   `-CXXRecordDecl implicit struct __is_same_uncvref
| |   |-CXXRecordDecl referenced struct __any definition
| |   | |-CXXRecordDecl implicit referenced struct __any
| |   | `-CXXConstructorDecl __any 'void (...)'
| |   |-ClassTemplateDecl remove_pointer
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct remove_pointer definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1151:22, > implicit struct remove_pointer
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_pointer definition
| |   | |-TemplateArgument type 'type-parameter-0-0 *'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1152:22, > implicit struct remove_pointer
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_pointer definition
| |   | |-TemplateArgument type 'type-parameter-0-0 *const'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1153:22, > implicit struct remove_pointer
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_pointer definition
| |   | |-TemplateArgument type 'type-parameter-0-0 *volatile'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1154:22, > implicit struct remove_pointer
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_pointer definition
| |   | |-TemplateArgument type 'type-parameter-0-0 *const volatile'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1155:22, > implicit struct remove_pointer
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-TypeAliasTemplateDecl remove_pointer_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl remove_pointer_t 'typename remove_pointer<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_pointer<_Tp>::type' dependent
| |   |-ClassTemplateDecl __add_pointer_impl
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '||'
| |   | |     |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __add_pointer_impl definition
| |   |   |-CXXRecordDecl implicit struct __add_pointer_impl
| |   |   `-TypedefDecl type 'typename remove_reference<_Tp>::type *'
| |   |     `-PointerType 'typename remove_reference<_Tp>::type *' dependent
| |   |       `-DependentNameType 'typename remove_reference<_Tp>::type' dependent
| |   |-ClassTemplatePartialSpecializationDecl struct __add_pointer_impl definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __add_pointer_impl
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-ClassTemplateDecl add_pointer
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct add_pointer definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1171:22, > implicit struct add_pointer
| |   |   `-TypedefDecl type 'typename __add_pointer_impl<_Tp>::type'
| |   |     `-DependentNameType 'typename __add_pointer_impl<_Tp>::type' dependent
| |   |-TypeAliasTemplateDecl add_pointer_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl add_pointer_t 'typename add_pointer<_Tp>::type'
| |   |   `-DependentNameType 'typename add_pointer<_Tp>::type' dependent
| |   |-ClassTemplateDecl __libcpp_is_signed_impl
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __libcpp_is_signed_impl definition
| |   |   |-public 'integral_constant<_Bool, (_Tp(-1) < _Tp(0))>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_signed_impl
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_signed_impl definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_signed_impl
| |   |-ClassTemplateDecl __libcpp_is_signed
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __libcpp_is_signed definition
| |   |   |-public '__libcpp_is_signed_impl<_Tp>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_signed
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_signed definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_signed
| |   |-ClassTemplateDecl is_signed
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_signed definition
| |   |   |-public '__libcpp_is_signed<_Tp>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1191:22, > implicit struct is_signed
| |   |-ClassTemplateDecl __libcpp_is_unsigned_impl
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __libcpp_is_unsigned_impl definition
| |   |   |-public 'integral_constant<_Bool, (_Tp(0) < _Tp(-1))>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_unsigned_impl
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_unsigned_impl definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_unsigned_impl
| |   |-ClassTemplateDecl __libcpp_is_unsigned
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __libcpp_is_unsigned definition
| |   |   |-public '__libcpp_is_unsigned_impl<_Tp>'
| |   |   `-CXXRecordDecl implicit struct __libcpp_is_unsigned
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_unsigned definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_unsigned
| |   |-ClassTemplateDecl is_unsigned
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_unsigned definition
| |   |   |-public '__libcpp_is_unsigned<_Tp>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1211:22, > implicit struct is_unsigned
| |   |-ClassTemplateDecl rank
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct rank definition
| |   |   |-public 'integral_constant<size_t, 0>':'struct std::__1::integral_constant<unsigned long, 0>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1220:22, > implicit struct rank
| |   |-ClassTemplatePartialSpecializationDecl struct rank definition
| |   | |-public 'integral_constant<size_t, rank<_Tp>::value + 1>'
| |   | |-TemplateArgument type 'type-parameter-0-0 []'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1222:22, > implicit struct rank
| |   |-ClassTemplatePartialSpecializationDecl struct rank definition
| |   | |-public 'integral_constant<size_t, rank<_Tp>::value + 1>'
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Np
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1224:34, > implicit struct rank
| |   |-ClassTemplateDecl extent
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl 'unsigned int' depth 0 index 1 _Ip
| |   | | `-TemplateArgument expr
| |   | |   `-ImplicitCastExpr 'unsigned int' <IntegralCast>
| |   | |     `-IntegerLiteral 'int' 0
| |   | `-CXXRecordDecl struct extent definition
| |   |   |-public 'integral_constant<size_t, 0>':'struct std::__1::integral_constant<unsigned long, 0>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1234:40, > implicit struct extent
| |   |-ClassTemplatePartialSpecializationDecl struct extent definition
| |   | |-public 'integral_constant<size_t, 0>':'struct std::__1::integral_constant<unsigned long, 0>'
| |   | |-TemplateArgument type 'type-parameter-0-0 []'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1236:22, > implicit struct extent
| |   |-ClassTemplatePartialSpecializationDecl struct extent definition
| |   | |-public 'integral_constant<size_t, extent<_Tp, _Ip - 1>::value>'
| |   | |-TemplateArgument type 'type-parameter-0-0 []'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'unsigned int' NonTypeTemplateParm 0x7fa333167970 '_Ip' 'unsigned int'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'unsigned int' depth 0 index 1 _Ip
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1238:36, > implicit struct extent
| |   |-ClassTemplatePartialSpecializationDecl struct extent definition
| |   | |-public 'integral_constant<size_t, _Np>'
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Np
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1240:34, > implicit struct extent
| |   |-ClassTemplatePartialSpecializationDecl struct extent definition
| |   | |-public 'integral_constant<size_t, extent<_Tp, _Ip - 1>::value>'
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'unsigned int' NonTypeTemplateParm 0x7fa333168c58 '_Ip' 'unsigned int'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Np
| |   | |-NonTypeTemplateParmDecl referenced 'unsigned int' depth 0 index 2 _Ip
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1242:48, > implicit struct extent
| |   |-ClassTemplateDecl remove_extent
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct remove_extent definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1252:22, > implicit struct remove_extent
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_extent definition
| |   | |-TemplateArgument type 'type-parameter-0-0 []'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1254:22, > implicit struct remove_extent
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_extent definition
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Np
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1256:34, > implicit struct remove_extent
| |   | `-TypedefDecl type '_Tp'
| |   |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Tp'
| |   |-TypeAliasTemplateDecl remove_extent_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl remove_extent_t 'typename remove_extent<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_extent<_Tp>::type' dependent
| |   |-ClassTemplateDecl remove_all_extents
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct remove_all_extents definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1265:22, > implicit struct remove_all_extents
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |       `-TemplateTypeParm '_Tp'
| |   |-ClassTemplatePartialSpecializationDecl struct remove_all_extents definition
| |   | |-TemplateArgument type 'type-parameter-0-0 []'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1267:22, > implicit struct remove_all_extents
| |   | `-TypedefDecl type 'typename remove_all_extents<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_all_extents<_Tp>::type' dependent
| |   |-ClassTemplatePartialSpecializationDecl struct remove_all_extents definition
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Np
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1269:34, > implicit struct remove_all_extents
| |   | `-TypedefDecl type 'typename remove_all_extents<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_all_extents<_Tp>::type' dependent
| |   |-TypeAliasTemplateDecl remove_all_extents_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl remove_all_extents_t 'typename remove_all_extents<_Tp>::type'
| |   |   `-DependentNameType 'typename remove_all_extents<_Tp>::type' dependent
| |   |-ClassTemplateDecl __decay
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Up
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | `-CXXRecordDecl struct __decay definition
| |   |   |-CXXRecordDecl implicit struct __decay
| |   |   `-TypedefDecl type 'typename remove_cv<_Up>::type'
| |   |     `-DependentNameType 'typename remove_cv<_Up>::type' dependent
| |   |-ClassTemplatePartialSpecializationDecl struct __decay definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Up
| |   | |-CXXRecordDecl implicit struct __decay
| |   | |-AccessSpecDecl public
| |   | `-TypedefDecl type 'typename conditional<is_array<_Up>::value, typename remove_extent<_Up>::type *, typename conditional<is_function<_Up>::value, typename add_pointer<_Up>::type, typename remove_cv<_Up>::type>::type>::type'
| |   |   `-DependentNameType 'typename conditional<is_array<_Up>::value, typename remove_extent<_Up>::type *, typename conditional<is_function<_Up>::value, typename add_pointer<_Up>::type, typename remove_cv<_Up>::type>::type>::type' dependent
| |   |-ClassTemplateDecl decay
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct decay definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1300:1, > implicit struct decay
| |   |   |-AccessSpecDecl private
| |   |   |-TypedefDecl referenced _Up 'typename remove_reference<_Tp>::type'
| |   |   | `-DependentNameType 'typename remove_reference<_Tp>::type' dependent
| |   |   |-AccessSpecDecl public
| |   |   `-TypedefDecl type 'typename __decay<_Up, __is_referenceable<_Up>::value>::type'
| |   |     `-DependentNameType 'typename __decay<_Up, __is_referenceable<_Up>::value>::type' dependent
| |   |-TypeAliasTemplateDecl decay_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl decay_t 'typename decay<_Tp>::type'
| |   |   `-DependentNameType 'typename decay<_Tp>::type' dependent
| |   |-ClassTemplateDecl is_abstract
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_abstract definition
| |   |   |-public 'integral_constant<_Bool, __is_abstract(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1314:22, > implicit struct is_abstract
| |   |-ClassTemplateDecl __libcpp_is_final
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __libcpp_is_final definition
| |   |   |-public 'integral_constant<_Bool, __is_final(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1325:22, > implicit struct __libcpp_is_final
| |   |-ClassTemplateDecl is_final
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_final definition
| |   |   |-public 'integral_constant<_Bool, __is_final(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1333:22, > implicit struct is_final
| |   |-ClassTemplateDecl is_base_of
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Bp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Dp
| |   | `-CXXRecordDecl struct is_base_of definition
| |   |   |-public 'integral_constant<_Bool, __is_base_of(_Bp, _Dp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1360:1, > implicit struct is_base_of
| |   |-ClassTemplateDecl is_convertible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _T1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _T2
| |   | `-CXXRecordDecl struct is_convertible definition
| |   |   |-public 'integral_constant<_Bool, __is_convertible_to(_T1, _T2) && !is_abstract<_T2>::value>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1399:33, > implicit struct is_convertible
| |   |-ClassTemplateDecl is_empty
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_empty definition
| |   |   |-public 'integral_constant<_Bool, __is_empty(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1490:1, > implicit struct is_empty
| |   |-ClassTemplateDecl is_polymorphic
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_polymorphic definition
| |   |   |-public 'integral_constant<_Bool, __is_polymorphic(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1526:1, > implicit struct is_polymorphic
| |   |-ClassTemplateDecl has_virtual_destructor
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct has_virtual_destructor definition
| |   |   |-public 'integral_constant<_Bool, __has_virtual_destructor(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1550:22, > implicit struct has_virtual_destructor
| |   |-ClassTemplateDecl alignment_of
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct alignment_of definition
| |   |   |-public 'integral_constant<size_t, __alignof(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1567:22, > implicit struct alignment_of
| |   |-ClassTemplateDecl __type_list
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Tp
| |   | |-CXXRecordDecl struct __type_list definition
| |   | | |-CXXRecordDecl implicit struct __type_list
| |   | | |-TypedefDecl _Head '_Hp'
| |   | | | `-TemplateTypeParmType '_Hp' dependent depth 0 index 0
| |   | | |   `-TemplateTypeParm '_Hp'
| |   | | `-TypedefDecl _Tail '_Tp'
| |   | |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Tp'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<int *>'
| |   | | `-TemplateArgument type 'struct std::__1::__nat'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<struct std::__1::__struct_double4>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat>'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<struct std::__1::__struct_double>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<long double>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<double>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<unsigned long long>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<unsigned long>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<unsigned long long>, struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<unsigned int>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<unsigned long>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long long>, struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > > > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<unsigned short>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<unsigned int>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long long>, struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > > > > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'struct std::__1::__align_type<unsigned char>'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<struct std::__1::__align_type<unsigned short>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned int>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long long>, struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > > > > > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type '__int128'
| |   | | `-TemplateArgument type 'struct std::__1::__nat'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'long long'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<__int128, struct std::__1::__nat>'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'long'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'int'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'short'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list definition
| |   | | |-TemplateArgument type 'signed char'
| |   | | |-TemplateArgument type 'struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > >'
| |   | | |-CXXRecordDecl prev 0x7fa332862540 implicit struct __type_list
| |   | | |-TypedefDecl referenced _Head 'signed char':'signed char'
| |   | | | `-SubstTemplateTypeParmType 'signed char' sugar
| |   | | |   |-TemplateTypeParmType '_Hp' dependent depth 0 index 0
| |   | | |   | `-TemplateTypeParm '_Hp'
| |   | | |   `-BuiltinType 'signed char'
| |   | | `-TypedefDecl _Tail 'struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > >':'struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > >'
| |   | |   `-SubstTemplateTypeParmType 'struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > >' sugar
| |   | |     |-TemplateTypeParmType '_Tp' dependent depth 0 index 1
| |   | |     | `-TemplateTypeParm '_Tp'
| |   | |     `-RecordType 'struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > >'
| |   | |       `-ClassTemplateSpecialization '__type_list'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'unsigned __int128'
| |   | | `-TemplateArgument type 'struct std::__1::__nat'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'unsigned long long'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat>'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'unsigned long'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'unsigned int'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > >'
| |   | |-ClassTemplateSpecializationDecl struct __type_list
| |   | | |-TemplateArgument type 'unsigned short'
| |   | | `-TemplateArgument type 'struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > >'
| |   | `-ClassTemplateSpecializationDecl struct __type_list definition
| |   |   |-TemplateArgument type 'unsigned char'
| |   |   |-TemplateArgument type 'struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > >'
| |   |   |-CXXRecordDecl prev 0x7fa3328632a0 implicit struct __type_list
| |   |   |-TypedefDecl referenced _Head 'unsigned char':'unsigned char'
| |   |   | `-SubstTemplateTypeParmType 'unsigned char' sugar
| |   |   |   |-TemplateTypeParmType '_Hp' dependent depth 0 index 0
| |   |   |   | `-TemplateTypeParm '_Hp'
| |   |   |   `-BuiltinType 'unsigned char'
| |   |   `-TypedefDecl _Tail 'struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > >':'struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > >'
| |   |     `-SubstTemplateTypeParmType 'struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > >' sugar
| |   |       |-TemplateTypeParmType '_Tp' dependent depth 0 index 1
| |   |       | `-TemplateTypeParm '_Tp'
| |   |       `-RecordType 'struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > >'
| |   |         `-ClassTemplateSpecialization '__type_list'
| |   |-CXXRecordDecl referenced struct __nat definition
| |   | |-CXXRecordDecl implicit referenced struct __nat
| |   | |-CXXConstructorDecl __nat 'void (void)' delete trivial
| |   | |-CXXConstructorDecl __nat 'void (const struct std::__1::__nat &)' delete trivial
| |   | | `-ParmVarDecl 'const struct std::__1::__nat &'
| |   | |-CXXMethodDecl operator= 'struct std::__1::__nat &(const struct std::__1::__nat &)' delete trivial
| |   | | `-ParmVarDecl 'const struct std::__1::__nat &'
| |   | `-CXXDestructorDecl ~__nat 'void (void)' delete trivial noexcept-unevaluated 0x7fa33283ece0
| |   |-ClassTemplateDecl __align_type
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct __align_type definition
| |   | | |-CXXRecordDecl implicit struct __align_type
| |   | | |-VarDecl value 'const size_t':'const unsigned long' static cinit
| |   | | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | `-TypedefDecl type '_Tp'
| |   | |   `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | |     `-TemplateTypeParm '_Tp'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'unsigned char'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'unsigned short'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'unsigned int'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'unsigned long'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'unsigned long long'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'double'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'long double'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'struct std::__1::__struct_double'
| |   | |-ClassTemplateSpecializationDecl struct __align_type
| |   | | `-TemplateArgument type 'struct std::__1::__struct_double4'
| |   | `-ClassTemplateSpecializationDecl struct __align_type
| |   |   `-TemplateArgument type 'int *'
| |   |-CXXRecordDecl referenced struct __struct_double definition
| |   | |-CXXRecordDecl implicit struct __struct_double
| |   | `-FieldDecl __lx 'long double'
| |   |-CXXRecordDecl referenced struct __struct_double4 definition
| |   | |-CXXRecordDecl implicit struct __struct_double4
| |   | `-FieldDecl __lx 'double [4]'
| |   |-TypedefDecl referenced __all_types '__type_list<__align_type<unsigned char>, __type_list<__align_type<unsigned short>, __type_list<__align_type<unsigned int>, __type_list<__align_type<unsigned long>, __type_list<__align_type<unsigned long long>, __type_list<__align_type<double>, __type_list<__align_type<long double>, __type_list<__align_type<struct std::__1::__struct_double>, __type_list<__align_type<struct std::__1::__struct_double4>, __type_list<__align_type<int *>, struct std::__1::__nat> > > > > > > > > >':'struct std::__1::__type_list<struct std::__1::__align_type<unsigned char>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned short>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned int>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long long>, struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > > > > > > >'
| |   | `-TemplateSpecializationType '__type_list<__align_type<unsigned char>, __type_list<__align_type<unsigned short>, __type_list<__align_type<unsigned int>, __type_list<__align_type<unsigned long>, __type_list<__align_type<unsigned long long>, __type_list<__align_type<double>, __type_list<__align_type<long double>, __type_list<__align_type<struct std::__1::__struct_double>, __type_list<__align_type<struct std::__1::__struct_double4>, __type_list<__align_type<int *>, struct std::__1::__nat> > > > > > > > > >' sugar __type_list
| |   |   |-TemplateArgument type '__align_type<unsigned char>':'struct std::__1::__align_type<unsigned char>'
| |   |   |-TemplateArgument type '__type_list<__align_type<unsigned short>, __type_list<__align_type<unsigned int>, __type_list<__align_type<unsigned long>, __type_list<__align_type<unsigned long long>, __type_list<__align_type<double>, __type_list<__align_type<long double>, __type_list<__align_type<struct std::__1::__struct_double>, __type_list<__align_type<struct std::__1::__struct_double4>, __type_list<__align_type<int *>, struct std::__1::__nat> > > > > > > > >':'struct std::__1::__type_list<struct std::__1::__align_type<unsigned short>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned int>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long long>, struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > > > > > >'
| |   |   `-RecordType 'struct std::__1::__type_list<struct std::__1::__align_type<unsigned char>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned short>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned int>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long>, struct std::__1::__type_list<struct std::__1::__align_type<unsigned long long>, struct std::__1::__type_list<struct std::__1::__align_type<double>, struct std::__1::__type_list<struct std::__1::__align_type<long double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double>, struct std::__1::__type_list<struct std::__1::__align_type<struct std::__1::__struct_double4>, struct std::__1::__type_list<struct std::__1::__align_type<int *>, struct std::__1::__nat> > > > > > > > > >'
| |   |     `-ClassTemplateSpecialization '__type_list'
| |   |-ClassTemplateDecl __find_pod
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _TL
| |   | |-NonTypeTemplateParmDecl 'size_t':'unsigned long' depth 0 index 1 _Align
| |   | `-CXXRecordDecl struct __find_pod
| |   |-ClassTemplatePartialSpecializationDecl struct __find_pod definition
| |   | |-TemplateArgument type '__type_list<type-parameter-0-0, struct std::__1::__nat>'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332843d68 '_Align' 'size_t':'unsigned long'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Align
| |   | |-CXXRecordDecl implicit struct __find_pod
| |   | `-TypedefDecl type 'typename conditional<_Align == _Hp::value, typename _Hp::type, void>::type'
| |   |   `-DependentNameType 'typename conditional<_Align == _Hp::value, typename _Hp::type, void>::type' dependent
| |   |-ClassTemplatePartialSpecializationDecl struct __find_pod definition
| |   | |-TemplateArgument type '__type_list<type-parameter-0-0, type-parameter-0-1>'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332844928 '_Align' 'size_t':'unsigned long'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 2 _Align
| |   | |-CXXRecordDecl implicit struct __find_pod
| |   | `-TypedefDecl type 'typename conditional<_Align == _Hp::value, typename _Hp::type, typename __find_pod<_Tp, _Align>::type>::type'
| |   |   `-DependentNameType 'typename conditional<_Align == _Hp::value, typename _Hp::type, typename __find_pod<_Tp, _Align>::type>::type' dependent
| |   |-ClassTemplateDecl __find_max_align
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _TL
| |   | |-NonTypeTemplateParmDecl 'size_t':'unsigned long' depth 0 index 1 _Len
| |   | `-CXXRecordDecl struct __find_max_align
| |   |-ClassTemplatePartialSpecializationDecl struct __find_max_align definition
| |   | |-public 'integral_constant<size_t, _Hp::value>'
| |   | |-TemplateArgument type '__type_list<type-parameter-0-0, struct std::__1::__nat>'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332845a78 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Len
| |   | `-CXXRecordDecl implicit struct __find_max_align
| |   |-ClassTemplateDecl __select_align
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _A1
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 2 _A2
| |   | `-CXXRecordDecl struct __select_align definition
| |   |   |-CXXRecordDecl implicit struct __select_align
| |   |   |-AccessSpecDecl private
| |   |   |-VarDecl referenced __min 'const size_t':'const unsigned long' static cinit
| |   |   | `-ConditionalOperator 'size_t':'unsigned long'
| |   |   |   |-BinaryOperator '_Bool' '<'
| |   |   |   | |-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa3328463e0 '_A2' 'size_t':'unsigned long'
| |   |   |   | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332846378 '_A1' 'size_t':'unsigned long'
| |   |   |   |-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa3328463e0 '_A2' 'size_t':'unsigned long'
| |   |   |   `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332846378 '_A1' 'size_t':'unsigned long'
| |   |   |-VarDecl referenced __max 'const size_t':'const unsigned long' static cinit
| |   |   | `-ConditionalOperator 'size_t':'unsigned long'
| |   |   |   |-BinaryOperator '_Bool' '<'
| |   |   |   | |-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332846378 '_A1' 'size_t':'unsigned long'
| |   |   |   | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa3328463e0 '_A2' 'size_t':'unsigned long'
| |   |   |   |-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa3328463e0 '_A2' 'size_t':'unsigned long'
| |   |   |   `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332846378 '_A1' 'size_t':'unsigned long'
| |   |   |-AccessSpecDecl public
| |   |   `-VarDecl value 'const size_t':'const unsigned long' static cinit
| |   |     `-ImplicitCastExpr 'size_t':'unsigned long' <LValueToRValue>
| |   |       `-ConditionalOperator 'const size_t':'const unsigned long' lvalue
| |   |         |-BinaryOperator '_Bool' '<'
| |   |         | |-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332846310 '_Len' 'size_t':'unsigned long'
| |   |         | `-ImplicitCastExpr 'size_t':'unsigned long' <LValueToRValue>
| |   |         |   `-DeclRefExpr 'const size_t':'const unsigned long' lvalue Var 0x7fa332846a88 '__max' 'const size_t':'const unsigned long'
| |   |         |-DeclRefExpr 'const size_t':'const unsigned long' lvalue Var 0x7fa332846920 '__min' 'const size_t':'const unsigned long'
| |   |         `-DeclRefExpr 'const size_t':'const unsigned long' lvalue Var 0x7fa332846a88 '__max' 'const size_t':'const unsigned long'
| |   |-ClassTemplatePartialSpecializationDecl struct __find_max_align definition
| |   | |-public 'integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value>'
| |   | |-TemplateArgument type '__type_list<type-parameter-0-0, type-parameter-0-1>'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa3328472c8 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 2 _Len
| |   | `-CXXRecordDecl implicit struct __find_max_align
| |   |-ClassTemplateDecl aligned_storage
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Align
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct aligned_storage definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1660:1, > implicit struct aligned_storage
| |   |   |-TypedefDecl referenced _Aligner 'typename __find_pod<__all_types, _Align>::type'
| |   |   | `-DependentNameType 'typename __find_pod<__all_types, _Align>::type' dependent
| |   |   |-StaticAssertDecl
| |   |   | |-UnaryOperator '<dependent type>' prefix '!'
| |   |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | `-StringLiteral 'const char [1]' lvalue ""
| |   |   `-CXXRecordDecl union type definition
| |   |     |-CXXRecordDecl implicit union type
| |   |     |-FieldDecl __align 'std::__1::aligned_storage::_Aligner':'typename __find_pod<__all_types, _Align>::type'
| |   |     `-FieldDecl __data 'unsigned char [(_Len + _Align - 1) / _Align * _Align]'
| |   |-TypeAliasTemplateDecl aligned_storage_t
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Align
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-TypeAliasDecl aligned_storage_t 'typename aligned_storage<_Len, _Align>::type'
| |   |   `-DependentNameType 'typename aligned_storage<_Len, _Align>::type' dependent
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332849990 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 1
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1686:40> 'int' 1
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 1 - 1) / 1 * 1]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa33284b830 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 2
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1687:40> 'int' 2
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 2 - 1) / 2 * 2]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa33284c2c0 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 4
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1688:40> 'int' 4
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 4 - 1) / 4 * 4]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa33284cd90 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 8
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1689:40> 'int' 8
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 8 - 1) / 8 * 8]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa33284d830 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 16
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1690:40> 'int' 16
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 16 - 1) / 16 * 16]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa33284e2c0 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 32
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1691:40> 'int' 32
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 32 - 1) / 32 * 32]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa33284ed50 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 64
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1692:40> 'int' 64
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 64 - 1) / 64 * 64]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa33284f800 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 128
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1693:40> 'int' 128
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 128 - 1) / 128 * 128]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332850290 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 256
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1694:40> 'int' 256
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 256 - 1) / 256 * 256]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332850d20 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 512
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1695:40> 'int' 512
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 512 - 1) / 512 * 512]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332851800 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 1024
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1696:40> 'int' 1024
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 1024 - 1) / 1024 * 1024]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332852290 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 2048
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1697:40> 'int' 2048
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 2048 - 1) / 2048 * 2048]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332852d20 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 4096
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1698:40> 'int' 4096
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 4096 - 1) / 4096 * 4096]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332853800 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 8192
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1699:40> 'int' 8192
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 8192 - 1) / 8192 * 8192]'
| |   |-ClassTemplatePartialSpecializationDecl struct aligned_storage definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332854290 '_Len' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 16384
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1677:23, > implicit struct aligned_storage
| |   | `-CXXRecordDecl struct type definition
| |   |   |-AlignedAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:313:23> alignas
| |   |   | `-IntegerLiteral </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1702:40> 'int' 16384
| |   |   |-CXXRecordDecl implicit struct type
| |   |   `-FieldDecl __lx 'unsigned char [(_Len + 16384 - 1) / 16384 * 16384]'
| |   |-ClassTemplateDecl __static_max
| |   | |-NonTypeTemplateParmDecl 'size_t':'unsigned long' depth 0 index 0 _I0
| |   | |-NonTypeTemplateParmDecl 'size_t':'unsigned long' depth 0 index 1 ... _In
| |   | `-CXXRecordDecl struct __static_max
| |   |-ClassTemplatePartialSpecializationDecl struct __static_max definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332855178 '_I0' 'size_t':'unsigned long'
| |   | |-TemplateArgument pack
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _I0
| |   | |-CXXRecordDecl implicit struct __static_max
| |   | `-VarDecl value 'const size_t':'const unsigned long' static cinit
| |   |   `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332855178 '_I0' 'size_t':'unsigned long'
| |   |-ClassTemplatePartialSpecializationDecl struct __static_max definition
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332855700 '_I0' 'size_t':'unsigned long'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument expr
| |   | | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332855768 '_I1' 'size_t':'unsigned long'
| |   | | `-TemplateArgument expr
| |   | |   `-PackExpansionExpr '<dependent type>'
| |   | |     `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332855800 '_In' 'size_t':'unsigned long'
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _I0
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _I1
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 2 ... _In
| |   | |-CXXRecordDecl implicit struct __static_max
| |   | `-VarDecl value 'const size_t':'const unsigned long' static cinit
| |   |   `-ConditionalOperator '<dependent type>'
| |   |     |-BinaryOperator '_Bool' '>='
| |   |     | |-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332855700 '_I0' 'size_t':'unsigned long'
| |   |     | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332855768 '_I1' 'size_t':'unsigned long'
| |   |     |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-ClassTemplateDecl aligned_union
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Type0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Types
| |   | `-CXXRecordDecl struct aligned_union definition
| |   |   |-CXXRecordDecl implicit struct aligned_union
| |   |   |-VarDecl referenced alignment_value 'const size_t':'const unsigned long' static cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl referenced __len 'const size_t':'const unsigned long' static cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   `-TypedefDecl type 'typename aligned_storage<__len, alignment_value>::type'
| |   |     `-DependentNameType 'typename aligned_storage<__len, alignment_value>::type' dependent
| |   |-TypeAliasTemplateDecl aligned_union_t
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 0 _Len
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Types
| |   | `-TypeAliasDecl aligned_union_t 'typename aligned_union<_Len, _Types...>::type'
| |   |   `-DependentNameType 'typename aligned_union<_Len, _Types...>::type' dependent
| |   |-ClassTemplateDecl __numeric_type
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct __numeric_type definition
| |   | | |-CXXRecordDecl implicit struct __numeric_type
| |   | | |-CXXMethodDecl __test 'void (...)' static
| |   | | |-CXXMethodDecl __test 'float (float)' static
| |   | | | `-ParmVarDecl 'float'
| |   | | |-CXXMethodDecl __test 'double (char)' static
| |   | | | `-ParmVarDecl 'char'
| |   | | |-CXXMethodDecl __test 'double (int)' static
| |   | | | `-ParmVarDecl 'int'
| |   | | |-CXXMethodDecl __test 'double (unsigned int)' static
| |   | | | `-ParmVarDecl 'unsigned int'
| |   | | |-CXXMethodDecl __test 'double (long)' static
| |   | | | `-ParmVarDecl 'long'
| |   | | |-CXXMethodDecl __test 'double (unsigned long)' static
| |   | | | `-ParmVarDecl 'unsigned long'
| |   | | |-CXXMethodDecl __test 'double (long long)' static
| |   | | | `-ParmVarDecl 'long long'
| |   | | |-CXXMethodDecl __test 'double (unsigned long long)' static
| |   | | | `-ParmVarDecl 'unsigned long long'
| |   | | |-CXXMethodDecl __test 'double (double)' static
| |   | | | `-ParmVarDecl 'double'
| |   | | |-CXXMethodDecl __test 'long double (long double)' static
| |   | | | `-ParmVarDecl 'long double'
| |   | | |-TypedefDecl referenced type 'decltype(__test(declval<_Tp>()))'
| |   | | | `-DecltypeType 'decltype(__test(declval<_Tp>()))' dependent
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     |-UnresolvedLookupExpr '<dependent type>' lvalue (no ADL) = '__test' 0x7fa332859848 0x7fa332859700 0x7fa3328595b8 0x7fa332859438 0x7fa3328592b8 0x7fa332859138 0x7fa332858fb8 0x7fa332858e38 0x7fa332858cb8 0x7fa332858b38 0x7fa3328589f8
| |   | | |     `-CallExpr '<dependent type>'
| |   | | |       `-UnresolvedLookupExpr '<dependent type>' lvalue (ADL) = 'declval' 0x7fa333159250
| |   | | `-VarDecl value 'const _Bool' static cinit
| |   | |   `-UnaryOperator '<dependent type>' prefix '!'
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-ClassTemplateSpecialization '__numeric_type'
| |   |-ClassTemplateSpecializationDecl struct __numeric_type definition
| |   | |-TemplateArgument type 'void'
| |   | |-CXXRecordDecl implicit struct __numeric_type
| |   | `-VarDecl referenced value 'const _Bool' static cinit
| |   |   `-CXXBoolLiteralExpr '_Bool' true
| |   |-ClassTemplateDecl __promote_imp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| |   | | `-TemplateArgument type 'void'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _A3
| |   | | `-TemplateArgument type 'void'
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 3
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '&&'
| |   | |     |-BinaryOperator '<dependent type>' '&&'
| |   | |     | |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl class __promote_imp definition
| |   |   |-CXXRecordDecl implicit class __promote_imp
| |   |   |-AccessSpecDecl public
| |   |   `-VarDecl value 'const _Bool' static cinit
| |   |     `-CXXBoolLiteralExpr '_Bool' false
| |   |-ClassTemplatePartialSpecializationDecl class __promote_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument type 'type-parameter-0-2'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _A3
| |   | |-CXXRecordDecl implicit class __promote_imp
| |   | |-AccessSpecDecl private
| |   | |-TypedefDecl referenced __type1 'typename __promote_imp<_A1>::type'
| |   | | `-DependentNameType 'typename __promote_imp<_A1>::type' dependent
| |   | |-TypedefDecl referenced __type2 'typename __promote_imp<_A2>::type'
| |   | | `-DependentNameType 'typename __promote_imp<_A2>::type' dependent
| |   | |-TypedefDecl referenced __type3 'typename __promote_imp<_A3>::type'
| |   | | `-DependentNameType 'typename __promote_imp<_A3>::type' dependent
| |   | |-AccessSpecDecl public
| |   | |-TypedefDecl type 'decltype(std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type1() + std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type2() + std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type3())'
| |   | | `-DecltypeType 'decltype(std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type1() + std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type2() + std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type3())' dependent
| |   | |   `-BinaryOperator '<dependent type>' '+'
| |   | |     |-BinaryOperator '<dependent type>' '+'
| |   | |     | |-CXXUnresolvedConstructExpr 'std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type1':'typename __promote_imp<_A1>::type'
| |   | |     | `-CXXUnresolvedConstructExpr 'std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type2':'typename __promote_imp<_A2>::type'
| |   | |     `-CXXUnresolvedConstructExpr 'std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, true>::__type3':'typename __promote_imp<_A3>::type'
| |   | `-VarDecl value 'const _Bool' static cinit
| |   |   `-CXXBoolLiteralExpr '_Bool' true
| |   |-ClassTemplatePartialSpecializationDecl class __promote_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument type 'void'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| |   | |-CXXRecordDecl implicit class __promote_imp
| |   | |-AccessSpecDecl private
| |   | |-TypedefDecl referenced __type1 'typename __promote_imp<_A1>::type'
| |   | | `-DependentNameType 'typename __promote_imp<_A1>::type' dependent
| |   | |-TypedefDecl referenced __type2 'typename __promote_imp<_A2>::type'
| |   | | `-DependentNameType 'typename __promote_imp<_A2>::type' dependent
| |   | |-AccessSpecDecl public
| |   | |-TypedefDecl type 'decltype(std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, void, true>::__type1() + std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, void, true>::__type2())'
| |   | | `-DecltypeType 'decltype(std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, void, true>::__type1() + std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, void, true>::__type2())' dependent
| |   | |   `-BinaryOperator '<dependent type>' '+'
| |   | |     |-CXXUnresolvedConstructExpr 'std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, void, true>::__type1':'typename __promote_imp<_A1>::type'
| |   | |     `-CXXUnresolvedConstructExpr 'std::__1::__promote_imp<type-parameter-0-0, type-parameter-0-1, void, true>::__type2':'typename __promote_imp<_A2>::type'
| |   | `-VarDecl value 'const _Bool' static cinit
| |   |   `-CXXBoolLiteralExpr '_Bool' true
| |   |-ClassTemplatePartialSpecializationDecl class __promote_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'void'
| |   | |-TemplateArgument type 'void'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| |   | |-CXXRecordDecl implicit class __promote_imp
| |   | |-AccessSpecDecl public
| |   | |-TypedefDecl type 'typename __numeric_type<_A1>::type'
| |   | | `-DependentNameType 'typename __numeric_type<_A1>::type' dependent
| |   | `-VarDecl value 'const _Bool' static cinit
| |   |   `-CXXBoolLiteralExpr '_Bool' true
| |   |-ClassTemplateDecl __promote
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| |   | | `-TemplateArgument type 'void'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _A3
| |   | | `-TemplateArgument type 'void'
| |   | `-CXXRecordDecl class __promote definition
| |   |   |-public '__promote_imp<_A1, _A2, _A3>'
| |   |   `-CXXRecordDecl implicit class __promote
| |   |-TypedefDecl referenced __signed_types '__type_list<signed char, __type_list<short, __type_list<int, __type_list<long, __type_list<long long, __type_list<__int128_t, struct std::__1::__nat> > > > > >':'struct std::__1::__type_list<signed char, struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > > >'
| |   | `-TemplateSpecializationType '__type_list<signed char, __type_list<short, __type_list<int, __type_list<long, __type_list<long long, __type_list<__int128_t, struct std::__1::__nat> > > > > >' sugar __type_list
| |   |   |-TemplateArgument type 'signed char'
| |   |   |-TemplateArgument type '__type_list<short, __type_list<int, __type_list<long, __type_list<long long, __type_list<__int128_t, struct std::__1::__nat> > > > >':'struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > >'
| |   |   `-RecordType 'struct std::__1::__type_list<signed char, struct std::__1::__type_list<short, struct std::__1::__type_list<int, struct std::__1::__type_list<long, struct std::__1::__type_list<long long, struct std::__1::__type_list<__int128, struct std::__1::__nat> > > > > >'
| |   |     `-ClassTemplateSpecialization '__type_list'
| |   |-TypedefDecl referenced __unsigned_types '__type_list<unsigned char, __type_list<unsigned short, __type_list<unsigned int, __type_list<unsigned long, __type_list<unsigned long long, __type_list<__uint128_t, struct std::__1::__nat> > > > > >':'struct std::__1::__type_list<unsigned char, struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > > >'
| |   | `-TemplateSpecializationType '__type_list<unsigned char, __type_list<unsigned short, __type_list<unsigned int, __type_list<unsigned long, __type_list<unsigned long long, __type_list<__uint128_t, struct std::__1::__nat> > > > > >' sugar __type_list
| |   |   |-TemplateArgument type 'unsigned char'
| |   |   |-TemplateArgument type '__type_list<unsigned short, __type_list<unsigned int, __type_list<unsigned long, __type_list<unsigned long long, __type_list<__uint128_t, struct std::__1::__nat> > > > >':'struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > >'
| |   |   `-RecordType 'struct std::__1::__type_list<unsigned char, struct std::__1::__type_list<unsigned short, struct std::__1::__type_list<unsigned int, struct std::__1::__type_list<unsigned long, struct std::__1::__type_list<unsigned long long, struct std::__1::__type_list<unsigned __int128, struct std::__1::__nat> > > > > >'
| |   |     `-ClassTemplateSpecialization '__type_list'
| |   |-ClassTemplateDecl __find_first
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _TypeList
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Size
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 2
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '_Bool' '<='
| |   | |     |-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332863588 '_Size' 'size_t':'unsigned long'
| |   | |     `-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof 'typename _TypeList::_Head'
| |   | `-CXXRecordDecl struct __find_first
| |   |-ClassTemplatePartialSpecializationDecl struct __find_first definition
| |   | |-TemplateArgument type '__type_list<type-parameter-0-0, type-parameter-0-1>'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa332863c08 '_Size' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 2 _Size
| |   | |-CXXRecordDecl implicit struct __find_first
| |   | `-TypedefDecl type '_Hp'
| |   |   `-TemplateTypeParmType '_Hp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Hp'
| |   |-ClassTemplatePartialSpecializationDecl struct __find_first definition
| |   | |-TemplateArgument type '__type_list<type-parameter-0-0, type-parameter-0-1>'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'size_t':'unsigned long' NonTypeTemplateParm 0x7fa3328644b8 '_Size' 'size_t':'unsigned long'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 2 _Size
| |   | |-CXXRecordDecl implicit struct __find_first
| |   | `-TypedefDecl type 'typename __find_first<_Tp, _Size>::type'
| |   |   `-DependentNameType 'typename __find_first<_Tp, _Size>::type' dependent
| |   |-ClassTemplateDecl __apply_cv
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 2
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 3
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __apply_cv definition
| |   |   |-CXXRecordDecl implicit struct __apply_cv
| |   |   `-TypedefDecl type '_Up'
| |   |     `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |       `-TemplateTypeParm '_Up'
| |   |-ClassTemplatePartialSpecializationDecl struct __apply_cv definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __apply_cv
| |   | `-TypedefDecl type 'const _Up'
| |   |   `-QualType 'const _Up' const
| |   |     `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |       `-TemplateTypeParm '_Up'
| |   |-ClassTemplatePartialSpecializationDecl struct __apply_cv definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __apply_cv
| |   | `-TypedefDecl type 'volatile _Up'
| |   |   `-QualType 'volatile _Up' volatile
| |   |     `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |       `-TemplateTypeParm '_Up'
| |   |-ClassTemplatePartialSpecializationDecl struct __apply_cv definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __apply_cv
| |   | `-TypedefDecl type 'const volatile _Up'
| |   |   `-QualType 'const volatile _Up' const volatile
| |   |     `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |       `-TemplateTypeParm '_Up'
| |   |-ClassTemplatePartialSpecializationDecl struct __apply_cv definition
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __apply_cv
| |   | `-TypedefDecl type '_Up &'
| |   |   `-LValueReferenceType '_Up &' dependent
| |   |     `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |       `-TemplateTypeParm '_Up'
| |   |-ClassTemplatePartialSpecializationDecl struct __apply_cv definition
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __apply_cv
| |   | `-TypedefDecl type 'const _Up &'
| |   |   `-LValueReferenceType 'const _Up &' dependent
| |   |     `-QualType 'const _Up' const
| |   |       `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |         `-TemplateTypeParm '_Up'
| |   |-ClassTemplatePartialSpecializationDecl struct __apply_cv definition
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __apply_cv
| |   | `-TypedefDecl type 'volatile _Up &'
| |   |   `-LValueReferenceType 'volatile _Up &' dependent
| |   |     `-QualType 'volatile _Up' volatile
| |   |       `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |         `-TemplateTypeParm '_Up'
| |   |-ClassTemplatePartialSpecializationDecl struct __apply_cv definition
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __apply_cv
| |   | `-TypedefDecl type 'const volatile _Up &'
| |   |   `-LValueReferenceType 'const volatile _Up &' dependent
| |   |     `-QualType 'const volatile _Up' const volatile
| |   |       `-TemplateTypeParmType '_Up' dependent depth 0 index 1
| |   |         `-TemplateTypeParm '_Up'
| |   |-ClassTemplateDecl __make_signed
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '||'
| |   | |     |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXRecordDecl struct __make_signed definition
| |   | | `-CXXRecordDecl implicit struct __make_signed
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | |-ClassTemplateSpecialization '__make_signed'
| |   | `-ClassTemplateSpecialization '__make_signed'
| |   |-ClassTemplatePartialSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'typename __find_first<__signed_types, sizeof(_Tp)>::type'
| |   |   `-DependentNameType 'typename __find_first<__signed_types, sizeof(_Tp)>::type' dependent
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type '_Bool'
| |   | |-TemplateArgument integral 1
| |   | `-CXXRecordDecl implicit struct __make_signed
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'short'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'short'
| |   |   `-BuiltinType 'short'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'unsigned short'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'short'
| |   |   `-BuiltinType 'short'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'int'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'int'
| |   |   `-BuiltinType 'int'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'unsigned int'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'int'
| |   |   `-BuiltinType 'int'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'long'
| |   |   `-BuiltinType 'long'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'unsigned long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'long'
| |   |   `-BuiltinType 'long'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'long long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'long long'
| |   |   `-BuiltinType 'long long'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'unsigned long long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type 'long long'
| |   |   `-BuiltinType 'long long'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type '__int128'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type '__int128_t':'__int128'
| |   |   `-TypedefType '__int128_t' sugar
| |   |     |-Typedef '__int128_t'
| |   |     `-BuiltinType '__int128'
| |   |-ClassTemplateSpecializationDecl struct __make_signed definition
| |   | |-TemplateArgument type 'unsigned __int128'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_signed
| |   | `-TypedefDecl type '__int128_t':'__int128'
| |   |   `-TypedefType '__int128_t' sugar
| |   |     |-Typedef '__int128_t'
| |   |     `-BuiltinType '__int128'
| |   |-ClassTemplateDecl make_signed
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct make_signed definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1933:1, > implicit struct make_signed
| |   |   `-TypedefDecl type 'typename __apply_cv<_Tp, typename __make_signed<typename remove_cv<_Tp>::type>::type>::type'
| |   |     `-DependentNameType 'typename __apply_cv<_Tp, typename __make_signed<typename remove_cv<_Tp>::type>::type>::type' dependent
| |   |-TypeAliasTemplateDecl make_signed_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl make_signed_t 'typename make_signed<_Tp>::type'
| |   |   `-DependentNameType 'typename make_signed<_Tp>::type' dependent
| |   |-ClassTemplateDecl __make_unsigned
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '||'
| |   | |     |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXRecordDecl struct __make_unsigned definition
| |   | | `-CXXRecordDecl implicit struct __make_unsigned
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | |-ClassTemplateSpecialization '__make_unsigned'
| |   | `-ClassTemplateSpecialization '__make_unsigned'
| |   |-ClassTemplatePartialSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'typename __find_first<__unsigned_types, sizeof(_Tp)>::type'
| |   |   `-DependentNameType 'typename __find_first<__unsigned_types, sizeof(_Tp)>::type' dependent
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type '_Bool'
| |   | |-TemplateArgument integral 1
| |   | `-CXXRecordDecl implicit struct __make_unsigned
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'short'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned short'
| |   |   `-BuiltinType 'unsigned short'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'unsigned short'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned short'
| |   |   `-BuiltinType 'unsigned short'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'int'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned int'
| |   |   `-BuiltinType 'unsigned int'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'unsigned int'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned int'
| |   |   `-BuiltinType 'unsigned int'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned long'
| |   |   `-BuiltinType 'unsigned long'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'unsigned long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned long'
| |   |   `-BuiltinType 'unsigned long'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'long long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned long long'
| |   |   `-BuiltinType 'unsigned long long'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'unsigned long long'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type 'unsigned long long'
| |   |   `-BuiltinType 'unsigned long long'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type '__int128'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type '__uint128_t':'unsigned __int128'
| |   |   `-TypedefType '__uint128_t' sugar
| |   |     |-Typedef '__uint128_t'
| |   |     `-BuiltinType 'unsigned __int128'
| |   |-ClassTemplateSpecializationDecl struct __make_unsigned definition
| |   | |-TemplateArgument type 'unsigned __int128'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit struct __make_unsigned
| |   | `-TypedefDecl type '__uint128_t':'unsigned __int128'
| |   |   `-TypedefType '__uint128_t' sugar
| |   |     |-Typedef '__uint128_t'
| |   |     `-BuiltinType 'unsigned __int128'
| |   |-ClassTemplateDecl make_unsigned
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct make_unsigned definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:1966:1, > implicit struct make_unsigned
| |   |   `-TypedefDecl type 'typename __apply_cv<_Tp, typename __make_unsigned<typename remove_cv<_Tp>::type>::type>::type'
| |   |     `-DependentNameType 'typename __apply_cv<_Tp, typename __make_unsigned<typename remove_cv<_Tp>::type>::type>::type' dependent
| |   |-TypeAliasTemplateDecl make_unsigned_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl make_unsigned_t 'typename make_unsigned<_Tp>::type'
| |   |   `-DependentNameType 'typename make_unsigned<_Tp>::type' dependent
| |   |-ClassTemplateDecl common_type
| |   | |-TemplateTypeParmDecl class depth 0 index 0 ... _Tp
| |   | `-CXXRecordDecl struct common_type definition
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2011:1, > implicit struct common_type
| |   |-ClassTemplatePartialSpecializationDecl struct common_type definition
| |   | |-public 'common_type<_Tp, _Tp>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2016:1, > implicit struct common_type
| |   |-ClassTemplateDecl __common_type2_imp
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Up
| |   | |-TemplateTypeParmDecl class depth 0 index 2
| |   | | `-TemplateArgument type 'void'
| |   | `-CXXRecordDecl struct __common_type2_imp definition
| |   |   `-CXXRecordDecl implicit struct __common_type2_imp
| |   |-ClassTemplatePartialSpecializationDecl struct __common_type2_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument type 'typename __void_t<decltype(true ? std::__1::declval<_Tp>() : std::__1::declval<_Up>())>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __common_type2_imp
| |   | `-TypedefDecl type 'typename decay<decltype(true ? std::__1::declval<_Tp>() : std::__1::declval<_Up>())>::type'
| |   |   `-DependentNameType 'typename decay<decltype(true ? std::__1::declval<_Tp>() : std::__1::declval<_Up>())>::type' dependent
| |   |-TypeAliasTemplateDecl __common_type2
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _DTp
| |   | | `-TemplateArgument type 'typename decay<_Tp>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _DUp
| |   | | `-TemplateArgument type 'typename decay<_Up>::type'
| |   | `-TypeAliasDecl __common_type2 'typename conditional<is_same<_Tp, _DTp>::value && is_same<_Up, _DUp>::value, __common_type2_imp<_Tp, _Up>, common_type<_DTp, _DUp> >::type'
| |   |   `-DependentNameType 'typename conditional<is_same<_Tp, _DTp>::value && is_same<_Up, _DUp>::value, __common_type2_imp<_Tp, _Up>, common_type<_DTp, _DUp> >::type' dependent
| |   |-ClassTemplatePartialSpecializationDecl struct common_type definition
| |   | |-public '__common_type2<_Tp, _Up>':'typename conditional<is_same<type-parameter-0-0, typename decay<type-parameter-0-0>::type>::value && is_same<type-parameter-0-1, typename decay<type-parameter-0-1>::type>::value, __common_type2_imp<type-parameter-0-0, type-parameter-0-1, void>, common_type<typename decay<type-parameter-0-0>::type, typename decay<type-parameter-0-1>::type> >::type'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | `-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2046:1, > implicit struct common_type
| |   |-ClassTemplateDecl __common_types
| |   | |-TemplateTypeParmDecl class depth 0 index 0 ... Tp
| |   | `-CXXRecordDecl struct __common_types
| |   |-ClassTemplateDecl __common_type_impl
| |   | |-TemplateTypeParmDecl class depth 0 index 0
| |   | |-TemplateTypeParmDecl class depth 0 index 1
| |   | | `-TemplateArgument type 'void'
| |   | `-CXXRecordDecl struct __common_type_impl definition
| |   |   `-CXXRecordDecl implicit struct __common_type_impl
| |   |-ClassTemplatePartialSpecializationDecl struct __common_type_impl definition
| |   | |-TemplateArgument type '__common_types<type-parameter-0-0, type-parameter-0-1>'
| |   | |-TemplateArgument type 'typename __void_t<typename common_type<type-parameter-0-0, type-parameter-0-1>::type>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-CXXRecordDecl implicit struct __common_type_impl
| |   | `-TypedefDecl type 'typename common_type<_Tp, _Up>::type'
| |   |   `-DependentNameType 'typename common_type<_Tp, _Up>::type' dependent
| |   |-ClassTemplatePartialSpecializationDecl struct __common_type_impl definition
| |   | |-public '__common_type_impl<__common_types<typename common_type<_Tp, _Up>::type, _Vp...> >'
| |   | |-TemplateArgument type '__common_types<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...>'
| |   | |-TemplateArgument type 'typename __void_t<typename common_type<type-parameter-0-0, type-parameter-0-1>::type>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Vp
| |   | `-CXXRecordDecl implicit struct __common_type_impl
| |   |-ClassTemplatePartialSpecializationDecl struct common_type definition
| |   | |-public '__common_type_impl<__common_types<_Tp, _Up, _Vp...> >'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | |-TemplateArgument type 'type-parameter-0-1'
| |   | | `-TemplateArgument type 'type-parameter-0-2...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Vp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2074:1, > implicit struct common_type
| |   |-TypeAliasTemplateDecl common_type_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 ... _Tp
| |   | `-TypeAliasDecl common_type_t 'typename common_type<_Tp...>::type'
| |   |   `-DependentNameType 'typename common_type<_Tp...>::type' dependent
| |   |-ClassTemplateDecl __select_2nd
| |   | |-TemplateTypeParmDecl typename depth 0 index 0
| |   | |-TemplateTypeParmDecl referenced typename depth 0 index 1 _Tp
| |   | `-CXXRecordDecl struct __select_2nd definition
| |   |   |-CXXRecordDecl implicit struct __select_2nd
| |   |   `-TypedefDecl type '_Tp'
| |   |     `-TemplateTypeParmType '_Tp' dependent depth 0 index 1
| |   |       `-TemplateTypeParm '_Tp'
| |   |-FunctionTemplateDecl __is_assignable_test
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-FunctionDecl __is_assignable_test 'typename __select_2nd<decltype((std::__1::declval<_Tp>() = std::__1::declval<_Arg>())), true_type>::type (int)'
| |   |   `-ParmVarDecl 'int'
| |   |-FunctionTemplateDecl __is_assignable_test
| |   | |-TemplateTypeParmDecl class depth 0 index 0
| |   | |-TemplateTypeParmDecl class depth 0 index 1
| |   | `-FunctionDecl __is_assignable_test 'std::__1::false_type (...)'
| |   |-ClassTemplateDecl __is_assignable_imp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 2
| |   | | `-TemplateArgument expr
| |   | |   `-BinaryOperator '<dependent type>' '||'
| |   | |     |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __is_assignable_imp definition
| |   |   |-public 'decltype((std::__1::__is_assignable_test<_Tp, _Arg>(0)))'
| |   |   `-CXXRecordDecl implicit struct __is_assignable_imp
| |   |-ClassTemplatePartialSpecializationDecl struct __is_assignable_imp definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-CXXRecordDecl implicit struct __is_assignable_imp
| |   |-ClassTemplateDecl is_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-CXXRecordDecl struct is_assignable definition
| |   |   |-public '__is_assignable_imp<_Tp, _Arg>'
| |   |   `-CXXRecordDecl implicit struct is_assignable
| |   |-ClassTemplateDecl is_copy_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_copy_assignable definition
| |   |   |-public 'is_assignable<typename add_lvalue_reference<_Tp>::type, typename add_lvalue_reference<typename add_const<_Tp>::type>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2116:22, > implicit struct is_copy_assignable
| |   |-ClassTemplateDecl is_move_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_move_assignable definition
| |   |   |-public 'is_assignable<typename add_lvalue_reference<_Tp>::type, typename add_rvalue_reference<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2127:22, > implicit struct is_move_assignable
| |   |-ClassTemplateDecl __is_destructible_apply
| |   | |-TemplateTypeParmDecl class depth 0 index 0
| |   | `-CXXRecordDecl struct __is_destructible_apply definition
| |   |   |-CXXRecordDecl implicit struct __is_destructible_apply
| |   |   `-TypedefDecl type 'int'
| |   |     `-BuiltinType 'int'
| |   |-ClassTemplateDecl __is_destructor_wellformed
| |   | |-TemplateTypeParmDecl referenced typename depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __is_destructor_wellformed definition
| |   |   |-CXXRecordDecl implicit struct __is_destructor_wellformed
| |   |   |-FunctionTemplateDecl __test
| |   |   | |-TemplateTypeParmDecl referenced typename depth 1 index 0 _Tp1
| |   |   | `-CXXMethodDecl __test 'char (typename __is_destructible_apply<decltype(std::__1::declval<_Tp1 &>().~_Tp1())>::type)' static
| |   |   |   `-ParmVarDecl 'typename __is_destructible_apply<decltype(std::__1::declval<_Tp1 &>().~_Tp1())>::type'
| |   |   |-FunctionTemplateDecl __test
| |   |   | |-TemplateTypeParmDecl typename depth 1 index 0 _Tp1
| |   |   | `-CXXMethodDecl __test 'struct std::__1::__two (...)' static
| |   |   `-VarDecl value 'const _Bool' static cinit
| |   |     `-BinaryOperator '_Bool' '=='
| |   |       |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |       | `-ParenExpr '<dependent type>'
| |   |       |   `-CallExpr '<dependent type>'
| |   |       |     |-UnresolvedLookupExpr '<dependent type>' lvalue (no ADL) = '__test' 0x7fa33382aa78 0x7fa33382a8e8
| |   |       |     `-IntegerLiteral 'int' 12
| |   |       `-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof 'char'
| |   |-ClassTemplateDecl __destructible_imp
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | `-CXXRecordDecl struct __destructible_imp
| |   |-ClassTemplatePartialSpecializationDecl struct __destructible_imp definition
| |   | |-public 'std::__1::integral_constant<_Bool, __is_destructor_wellformed<typename std::__1::remove_all_extents<_Tp>::type>::value>':'integral_constant<_Bool, __is_destructor_wellformed<typename std::__1::remove_all_extents<_Tp>::type>::value>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __destructible_imp
| |   |-ClassTemplatePartialSpecializationDecl struct __destructible_imp definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __destructible_imp
| |   |-ClassTemplateDecl __destructible_false
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | `-CXXRecordDecl struct __destructible_false
| |   |-ClassTemplatePartialSpecializationDecl struct __destructible_false definition
| |   | |-public '__destructible_imp<_Tp, std::__1::is_reference<_Tp>::value>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __destructible_false
| |   |-ClassTemplatePartialSpecializationDecl struct __destructible_false definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __destructible_false
| |   |-ClassTemplateDecl is_destructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl struct is_destructible definition
| |   | | |-public '__destructible_false<_Tp, std::__1::is_function<_Tp>::value>'
| |   | | `-CXXRecordDecl implicit struct is_destructible
| |   | `-ClassTemplateSpecialization 'is_destructible'
| |   |-ClassTemplatePartialSpecializationDecl struct is_destructible definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0 []'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct is_destructible
| |   |-ClassTemplateSpecializationDecl struct is_destructible definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'void'
| |   | `-CXXRecordDecl implicit struct is_destructible
| |   |-FunctionTemplateDecl move
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl constexpr move 'typename remove_reference<_Tp>::type &&(_Tp &&) noexcept' inline
| |   |   |-ParmVarDecl referenced __t '_Tp &&'
| |   |   |-CompoundStmt
| |   |   | |-DeclStmt
| |   |   | | `-TypedefDecl referenced _Up 'typename remove_reference<_Tp>::type'
| |   |   | |   `-DependentNameType 'typename remove_reference<_Tp>::type' dependent
| |   |   | `-ReturnStmt
| |   |   |   `-CXXStaticCastExpr '_Up':'typename remove_reference<_Tp>::type' xvalue static_cast<_Up &&> <Dependent>
| |   |   |     `-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa33382e818 '__t' '_Tp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2216:1, > forward
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl constexpr forward '_Tp &&(typename remove_reference<_Tp>::type &) noexcept' inline
| |   |   |-ParmVarDecl referenced __t 'typename remove_reference<_Tp>::type &'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CXXStaticCastExpr '_Tp' xvalue static_cast<_Tp &&> <Dependent>
| |   |   |     `-DeclRefExpr 'typename remove_reference<_Tp>::type' lvalue ParmVar 0x7fa33382efb0 '__t' 'typename remove_reference<_Tp>::type &'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2224:1, > forward
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl constexpr forward '_Tp &&(typename remove_reference<_Tp>::type &&) noexcept' inline
| |   |   |-ParmVarDecl referenced __t 'typename remove_reference<_Tp>::type &&'
| |   |   |-CompoundStmt
| |   |   | |-DeclStmt
| |   |   | | `-StaticAssertDecl
| |   |   | |   |-UnaryOperator '<dependent type>' prefix '!'
| |   |   | |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |   `-StringLiteral 'const char [39]' lvalue "can not forward an rvalue as an lvalue"
| |   |   | `-ReturnStmt
| |   |   |   `-CXXStaticCastExpr '_Tp' xvalue static_cast<_Tp &&> <Dependent>
| |   |   |     `-DeclRefExpr 'typename remove_reference<_Tp>::type' lvalue ParmVar 0x7fa33382f4d0 '__t' 'typename remove_reference<_Tp>::type &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2277:1, > __decay_copy
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl __decay_copy 'typename decay<_Tp>::type (_Tp &&)' inline
| |   |   |-ParmVarDecl referenced __t '_Tp &&'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2282:35> '<dependent type>'
| |   |   |     |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2282:30> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     `-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa33382fc28 '__t' '_Tp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-ClassTemplatePartialSpecializationDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:2299:1, > struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...)'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType '_Class'
| |   | | `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |   `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...)'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType '_Class'
| |   | | `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |   `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const _Class'
| |   | | `-QualType 'const _Class' const
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) const'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const _Class'
| |   | | `-QualType 'const _Class' const
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) volatile'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'volatile _Class'
| |   | | `-QualType 'volatile _Class' volatile
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) volatile'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'volatile _Class'
| |   | | `-QualType 'volatile _Class' volatile
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const volatile'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const volatile _Class'
| |   | | `-QualType 'const volatile _Class' const volatile
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) const volatile'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const volatile _Class'
| |   | | `-QualType 'const volatile _Class' const volatile
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType '_Class &'
| |   | | `-LValueReferenceType '_Class &' dependent
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType '_Class &'
| |   | | `-LValueReferenceType '_Class &' dependent
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const _Class &'
| |   | | `-LValueReferenceType 'const _Class &' dependent
| |   | |   `-QualType 'const _Class' const
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) const &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const _Class &'
| |   | | `-LValueReferenceType 'const _Class &' dependent
| |   | |   `-QualType 'const _Class' const
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) volatile &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'volatile _Class &'
| |   | | `-LValueReferenceType 'volatile _Class &' dependent
| |   | |   `-QualType 'volatile _Class' volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) volatile &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'volatile _Class &'
| |   | | `-LValueReferenceType 'volatile _Class &' dependent
| |   | |   `-QualType 'volatile _Class' volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const volatile &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const volatile _Class &'
| |   | | `-LValueReferenceType 'const volatile _Class &' dependent
| |   | |   `-QualType 'const volatile _Class' const volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) const volatile &'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const volatile _Class &'
| |   | | `-LValueReferenceType 'const volatile _Class &' dependent
| |   | |   `-QualType 'const volatile _Class' const volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType '_Class &&'
| |   | | `-RValueReferenceType '_Class &&' dependent
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType '_Class &&'
| |   | | `-RValueReferenceType '_Class &&' dependent
| |   | |   `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |     `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const _Class &&'
| |   | | `-RValueReferenceType 'const _Class &&' dependent
| |   | |   `-QualType 'const _Class' const
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) const &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const _Class &&'
| |   | | `-RValueReferenceType 'const _Class &&' dependent
| |   | |   `-QualType 'const _Class' const
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) volatile &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'volatile _Class &&'
| |   | | `-RValueReferenceType 'volatile _Class &&' dependent
| |   | |   `-QualType 'volatile _Class' volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) volatile &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'volatile _Class &&'
| |   | | `-RValueReferenceType 'volatile _Class &&' dependent
| |   | |   `-QualType 'volatile _Class' volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const volatile &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const volatile _Class &&'
| |   | | `-RValueReferenceType 'const volatile _Class &&' dependent
| |   | |   `-QualType 'const volatile _Class' const volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param...)':'_Rp (_Param...)'
| |   |   `-ParenType '_Rp (_Param...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       `-PackExpansionType '_Param...' dependent
| |   |         `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |           `-TemplateTypeParm '_Param'
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2..., ...) const volatile &&'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType 'const volatile _Class &&'
| |   | | `-RValueReferenceType 'const volatile _Class &&' dependent
| |   | |   `-QualType 'const volatile _Class' const volatile
| |   | |     `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |       `-TemplateTypeParm '_Class'
| |   | |-TypedefDecl _ReturnType '_Rp'
| |   | | `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Rp'
| |   | `-TypedefDecl _FnType '_Rp (_Param..., ...)':'_Rp (_Param..., ...)'
| |   |   `-ParenType '_Rp (_Param..., ...)' sugar dependent
| |   |     `-FunctionProtoType '_Rp (_Param..., ...)' dependent cdecl
| |   |       |-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |       | `-TemplateTypeParm '_Rp'
| |   |       |-PackExpansionType '_Param...' dependent
| |   |       | `-TemplateTypeParmType '_Param' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |       |   `-TemplateTypeParm '_Param'
| |   |       `-...
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_traits_imp definition
| |   | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-CXXRecordDecl implicit struct __member_pointer_traits_imp
| |   | |-TypedefDecl _ClassType '_Class'
| |   | | `-TemplateTypeParmType '_Class' dependent depth 0 index 1
| |   | |   `-TemplateTypeParm '_Class'
| |   | `-TypedefDecl _ReturnType '_Rp'
| |   |   `-TemplateTypeParmType '_Rp' dependent depth 0 index 0
| |   |     `-TemplateTypeParm '_Rp'
| |   |-ClassTemplateDecl __member_pointer_traits
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _MP
| |   | `-CXXRecordDecl struct __member_pointer_traits definition
| |   |   |-public '__member_pointer_traits_imp<typename remove_cv<_MP>::type, is_member_function_pointer<_MP>::value, is_member_object_pointer<_MP>::value>'
| |   |   `-CXXRecordDecl implicit struct __member_pointer_traits
| |   |-ClassTemplateDecl __member_pointer_class_type
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _DecayedFp
| |   | `-CXXRecordDecl struct __member_pointer_class_type definition
| |   |   `-CXXRecordDecl implicit struct __member_pointer_class_type
| |   |-ClassTemplatePartialSpecializationDecl struct __member_pointer_class_type definition
| |   | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Ret
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _ClassType
| |   | |-CXXRecordDecl implicit struct __member_pointer_class_type
| |   | `-TypedefDecl type '_ClassType'
| |   |   `-TemplateTypeParmType '_ClassType' dependent depth 0 index 1
| |   |     `-TemplateTypeParm '_ClassType'
| |   |-ClassTemplateDecl result_of
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Callable
| |   | `-CXXRecordDecl class result_of
| |   |-NamespaceDecl __is_construct
| |   | `-CXXRecordDecl struct __nat definition
| |   |   `-CXXRecordDecl implicit struct __nat
| |   |-ClassTemplateDecl is_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-CXXRecordDecl struct is_constructible definition
| |   |   |-public 'integral_constant<_Bool, __is_constructible(_Tp, _Args...)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3060:1, > implicit struct is_constructible
| |   |-ClassTemplateDecl is_default_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_default_constructible definition
| |   |   |-public 'is_constructible<_Tp>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3251:1, > implicit struct is_default_constructible
| |   |-ClassTemplateDecl is_copy_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_copy_constructible definition
| |   |   |-public 'is_constructible<_Tp, typename add_lvalue_reference<typename add_const<_Tp>::type>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3263:1, > implicit struct is_copy_constructible
| |   |-ClassTemplateDecl is_move_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_move_constructible definition
| |   |   |-public 'is_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3275:1, > implicit struct is_move_constructible
| |   |-ClassTemplateDecl is_trivially_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-CXXRecordDecl struct is_trivially_constructible definition
| |   |   |-public 'integral_constant<_Bool, __is_trivially_constructible(_Tp, _Args...)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3295:1, > implicit struct is_trivially_constructible
| |   |-ClassTemplateDecl is_trivially_default_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivially_default_constructible definition
| |   |   |-public 'is_trivially_constructible<_Tp>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3422:22, > implicit struct is_trivially_default_constructible
| |   |-ClassTemplateDecl is_trivially_copy_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivially_copy_constructible definition
| |   |   |-public 'is_trivially_constructible<_Tp, typename add_lvalue_reference<const _Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3433:22, > implicit struct is_trivially_copy_constructible
| |   |-ClassTemplateDecl is_trivially_move_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivially_move_constructible definition
| |   |   |-public 'is_trivially_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3444:22, > implicit struct is_trivially_move_constructible
| |   |-ClassTemplateDecl is_trivially_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-CXXRecordDecl struct is_trivially_assignable definition
| |   |   |-public 'integral_constant<_Bool, __is_trivially_assignable(_Tp, _Arg)>'
| |   |   `-CXXRecordDecl implicit struct is_trivially_assignable
| |   |-ClassTemplateDecl is_trivially_copy_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivially_copy_assignable definition
| |   |   |-public 'is_trivially_assignable<typename add_lvalue_reference<_Tp>::type, typename add_lvalue_reference<typename add_const<_Tp>::type>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3502:22, > implicit struct is_trivially_copy_assignable
| |   |-ClassTemplateDecl is_trivially_move_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivially_move_assignable definition
| |   |   |-public 'is_trivially_assignable<typename add_lvalue_reference<_Tp>::type, typename add_rvalue_reference<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3513:22, > implicit struct is_trivially_move_assignable
| |   |-ClassTemplateDecl is_trivially_destructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivially_destructible definition
| |   |   |-public 'integral_constant<_Bool, is_destructible<_Tp>::value && __has_trivial_destructor(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3531:22, > implicit struct is_trivially_destructible
| |   |-ClassTemplateDecl __libcpp_is_nothrow_constructible
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | |-TemplateTypeParmDecl class depth 0 index 2 _Tp
| |   | |-TemplateTypeParmDecl class depth 0 index 3 ... _Args
| |   | `-CXXRecordDecl struct __libcpp_is_nothrow_constructible
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_nothrow_constructible definition
| |   | |-public 'integral_constant<_Bool, noexcept(_Tp(declval<_Args>()...))>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-1...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-CXXRecordDecl implicit struct __libcpp_is_nothrow_constructible
| |   |-FunctionTemplateDecl __implicit_conversion_to
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl __implicit_conversion_to 'void (_Tp) noexcept'
| |   |   |-ParmVarDecl '_Tp'
| |   |   `-CompoundStmt
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_nothrow_constructible definition
| |   | |-public 'integral_constant<_Bool, noexcept(__implicit_conversion_to<_Tp>(declval<_Arg>()))>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-CXXRecordDecl implicit struct __libcpp_is_nothrow_constructible
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_nothrow_constructible definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr '_Bool' NonTypeTemplateParm 0x7fa3338582f8 '_IsReference' '_Bool'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-2...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced '_Bool' depth 0 index 1 _IsReference
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | `-CXXRecordDecl implicit struct __libcpp_is_nothrow_constructible
| |   |-ClassTemplateDecl is_nothrow_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-CXXRecordDecl struct is_nothrow_constructible definition
| |   |   |-public '__libcpp_is_nothrow_constructible<is_constructible<_Tp, _Args...>::value, is_reference<_Tp>::value, _Tp, _Args...>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3592:1, > implicit struct is_nothrow_constructible
| |   |-ClassTemplatePartialSpecializationDecl struct is_nothrow_constructible definition
| |   | |-public '__libcpp_is_nothrow_constructible<is_constructible<_Tp>::value, is_reference<_Tp>::value, _Tp>'
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateArgument pack
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Ns
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3598:1, > implicit struct is_nothrow_constructible
| |   |-ClassTemplateDecl is_nothrow_default_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_nothrow_default_constructible definition
| |   |   |-public 'is_nothrow_constructible<_Tp>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3720:22, > implicit struct is_nothrow_default_constructible
| |   |-ClassTemplateDecl is_nothrow_copy_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_nothrow_copy_constructible definition
| |   |   |-public 'is_nothrow_constructible<_Tp, typename add_lvalue_reference<typename add_const<_Tp>::type>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3731:22, > implicit struct is_nothrow_copy_constructible
| |   |-ClassTemplateDecl is_nothrow_move_constructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_nothrow_move_constructible definition
| |   |   |-public 'is_nothrow_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3742:22, > implicit struct is_nothrow_move_constructible
| |   |-ClassTemplateDecl __libcpp_is_nothrow_assignable
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Tp
| |   | |-TemplateTypeParmDecl class depth 0 index 2 _Arg
| |   | `-CXXRecordDecl struct __libcpp_is_nothrow_assignable
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_nothrow_assignable definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-CXXRecordDecl implicit struct __libcpp_is_nothrow_assignable
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_nothrow_assignable definition
| |   | |-public 'integral_constant<_Bool, noexcept(std::__1::declval<_Tp>() = std::__1::declval<_Arg>())>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-CXXRecordDecl implicit struct __libcpp_is_nothrow_assignable
| |   |-ClassTemplateDecl is_nothrow_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Arg
| |   | `-CXXRecordDecl struct is_nothrow_assignable definition
| |   |   |-public '__libcpp_is_nothrow_assignable<is_assignable<_Tp, _Arg>::value, _Tp, _Arg>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3774:1, > implicit struct is_nothrow_assignable
| |   |-ClassTemplateDecl is_nothrow_copy_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_nothrow_copy_assignable definition
| |   |   |-public 'is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type, typename add_lvalue_reference<typename add_const<_Tp>::type>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3830:22, > implicit struct is_nothrow_copy_assignable
| |   |-ClassTemplateDecl is_nothrow_move_assignable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_nothrow_move_assignable definition
| |   |   |-public 'is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type, typename add_rvalue_reference<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3841:22, > implicit struct is_nothrow_move_assignable
| |   |-ClassTemplateDecl __libcpp_is_nothrow_destructible
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0
| |   | |-TemplateTypeParmDecl class depth 0 index 1 _Tp
| |   | `-CXXRecordDecl struct __libcpp_is_nothrow_destructible
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_nothrow_destructible definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_nothrow_destructible
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_is_nothrow_destructible definition
| |   | |-public 'integral_constant<_Bool, noexcept(std::__1::declval<_Tp>().~_Tp())>'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __libcpp_is_nothrow_destructible
| |   |-ClassTemplateDecl is_nothrow_destructible
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_nothrow_destructible definition
| |   |   |-public '__libcpp_is_nothrow_destructible<is_destructible<_Tp>::value, _Tp>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3874:1, > implicit struct is_nothrow_destructible
| |   |-ClassTemplatePartialSpecializationDecl struct is_nothrow_destructible definition
| |   | |-public 'is_nothrow_destructible<_Tp>'
| |   | |-TemplateArgument type 'type-parameter-0-0 [_Np]'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Ns
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3880:1, > implicit struct is_nothrow_destructible
| |   |-ClassTemplatePartialSpecializationDecl struct is_nothrow_destructible definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3886:1, > implicit struct is_nothrow_destructible
| |   |-ClassTemplatePartialSpecializationDecl struct is_nothrow_destructible definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'type-parameter-0-0 &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3894:1, > implicit struct is_nothrow_destructible
| |   |-ClassTemplateDecl is_pod
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_pod definition
| |   |   |-public 'integral_constant<_Bool, __is_pod(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3925:22, > implicit struct is_pod
| |   |-ClassTemplateDecl is_literal_type
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_literal_type definition
| |   |   |-public 'integral_constant<_Bool, __is_literal(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3945:22, > implicit struct is_literal_type
| |   |-ClassTemplateDecl is_standard_layout
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_standard_layout definition
| |   |   |-public 'integral_constant<_Bool, __is_standard_layout(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3961:22, > implicit struct is_standard_layout
| |   |-ClassTemplateDecl is_trivially_copyable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivially_copyable definition
| |   |   |-public 'integral_constant<_Bool, __is_trivially_copyable(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3976:22, > implicit struct is_trivially_copyable
| |   |-ClassTemplateDecl is_trivial
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct is_trivial definition
| |   |   |-public 'integral_constant<_Bool, __is_trivial(_Tp)>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:3993:22, > implicit struct is_trivial
| |   |-ClassTemplateDecl __is_reference_wrapper_impl
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __is_reference_wrapper_impl definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   `-CXXRecordDecl implicit struct __is_reference_wrapper_impl
| |   |-ClassTemplatePartialSpecializationDecl struct __is_reference_wrapper_impl definition
| |   | |-public 'std::__1::true_type':'struct std::__1::integral_constant<_Bool, true>'
| |   | |-TemplateArgument type 'reference_wrapper<type-parameter-0-0>'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __is_reference_wrapper_impl
| |   |-ClassTemplateDecl __is_reference_wrapper
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __is_reference_wrapper definition
| |   |   |-public '__is_reference_wrapper_impl<typename remove_cv<_Tp>::type>'
| |   |   `-CXXRecordDecl implicit struct __is_reference_wrapper
| |   |-ClassTemplateDecl __check_complete
| |   | |-TemplateTypeParmDecl class depth 0 index 0 ... _Tp
| |   | |-CXXRecordDecl struct __check_complete
| |   | `-ClassTemplateSpecialization '__check_complete'
| |   |-ClassTemplateSpecializationDecl struct __check_complete definition
| |   | |-TemplateArgument pack
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Hp>'
| |   | |-private '__check_complete<_T0, _Tp...>'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | |-TemplateArgument type 'type-parameter-0-1'
| |   | | `-TemplateArgument type 'type-parameter-0-2...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _T0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Tp
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Hp>'
| |   | |-TemplateArgument pack
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | `-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Hp
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit struct __check_complete
| |   | `-StaticAssertDecl
| |   |   |-BinaryOperator '_Bool' '>'
| |   |   | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof '_Tp'
| |   |   | `-ImplicitCastExpr 'unsigned long' <IntegralCast>
| |   |   |   `-IntegerLiteral 'int' 0
| |   |   `-StringLiteral 'const char [23]' lvalue "Type must be complete."
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Tp>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Tp>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Rp>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (*)(type-parameter-0-1...)'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'void (*)(type-parameter-0-0...)'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Rp>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1...)'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'void (type-parameter-0-0...)'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...)'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) volatile'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const volatile'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) volatile &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const volatile &'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) volatile &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1::*)(type-parameter-0-2...) const volatile &&'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Param
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-ClassTemplatePartialSpecializationDecl struct __check_complete definition
| |   | |-private '__check_complete<_Class>'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Rp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Class
| |   | `-CXXRecordDecl implicit struct __check_complete
| |   |-TypeAliasTemplateDecl __enable_if_bullet1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _DecayFp
| |   | | `-TemplateArgument type 'typename decay<_Fp>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _DecayA0
| |   | | `-TemplateArgument type 'typename decay<_A0>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 4 _ClassT
| |   | | `-TemplateArgument type 'typename __member_pointer_class_type<_DecayFp>::type'
| |   | `-TypeAliasDecl __enable_if_bullet1 'typename enable_if<is_member_function_pointer<_DecayFp>::value && is_base_of<_ClassT, _DecayA0>::value>::type'
| |   |   `-DependentNameType 'typename enable_if<is_member_function_pointer<_DecayFp>::value && is_base_of<_ClassT, _DecayA0>::value>::type' dependent
| |   |-TypeAliasTemplateDecl __enable_if_bullet2
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _DecayFp
| |   | | `-TemplateArgument type 'typename decay<_Fp>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _DecayA0
| |   | | `-TemplateArgument type 'typename decay<_A0>::type'
| |   | `-TypeAliasDecl __enable_if_bullet2 'typename enable_if<is_member_function_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>::type'
| |   |   `-DependentNameType 'typename enable_if<is_member_function_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>::type' dependent
| |   |-TypeAliasTemplateDecl __enable_if_bullet3
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _DecayFp
| |   | | `-TemplateArgument type 'typename decay<_Fp>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _DecayA0
| |   | | `-TemplateArgument type 'typename decay<_A0>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 4 _ClassT
| |   | | `-TemplateArgument type 'typename __member_pointer_class_type<_DecayFp>::type'
| |   | `-TypeAliasDecl __enable_if_bullet3 'typename enable_if<is_member_function_pointer<_DecayFp>::value && !is_base_of<_ClassT, _DecayA0>::value && !__is_reference_wrapper<_DecayA0>::value>::type'
| |   |   `-DependentNameType 'typename enable_if<is_member_function_pointer<_DecayFp>::value && !is_base_of<_ClassT, _DecayA0>::value && !__is_reference_wrapper<_DecayA0>::value>::type' dependent
| |   |-TypeAliasTemplateDecl __enable_if_bullet4
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _DecayFp
| |   | | `-TemplateArgument type 'typename decay<_Fp>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _DecayA0
| |   | | `-TemplateArgument type 'typename decay<_A0>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 4 _ClassT
| |   | | `-TemplateArgument type 'typename __member_pointer_class_type<_DecayFp>::type'
| |   | `-TypeAliasDecl __enable_if_bullet4 'typename enable_if<is_member_object_pointer<_DecayFp>::value && is_base_of<_ClassT, _DecayA0>::value>::type'
| |   |   `-DependentNameType 'typename enable_if<is_member_object_pointer<_DecayFp>::value && is_base_of<_ClassT, _DecayA0>::value>::type' dependent
| |   |-TypeAliasTemplateDecl __enable_if_bullet5
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _DecayFp
| |   | | `-TemplateArgument type 'typename decay<_Fp>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _DecayA0
| |   | | `-TemplateArgument type 'typename decay<_A0>::type'
| |   | `-TypeAliasDecl __enable_if_bullet5 'typename enable_if<is_member_object_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>::type'
| |   |   `-DependentNameType 'typename enable_if<is_member_object_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>::type' dependent
| |   |-TypeAliasTemplateDecl __enable_if_bullet6
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _DecayFp
| |   | | `-TemplateArgument type 'typename decay<_Fp>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _DecayA0
| |   | | `-TemplateArgument type 'typename decay<_A0>::type'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 4 _ClassT
| |   | | `-TemplateArgument type 'typename __member_pointer_class_type<_DecayFp>::type'
| |   | `-TypeAliasDecl __enable_if_bullet6 'typename enable_if<is_member_object_pointer<_DecayFp>::value && !is_base_of<_ClassT, _DecayA0>::value && !__is_reference_wrapper<_DecayA0>::value>::type'
| |   |   `-DependentNameType 'typename enable_if<is_member_object_pointer<_DecayFp>::value && !is_base_of<_ClassT, _DecayA0>::value && !__is_reference_wrapper<_DecayA0>::value>::type' dependent
| |   |-FunctionTemplateDecl __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 ... _Args
| |   | `-FunctionDecl __invoke 'auto (struct std::__1::__any, _Args &&...) -> struct std::__1::__nat'
| |   |   |-ParmVarDecl 'struct std::__1::__any'
| |   |   `-ParmVarDecl __args '_Args &&...'
| |   |-FunctionTemplateDecl __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 ... _Args
| |   | `-FunctionDecl __invoke_constexpr 'auto (struct std::__1::__any, _Args &&...) -> struct std::__1::__nat'
| |   |   |-ParmVarDecl 'struct std::__1::__any'
| |   |   `-ParmVarDecl __args '_Args &&...'
| |   |-FunctionTemplateDecl __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-TemplateTypeParmDecl class depth 0 index 3
| |   | | `-TemplateArgument type '__enable_if_bullet1<_Fp, _A0>':'typename enable_if<is_member_function_pointer<typename decay<type-parameter-0-0>::type>::value && is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl __invoke 'auto (_Fp &&, _A0 &&, _Args &&...) noexcept(noexcept((std::__1::forward<_A0>(__a0) .* __f)(std::__1::forward<_Args>(__args)...))) -> decltype((std::__1::forward<_A0>(__a0) .* __f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr '<dependent type>'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-BinaryOperator </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4236:51> '<dependent type>' '.*'
| |   |   |     |   |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4236:48> '<dependent type>'
| |   |   |     |   | |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4236:42> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     |   | `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa33387e9d8 '__a0' '_A0 &&'
| |   |   |     |   `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa33387e938 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4236:85> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4236:84> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4236:76> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa33387eb18 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4238:1, > __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-TemplateTypeParmDecl class depth 0 index 3
| |   | | `-TemplateArgument type '__enable_if_bullet1<_Fp, _A0>':'typename enable_if<is_member_function_pointer<typename decay<type-parameter-0-0>::type>::value && is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl constexpr __invoke_constexpr 'auto (_Fp &&, _A0 &&, _Args &&...) noexcept(noexcept((std::__1::forward<_A0>(__a0) .* __f)(std::__1::forward<_Args>(__args)...))) -> decltype((std::__1::forward<_A0>(__a0) .* __f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr '<dependent type>'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-BinaryOperator </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4243:51> '<dependent type>' '.*'
| |   |   |     |   |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4243:48> '<dependent type>'
| |   |   |     |   | |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4243:42> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     |   | `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa333882418 '__a0' '_A0 &&'
| |   |   |     |   `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa333882378 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4243:85> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4243:84> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4243:76> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa3338824f8 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4245:1, > __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-TemplateTypeParmDecl class depth 0 index 3
| |   | | `-TemplateArgument type '__enable_if_bullet2<_Fp, _A0>':'typename enable_if<is_member_function_pointer<typename decay<type-parameter-0-0>::type>::value && __is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl __invoke 'auto (_Fp &&, _A0 &&, _Args &&...) noexcept(noexcept((__a0.get() .* __f)(std::__1::forward<_Args>(__args)...))) -> decltype((__a0.get() .* __f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr '<dependent type>'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |   |-CallExpr '<dependent type>'
| |   |   |     |   | `-CXXDependentScopeMemberExpr '<dependent type>' lvalue .get
| |   |   |     |   |   `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa333883db8 '__a0' '_A0 &&'
| |   |   |     |   `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa333883d18 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4250:70> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4250:69> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4250:61> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa333883e98 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4252:1, > __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-TemplateTypeParmDecl class depth 0 index 3
| |   | | `-TemplateArgument type '__enable_if_bullet2<_Fp, _A0>':'typename enable_if<is_member_function_pointer<typename decay<type-parameter-0-0>::type>::value && __is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl constexpr __invoke_constexpr 'auto (_Fp &&, _A0 &&, _Args &&...) noexcept(noexcept((__a0.get() .* __f)(std::__1::forward<_Args>(__args)...))) -> decltype((__a0.get() .* __f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr '<dependent type>'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |   |-CallExpr '<dependent type>'
| |   |   |     |   | `-CXXDependentScopeMemberExpr '<dependent type>' lvalue .get
| |   |   |     |   |   `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa333885db8 '__a0' '_A0 &&'
| |   |   |     |   `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa333885d18 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4257:70> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4257:69> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4257:61> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa333885e98 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4259:1, > __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-TemplateTypeParmDecl class depth 0 index 3
| |   | | `-TemplateArgument type '__enable_if_bullet3<_Fp, _A0>':'typename enable_if<is_member_function_pointer<typename decay<type-parameter-0-0>::type>::value && !is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value && !__is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl __invoke 'auto (_Fp &&, _A0 &&, _Args &&...) noexcept(noexcept(((*std::__1::forward<_A0>(__a0)) .* __f)(std::__1::forward<_Args>(__args)...))) -> decltype(((*std::__1::forward<_A0>(__a0)) .* __f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr '<dependent type>'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |   |-ParenExpr '<dependent type>'
| |   |   |     |   | `-UnaryOperator '<dependent type>' prefix '*'
| |   |   |     |   |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4264:50> '<dependent type>'
| |   |   |     |   |     |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4264:44> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     |   |     `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa333887768 '__a0' '_A0 &&'
| |   |   |     |   `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa3338876c8 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4264:88> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4264:87> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4264:79> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa333887848 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4266:1, > __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-TemplateTypeParmDecl class depth 0 index 3
| |   | | `-TemplateArgument type '__enable_if_bullet3<_Fp, _A0>':'typename enable_if<is_member_function_pointer<typename decay<type-parameter-0-0>::type>::value && !is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value && !__is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl constexpr __invoke_constexpr 'auto (_Fp &&, _A0 &&, _Args &&...) noexcept(noexcept(((*std::__1::forward<_A0>(__a0)) .* __f)(std::__1::forward<_Args>(__args)...))) -> decltype(((*std::__1::forward<_A0>(__a0)) .* __f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr '<dependent type>'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |   |-ParenExpr '<dependent type>'
| |   |   |     |   | `-UnaryOperator '<dependent type>' prefix '*'
| |   |   |     |   |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4271:50> '<dependent type>'
| |   |   |     |   |     |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4271:44> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     |   |     `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa3338892b8 '__a0' '_A0 &&'
| |   |   |     |   `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa333889218 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4271:88> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4271:87> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4271:79> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa333889398 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4275:1, > __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl class depth 0 index 2
| |   | | `-TemplateArgument type '__enable_if_bullet4<_Fp, _A0>':'typename enable_if<is_member_object_pointer<typename decay<type-parameter-0-0>::type>::value && is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl __invoke 'auto (_Fp &&, _A0 &&) noexcept(noexcept(std::__1::forward<_A0>(__a0) .* __f)) -> decltype(std::__1::forward<_A0>(__a0) .* __f)' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-BinaryOperator </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4280:50> '<dependent type>' '.*'
| |   |   |     |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4280:47> '<dependent type>'
| |   |   |     | |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4280:41> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     | `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa33388b398 '__a0' '_A0 &&'
| |   |   |     `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa33388b2f8 '__f' '_Fp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4282:1, > __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl class depth 0 index 2
| |   | | `-TemplateArgument type '__enable_if_bullet4<_Fp, _A0>':'typename enable_if<is_member_object_pointer<typename decay<type-parameter-0-0>::type>::value && is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl constexpr __invoke_constexpr 'auto (_Fp &&, _A0 &&) noexcept(noexcept(std::__1::forward<_A0>(__a0) .* __f)) -> decltype(std::__1::forward<_A0>(__a0) .* __f)' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-BinaryOperator </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4287:50> '<dependent type>' '.*'
| |   |   |     |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4287:47> '<dependent type>'
| |   |   |     | |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4287:41> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     | `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa33388c628 '__a0' '_A0 &&'
| |   |   |     `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa33388c588 '__f' '_Fp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4289:1, > __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl class depth 0 index 2
| |   | | `-TemplateArgument type '__enable_if_bullet5<_Fp, _A0>':'typename enable_if<is_member_object_pointer<typename decay<type-parameter-0-0>::type>::value && __is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl __invoke 'auto (_Fp &&, _A0 &&) noexcept(noexcept(__a0.get() .* __f)) -> decltype(__a0.get() .* __f)' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |-CallExpr '<dependent type>'
| |   |   |     | `-CXXDependentScopeMemberExpr '<dependent type>' lvalue .get
| |   |   |     |   `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa33388d848 '__a0' '_A0 &&'
| |   |   |     `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa33388d7a8 '__f' '_Fp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4296:1, > __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl class depth 0 index 2
| |   | | `-TemplateArgument type '__enable_if_bullet5<_Fp, _A0>':'typename enable_if<is_member_object_pointer<typename decay<type-parameter-0-0>::type>::value && __is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl constexpr __invoke_constexpr 'auto (_Fp &&, _A0 &&) noexcept(noexcept(__a0.get() .* __f)) -> decltype(__a0.get() .* __f)' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |-CallExpr '<dependent type>'
| |   |   |     | `-CXXDependentScopeMemberExpr '<dependent type>' lvalue .get
| |   |   |     |   `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa33388e788 '__a0' '_A0 &&'
| |   |   |     `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa33388e6e8 '__f' '_Fp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4303:1, > __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl class depth 0 index 2
| |   | | `-TemplateArgument type '__enable_if_bullet6<_Fp, _A0>':'typename enable_if<is_member_object_pointer<typename decay<type-parameter-0-0>::type>::value && !is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value && !__is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl __invoke 'auto (_Fp &&, _A0 &&) noexcept(noexcept((*std::__1::forward<_A0>(__a0)) .* __f)) -> decltype((*std::__1::forward<_A0>(__a0)) .* __f)' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-UnaryOperator '<dependent type>' prefix '*'
| |   |   |     |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4308:49> '<dependent type>'
| |   |   |     |     |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4308:43> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     |     `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa33388fa78 '__a0' '_A0 &&'
| |   |   |     `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa33388f9d8 '__f' '_Fp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4310:1, > __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A0
| |   | |-TemplateTypeParmDecl class depth 0 index 2
| |   | | `-TemplateArgument type '__enable_if_bullet6<_Fp, _A0>':'typename enable_if<is_member_object_pointer<typename decay<type-parameter-0-0>::type>::value && !is_base_of<typename __member_pointer_class_type<typename decay<type-parameter-0-0>::type>::type, typename decay<type-parameter-0-1>::type>::value && !__is_reference_wrapper<typename decay<type-parameter-0-1>::type>::value, void>::type'
| |   | `-FunctionDecl constexpr __invoke_constexpr 'auto (_Fp &&, _A0 &&) noexcept(noexcept((*std::__1::forward<_A0>(__a0)) .* __f)) -> decltype((*std::__1::forward<_A0>(__a0)) .* __f)' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __a0 '_A0 &&'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-BinaryOperator '<dependent type>' '.*'
| |   |   |     |-ParenExpr '<dependent type>'
| |   |   |     | `-UnaryOperator '<dependent type>' prefix '*'
| |   |   |     |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4315:49> '<dependent type>'
| |   |   |     |     |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4315:43> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     |     `-DeclRefExpr '_A0' lvalue ParmVar 0x7fa333890f08 '__a0' '_A0 &&'
| |   |   |     `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa333890e68 '__f' '_Fp &&'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4319:1, > __invoke
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-FunctionDecl __invoke 'auto (_Fp &&, _Args &&...) noexcept(noexcept(std::__1::forward<_Fp>(__f)(std::__1::forward<_Args>(__args)...))) -> decltype(std::__1::forward<_Fp>(__f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4323:80> '<dependent type>'
| |   |   |     |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4323:46> '<dependent type>'
| |   |   |     | |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4323:41> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     | `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa3338918e8 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4323:77> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4323:76> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4323:68> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa333891a28 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4325:1, > __invoke_constexpr
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-FunctionDecl constexpr __invoke_constexpr 'auto (_Fp &&, _Args &&...) noexcept(noexcept(std::__1::forward<_Fp>(__f)(std::__1::forward<_Args>(__args)...))) -> decltype(std::__1::forward<_Fp>(__f)(std::__1::forward<_Args>(__args)...))' inline
| |   |   |-ParmVarDecl referenced __f '_Fp &&'
| |   |   |-ParmVarDecl referenced __args '_Args &&...'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4329:80> '<dependent type>'
| |   |   |     |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4329:46> '<dependent type>'
| |   |   |     | |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4329:41> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |     | `-DeclRefExpr '_Fp' lvalue ParmVar 0x7fa3338937c8 '__f' '_Fp &&'
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4329:77> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4329:76> '<dependent type>'
| |   |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4329:68> '<dependent type>' lvalue (no ADL) = 'forward' 0x7fa33382f180 0x7fa33382f6a0
| |   |   |         `-DeclRefExpr '_Args &&...' lvalue ParmVar 0x7fa3338938a8 '__args' '_Args &&...'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-ClassTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4335:1, > __invokable_r
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Ret
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | `-CXXRecordDecl struct __invokable_r definition
| |   |   |-private '__check_complete<_Fp>'
| |   |   |-CXXRecordDecl implicit struct __invokable_r
| |   |   |-TypeAliasDecl referenced _Result 'decltype(std::__1::__invoke(std::__1::declval<_Fp>(), std::__1::declval<_Args>()...))'
| |   |   | `-DecltypeType 'decltype(std::__1::__invoke(std::__1::declval<_Fp>(), std::__1::declval<_Args>()...))' dependent
| |   |   |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4340:74> '<dependent type>'
| |   |   |     |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4340:16> '<overloaded function type>' lvalue (no ADL) = '__invoke' 0x7fa33387d848 0x7fa3338814e8 0x7fa333884688 0x7fa333888208 0x7fa33388b938 0x7fa33388dc98 0x7fa333890098 0x7fa333893278
| |   |   |     |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4340:45> '<dependent type>'
| |   |   |     | `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4340:43> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   |   |     `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4340:71> '<dependent type>'
| |   |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4340:70> '<dependent type>'
| |   |   |         `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4340:68> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   |   `-VarDecl value 'const _Bool' static cinit
| |   |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-TypeAliasTemplateDecl __invokable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-TypeAliasDecl __invokable '__invokable_r<void, _Fp, _Args...>'
| |   |   `-TemplateSpecializationType '__invokable_r<void, _Fp, _Args...>' dependent __invokable_r
| |   |     |-TemplateArgument type 'void'
| |   |     |-TemplateArgument type '_Fp'
| |   |     `-TemplateArgument type '_Args...'
| |   |-ClassTemplateDecl __nothrow_invokable_r_imp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 0 _IsInvokable
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1 _IsCVVoid
| |   | |-TemplateTypeParmDecl class depth 0 index 2 _Ret
| |   | |-TemplateTypeParmDecl class depth 0 index 3 _Fp
| |   | |-TemplateTypeParmDecl class depth 0 index 4 ... _Args
| |   | `-CXXRecordDecl struct __nothrow_invokable_r_imp definition
| |   |   |-CXXRecordDecl implicit struct __nothrow_invokable_r_imp
| |   |   `-VarDecl value 'const _Bool' static cinit
| |   |     `-CXXBoolLiteralExpr '_Bool' false
| |   |-ClassTemplatePartialSpecializationDecl struct __nothrow_invokable_r_imp definition
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 0
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-2...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Ret
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-CXXRecordDecl implicit referenced struct __nothrow_invokable_r_imp
| |   | |-TypedefDecl referenced _ThisT '__nothrow_invokable_r_imp<true, false, type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...>'
| |   | | `-InjectedClassNameType '__nothrow_invokable_r_imp<true, false, type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...>' dependent
| |   | |   `-ClassTemplatePartialSpecialization '__nothrow_invokable_r_imp'
| |   | |-FunctionTemplateDecl __test_noexcept
| |   | | |-TemplateTypeParmDecl referenced class depth 1 index 0 _Tp
| |   | | `-CXXMethodDecl __test_noexcept 'void (_Tp) noexcept' static
| |   | |   `-ParmVarDecl '_Tp'
| |   | `-VarDecl value 'const _Bool' static cinit
| |   |   `-CXXNoexceptExpr '_Bool'
| |   |     `-CallExpr '<dependent type>'
| |   |       |-UnresolvedLookupExpr '<dependent type>' lvalue (no ADL) = '__test_noexcept' 0x7fa333898760
| |   |       `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4371:74> '<dependent type>'
| |   |         |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4371:16> '<overloaded function type>' lvalue (no ADL) = '__invoke' 0x7fa33387d848 0x7fa3338814e8 0x7fa333884688 0x7fa333888208 0x7fa33388b938 0x7fa33388dc98 0x7fa333890098 0x7fa333893278
| |   |         |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4371:45> '<dependent type>'
| |   |         | `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4371:43> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   |         `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4371:71> '<dependent type>'
| |   |           `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4371:70> '<dependent type>'
| |   |             `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4371:68> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   |-ClassTemplatePartialSpecializationDecl struct __nothrow_invokable_r_imp definition
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument integral 1
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument pack
| |   | | `-TemplateArgument type 'type-parameter-0-2...'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Ret
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | |-CXXRecordDecl implicit struct __nothrow_invokable_r_imp
| |   | `-VarDecl value 'const _Bool' static cinit
| |   |   `-CXXNoexceptExpr '_Bool'
| |   |     `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4378:74> '<dependent type>'
| |   |       |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4378:16> '<overloaded function type>' lvalue (no ADL) = '__invoke' 0x7fa33387d848 0x7fa3338814e8 0x7fa333884688 0x7fa333888208 0x7fa33388b938 0x7fa33388dc98 0x7fa333890098 0x7fa333893278
| |   |       |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4378:45> '<dependent type>'
| |   |       | `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4378:43> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   |       `-PackExpansionExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4378:71> '<dependent type>'
| |   |         `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4378:70> '<dependent type>'
| |   |           `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4378:68> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   |-TypeAliasTemplateDecl __nothrow_invokable_r
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Ret
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 ... _Args
| |   | `-TypeAliasDecl __nothrow_invokable_r '__nothrow_invokable_r_imp<__invokable_r<_Ret, _Fp, _Args...>::value, is_void<_Ret>::value, _Ret, _Fp, _Args...>'
| |   |   `-TemplateSpecializationType '__nothrow_invokable_r_imp<__invokable_r<_Ret, _Fp, _Args...>::value, is_void<_Ret>::value, _Ret, _Fp, _Args...>' dependent __nothrow_invokable_r_imp
| |   |     |-TemplateArgument expr
| |   |     | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |     |-TemplateArgument expr
| |   |     | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |     |-TemplateArgument type '_Ret'
| |   |     |-TemplateArgument type '_Fp'
| |   |     `-TemplateArgument type '_Args...'
| |   |-ClassTemplateDecl __invoke_of
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | `-CXXRecordDecl struct __invoke_of definition
| |   |   |-public 'enable_if<__invokable<_Fp, _Args...>::value, typename __invokable_r<void, _Fp, _Args...>::_Result>'
| |   |   `-CXXRecordDecl implicit struct __invoke_of
| |   |-ClassTemplatePartialSpecializationDecl class result_of definition
| |   | |-public '__invoke_of<_Fp, _Args...>'
| |   | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1...)'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Fp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 ... _Args
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | `-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4400:1, > implicit class result_of
| |   |-TypeAliasTemplateDecl result_of_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl result_of_t 'typename result_of<_Tp>::type'
| |   |   `-DependentNameType 'typename result_of<_Tp>::type' dependent
| |   |-ClassTemplateDecl __is_swappable
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __is_swappable
| |   |-ClassTemplateDecl __is_nothrow_swappable
| |   | |-TemplateTypeParmDecl class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __is_nothrow_swappable
| |   |-FunctionTemplateDecl swap
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl swap 'typename enable_if<is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value>::type (_Tp &, _Tp &) noexcept(is_nothrow_move_constructible<_Tp>::value && is_nothrow_move_assignable<_Tp>::value)' inline
| |   |   |-ParmVarDecl referenced __x '_Tp &'
| |   |   |-ParmVarDecl referenced __y '_Tp &'
| |   |   |-CompoundStmt
| |   |   | |-DeclStmt
| |   |   | | `-VarDecl referenced __t '_Tp' callinit
| |   |   | |   `-ParenListExpr 'NULL TYPE'
| |   |   | |     `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4457:28> '<dependent type>'
| |   |   | |       |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4457:20> '<overloaded function type>' lvalue (no ADL) = 'move' 0x7fa33382ea38
| |   |   | |       `-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa33389c8b8 '__x' '_Tp &'
| |   |   | |-BinaryOperator '<dependent type>' '='
| |   |   | | |-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa33389c8b8 '__x' '_Tp &'
| |   |   | | `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4458:26> '<dependent type>'
| |   |   | |   |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4458:18> '<overloaded function type>' lvalue (no ADL) = 'move' 0x7fa33382ea38
| |   |   | |   `-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa33389c928 '__y' '_Tp &'
| |   |   | `-BinaryOperator '<dependent type>' '='
| |   |   |   |-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa33389c928 '__y' '_Tp &'
| |   |   |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4459:26> '<dependent type>'
| |   |   |     |-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4459:18> '<overloaded function type>' lvalue (no ADL) = 'move' 0x7fa33382ea38
| |   |   |     `-DeclRefExpr '_Tp' lvalue Var 0x7fa33389ceb8 '__t' '_Tp'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4462:1, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:759:35> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4467:1 swap
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'size_t':'unsigned long' depth 0 index 1 _Np
| |   | `-FunctionDecl /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4467:1 swap 'typename enable_if<__is_swappable<_Tp>::value>::type (_Tp (&)[_Np], _Tp (&)[_Np]) noexcept(__is_nothrow_swappable<_Tp>::value)' inline
| |   |   |-ParmVarDecl __a '_Tp (&)[_Np]'
| |   |   |-ParmVarDecl __b '_Tp (&)[_Np]'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4469:1, > iter_swap
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _ForwardIterator1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _ForwardIterator2
| |   | `-FunctionDecl iter_swap 'void (_ForwardIterator1, _ForwardIterator2) noexcept(noexcept(swap(*std::__1::declval<_ForwardIterator1>(), *std::__1::declval<_ForwardIterator2>())))' inline
| |   |   |-ParmVarDecl referenced __a '_ForwardIterator1'
| |   |   |-ParmVarDecl referenced __b '_ForwardIterator2'
| |   |   |-CompoundStmt
| |   |   | `-CallExpr '<dependent type>'
| |   |   |   |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = 'swap' 0x7fa33389dbd8 0x7fa33389cd68
| |   |   |   |-UnaryOperator '<dependent type>' prefix '*'
| |   |   |   | `-DeclRefExpr '_ForwardIterator1' lvalue ParmVar 0x7fa33389ddc8 '__a' '_ForwardIterator1'
| |   |   |   `-UnaryOperator '<dependent type>' prefix '*'
| |   |   |     `-DeclRefExpr '_ForwardIterator2' lvalue ParmVar 0x7fa33389de38 '__b' '_ForwardIterator2'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-NamespaceDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4482:1, > __detail
| |   | |-ClassTemplateDecl __swappable_with
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | | | `-TemplateArgument type '_Tp'
| |   | | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 2 _NotVoid
| |   | | | `-TemplateArgument expr
| |   | | |   `-BinaryOperator '<dependent type>' '&&'
| |   | | |     |-UnaryOperator '<dependent type>' prefix '!'
| |   | | |     | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |     `-UnaryOperator '<dependent type>' prefix '!'
| |   | | |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | `-CXXRecordDecl struct __swappable_with definition
| |   | |   |-CXXRecordDecl implicit struct __swappable_with
| |   | |   |-FunctionTemplateDecl __test_swap
| |   | |   | |-TemplateTypeParmDecl referenced class depth 1 index 0 _LHS
| |   | |   | |-TemplateTypeParmDecl referenced class depth 1 index 1 _RHS
| |   | |   | `-CXXMethodDecl __test_swap 'decltype(swap(std::__1::declval<_LHS>(), std::__1::declval<_RHS>())) (int)' static
| |   | |   |   `-ParmVarDecl 'int'
| |   | |   |-FunctionTemplateDecl __test_swap
| |   | |   | |-TemplateTypeParmDecl class depth 1 index 0
| |   | |   | |-TemplateTypeParmDecl class depth 1 index 1
| |   | |   | `-CXXMethodDecl __test_swap 'struct std::__1::__nat (long)' static
| |   | |   |   `-ParmVarDecl 'long'
| |   | |   |-TypedefDecl referenced __swap1 'decltype((__test_swap<_Tp, _Up>(0)))'
| |   | |   | `-DecltypeType 'decltype((__test_swap<_Tp, _Up>(0)))' dependent
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-CallExpr '<dependent type>'
| |   | |   |       |-UnresolvedLookupExpr '<dependent type>' lvalue (no ADL) = '__test_swap' 0x7fa33389f678 0x7fa33389f3b8
| |   | |   |       `-IntegerLiteral 'int' 0
| |   | |   |-TypedefDecl referenced __swap2 'decltype((__test_swap<_Up, _Tp>(0)))'
| |   | |   | `-DecltypeType 'decltype((__test_swap<_Up, _Tp>(0)))' dependent
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-CallExpr '<dependent type>'
| |   | |   |       |-UnresolvedLookupExpr '<dependent type>' lvalue (no ADL) = '__test_swap' 0x7fa33389f678 0x7fa33389f3b8
| |   | |   |       `-IntegerLiteral 'int' 0
| |   | |   `-VarDecl value 'const _Bool' static cinit
| |   | |     `-BinaryOperator '<dependent type>' '&&'
| |   | |       |-UnaryOperator '<dependent type>' prefix '!'
| |   | |       | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |       `-UnaryOperator '<dependent type>' prefix '!'
| |   | |         `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-ClassTemplatePartialSpecializationDecl struct __swappable_with definition
| |   | | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | | |-TemplateArgument type 'type-parameter-0-0'
| |   | | |-TemplateArgument type 'type-parameter-0-1'
| |   | | |-TemplateArgument integral 0
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | | `-CXXRecordDecl implicit struct __swappable_with
| |   | |-ClassTemplateDecl __nothrow_swappable_with
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   | | | `-TemplateArgument type '_Tp'
| |   | | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 2 _Swappable
| |   | | | `-TemplateArgument expr
| |   | | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | `-CXXRecordDecl struct __nothrow_swappable_with definition
| |   | |   |-CXXRecordDecl implicit struct __nothrow_swappable_with
| |   | |   `-VarDecl value 'const _Bool' static cinit
| |   | |     `-BinaryOperator '_Bool' '&&'
| |   | |       |-CXXNoexceptExpr '_Bool'
| |   | |       | `-CallExpr '<dependent type>'
| |   | |       |   |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = 'swap' 0x7fa33389dbd8 0x7fa33389cd68
| |   | |       |   |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4511:41> '<dependent type>'
| |   | |       |   | `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4511:39> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   | |       |   `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4511:64> '<dependent type>'
| |   | |       |     `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4511:62> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   | |       `-CXXNoexceptExpr '_Bool'
| |   | |         `-CallExpr '<dependent type>'
| |   | |           |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = 'swap' 0x7fa33389dbd8 0x7fa33389cd68
| |   | |           |-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4512:41> '<dependent type>'
| |   | |           | `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4512:39> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   | |           `-CallExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4512:64> '<dependent type>'
| |   | |             `-UnresolvedLookupExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4512:62> '<dependent type>' lvalue (no ADL) = 'declval' 0x7fa333159250
| |   | `-ClassTemplatePartialSpecializationDecl struct __nothrow_swappable_with definition
| |   |   |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   |   |-TemplateArgument type 'type-parameter-0-0'
| |   |   |-TemplateArgument type 'type-parameter-0-1'
| |   |   |-TemplateArgument integral 0
| |   |   |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   |   |-TemplateTypeParmDecl referenced class depth 0 index 1 _Up
| |   |   `-CXXRecordDecl implicit struct __nothrow_swappable_with
| |   |-ClassTemplateDecl prev 0x7fa33389be58 __is_swappable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl prev 0x7fa33389bdc0 struct __is_swappable definition
| |   |   |-public 'integral_constant<_Bool, __detail::__swappable_with<_Tp &>::value>'
| |   |   `-CXXRecordDecl implicit struct __is_swappable
| |   |-ClassTemplateDecl prev 0x7fa33389c188 __is_nothrow_swappable
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl prev 0x7fa33389c0f0 struct __is_nothrow_swappable definition
| |   |   |-public 'integral_constant<_Bool, __detail::__nothrow_swappable_with<_Tp &>::value>'
| |   |   `-CXXRecordDecl implicit struct __is_nothrow_swappable
| |   |-ClassTemplateDecl underlying_type
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct underlying_type definition
| |   |   |-CXXRecordDecl implicit struct underlying_type
| |   |   `-TypedefDecl type '__underlying_type(_Tp)'
| |   |     `-UnaryTransformType '__underlying_type(_Tp)' dependent underlying_type
| |   |       `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   |         `-TemplateTypeParm '_Tp'
| |   |-TypeAliasTemplateDecl underlying_type_t
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-TypeAliasDecl underlying_type_t 'typename underlying_type<_Tp>::type'
| |   |   `-DependentNameType 'typename underlying_type<_Tp>::type' dependent
| |   |-ClassTemplateDecl __sfinae_underlying_type
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-CXXRecordDecl struct __sfinae_underlying_type definition
| |   |   |-CXXRecordDecl implicit struct __sfinae_underlying_type
| |   |   |-TypedefDecl referenced type 'typename underlying_type<_Tp>::type'
| |   |   | `-DependentNameType 'typename underlying_type<_Tp>::type' dependent
| |   |   `-TypedefDecl __promoted_type 'decltype(((std::__1::__sfinae_underlying_type::type)1) + 0)'
| |   |     `-DecltypeType 'decltype(((std::__1::__sfinae_underlying_type::type)1) + 0)' dependent
| |   |       `-BinaryOperator '<dependent type>' '+'
| |   |         |-ParenExpr 'std::__1::__sfinae_underlying_type::type':'typename underlying_type<_Tp>::type'
| |   |         | `-CStyleCastExpr 'std::__1::__sfinae_underlying_type::type':'typename underlying_type<_Tp>::type' <Dependent>
| |   |         |   `-IntegerLiteral 'int' 1
| |   |         `-IntegerLiteral 'int' 0
| |   |-ClassTemplatePartialSpecializationDecl struct __sfinae_underlying_type definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl implicit struct __sfinae_underlying_type
| |   |-FunctionDecl __convert_to_integral 'int (int)' inline
| |   | |-ParmVarDecl used __val 'int'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr 'int' <LValueToRValue>
| |   | |     `-DeclRefExpr 'int' lvalue ParmVar 0x7fa3338a6020 '__val' 'int'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4625:1, > __convert_to_integral 'unsigned int (unsigned int)' inline
| |   | |-ParmVarDecl used __val 'unsigned int'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr 'unsigned int' <LValueToRValue>
| |   | |     `-DeclRefExpr 'unsigned int' lvalue ParmVar 0x7fa3338a62a0 '__val' 'unsigned int'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4628:1, > __convert_to_integral 'long (long)' inline
| |   | |-ParmVarDecl used __val 'long'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr 'long' <LValueToRValue>
| |   | |     `-DeclRefExpr 'long' lvalue ParmVar 0x7fa3338a6520 '__val' 'long'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4631:1, > __convert_to_integral 'unsigned long (unsigned long)' inline
| |   | |-ParmVarDecl used __val 'unsigned long'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr 'unsigned long' <LValueToRValue>
| |   | |     `-DeclRefExpr 'unsigned long' lvalue ParmVar 0x7fa3338a67a0 '__val' 'unsigned long'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4634:1, > __convert_to_integral 'long long (long long)' inline
| |   | |-ParmVarDecl used __val 'long long'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr 'long long' <LValueToRValue>
| |   | |     `-DeclRefExpr 'long long' lvalue ParmVar 0x7fa3338a6a20 '__val' 'long long'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4637:1, > __convert_to_integral 'unsigned long long (unsigned long long)' inline
| |   | |-ParmVarDecl used __val 'unsigned long long'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr 'unsigned long long' <LValueToRValue>
| |   | |     `-DeclRefExpr 'unsigned long long' lvalue ParmVar 0x7fa3338a6ca0 '__val' 'unsigned long long'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4641:1, > __convert_to_integral '__int128_t (__int128_t)' inline
| |   | |-ParmVarDecl used __val '__int128_t':'__int128'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr '__int128_t':'__int128' <LValueToRValue>
| |   | |     `-DeclRefExpr '__int128_t':'__int128' lvalue ParmVar 0x7fa3338a6f18 '__val' '__int128_t':'__int128'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4644:1, > __convert_to_integral '__uint128_t (__uint128_t)' inline
| |   | |-ParmVarDecl used __val '__uint128_t':'unsigned __int128'
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-ImplicitCastExpr '__uint128_t':'unsigned __int128' <LValueToRValue>
| |   | |     `-DeclRefExpr '__uint128_t':'unsigned __int128' lvalue ParmVar 0x7fa3338a71d0 '__val' '__uint128_t':'unsigned __int128'
| |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | `-VisibilityAttr Hidden
| |   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4648:1, > __convert_to_integral
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-FunctionDecl __convert_to_integral 'typename __sfinae_underlying_type<_Tp>::__promoted_type (_Tp)' inline
| |   |   |-ParmVarDecl referenced __val '_Tp'
| |   |   |-CompoundStmt
| |   |   | `-ReturnStmt
| |   |   |   `-DeclRefExpr '_Tp' lvalue ParmVar 0x7fa3338a77c0 '__val' '_Tp'
| |   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   `-VisibilityAttr Hidden
| |   |-ClassTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:4655:1, > __has_operator_addressof_member_imp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __has_operator_addressof_member_imp definition
| |   |   |-CXXRecordDecl implicit struct __has_operator_addressof_member_imp
| |   |   |-FunctionTemplateDecl __test
| |   |   | |-TemplateTypeParmDecl referenced class depth 1 index 0 _Up
| |   |   | `-CXXMethodDecl __test 'auto (int) -> typename __select_2nd<decltype(std::__1::declval<_Up>().operator&()), true_type>::type' static
| |   |   |   `-ParmVarDecl 'int'
| |   |   |-FunctionTemplateDecl __test
| |   |   | |-TemplateTypeParmDecl class depth 1 index 0
| |   |   | `-CXXMethodDecl __test 'auto (long) -> std::__1::false_type' static
| |   |   |   `-ParmVarDecl 'long'
| |   |   `-VarDecl value 'const _Bool' static cinit
| |   |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-ClassTemplateDecl __has_operator_addressof_free_imp
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __has_operator_addressof_free_imp definition
| |   |   |-CXXRecordDecl implicit struct __has_operator_addressof_free_imp
| |   |   |-FunctionTemplateDecl __test
| |   |   | |-TemplateTypeParmDecl referenced class depth 1 index 0 _Up
| |   |   | `-CXXMethodDecl __test 'auto (int) -> typename __select_2nd<decltype(operator&(std::__1::declval<_Up>())), true_type>::type' static
| |   |   |   `-ParmVarDecl 'int'
| |   |   |-FunctionTemplateDecl __test
| |   |   | |-TemplateTypeParmDecl class depth 1 index 0
| |   |   | `-CXXMethodDecl __test 'auto (long) -> std::__1::false_type' static
| |   |   |   `-ParmVarDecl 'long'
| |   |   `-VarDecl value 'const _Bool' static cinit
| |   |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-ClassTemplateDecl __has_operator_addressof
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl struct __has_operator_addressof definition
| |   |   |-public 'integral_constant<_Bool, __has_operator_addressof_member_imp<_Tp>::value || __has_operator_addressof_free_imp<_Tp>::value>'
| |   |   `-CXXRecordDecl implicit struct __has_operator_addressof
| |   |-CXXRecordDecl referenced struct __extract_key_fail_tag definition
| |   | `-CXXRecordDecl implicit struct __extract_key_fail_tag
| |   |-CXXRecordDecl referenced struct __extract_key_self_tag definition
| |   | `-CXXRecordDecl implicit struct __extract_key_self_tag
| |   |-CXXRecordDecl referenced struct __extract_key_first_tag definition
| |   | `-CXXRecordDecl implicit struct __extract_key_first_tag
| |   |-ClassTemplateDecl __can_extract_key
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _ValTy
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Key
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _RawValTy
| |   | | `-TemplateArgument type 'typename __unconstref<_ValTy>::type'
| |   | `-CXXRecordDecl struct __can_extract_key definition
| |   |   |-public 'conditional<is_same<_RawValTy, _Key>::value, struct __extract_key_self_tag, struct __extract_key_fail_tag>::type'
| |   |   `-CXXRecordDecl implicit struct __can_extract_key
| |   |-ClassTemplatePartialSpecializationDecl struct __can_extract_key definition
| |   | |-public 'conditional<is_same<typename remove_const<_First>::type, _Key>::value, struct __extract_key_first_tag, struct __extract_key_fail_tag>::type'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument type 'pair<type-parameter-0-2, type-parameter-0-3>'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Pair
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Key
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _First
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _Second
| |   | `-CXXRecordDecl implicit struct __can_extract_key
| |   |-ClassTemplateDecl __can_extract_map_key
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _ValTy
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Key
| |   | |-TemplateTypeParmDecl class depth 0 index 2 _ContainerValueTy
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 3 _RawValTy
| |   | | `-TemplateArgument type 'typename __unconstref<_ValTy>::type'
| |   | `-CXXRecordDecl struct __can_extract_map_key definition
| |   |   |-public 'integral_constant<_Bool, is_same<_RawValTy, _Key>::value>'
| |   |   `-CXXRecordDecl implicit struct __can_extract_map_key
| |   |-ClassTemplatePartialSpecializationDecl struct __can_extract_map_key definition
| |   | |-public 'std::__1::false_type':'struct std::__1::integral_constant<_Bool, false>'
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument type 'type-parameter-0-1'
| |   | |-TemplateArgument type 'type-parameter-0-2'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _ValTy
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 1 _Key
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 2 _RawValTy
| |   | `-CXXRecordDecl implicit struct __can_extract_map_key
| |   `-VarDecl parent 0x7fa333118d80 prev 0x7fa333119f50 </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:812:27, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:518:58> referenced value 'const _Bool':'const _Bool' constexpr
| |-NamespaceDecl prev 0x7fa33310f8c8 </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:438:37, > std
| | |-original Namespace 0x7fa33302ee58 'std'
| | `-NamespaceDecl prev 0x7fa33310f930 <scratch space>:432:1 __1 inline
| |   |-original Namespace 0x7fa33302eec0 '__1'
| |   |-EnumDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:125:1, > referenced float_round_style
| |   | |-EnumConstantDecl round_indeterminate 'enum std::__1::float_round_style'
| |   | | `-UnaryOperator 'int' prefix '-'
| |   | |   `-IntegerLiteral 'int' 1
| |   | |-EnumConstantDecl referenced round_toward_zero 'enum std::__1::float_round_style'
| |   | | `-IntegerLiteral 'int' 0
| |   | |-EnumConstantDecl referenced round_to_nearest 'enum std::__1::float_round_style'
| |   | | `-IntegerLiteral 'int' 1
| |   | |-EnumConstantDecl round_toward_infinity 'enum std::__1::float_round_style'
| |   | | `-IntegerLiteral 'int' 2
| |   | `-EnumConstantDecl round_toward_neg_infinity 'enum std::__1::float_round_style'
| |   |   `-IntegerLiteral 'int' 3
| |   |-EnumDecl referenced float_denorm_style
| |   | |-EnumConstantDecl denorm_indeterminate 'enum std::__1::float_denorm_style'
| |   | | `-UnaryOperator 'int' prefix '-'
| |   | |   `-IntegerLiteral 'int' 1
| |   | |-EnumConstantDecl referenced denorm_absent 'enum std::__1::float_denorm_style'
| |   | | `-IntegerLiteral 'int' 0
| |   | `-EnumConstantDecl referenced denorm_present 'enum std::__1::float_denorm_style'
| |   |   `-IntegerLiteral 'int' 1
| |   |-ClassTemplateDecl __libcpp_numeric_limits
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 1
| |   | | `-TemplateArgument expr
| |   | |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXRecordDecl class __libcpp_numeric_limits definition
| |   | | |-CXXRecordDecl implicit class __libcpp_numeric_limits
| |   | | |-AccessSpecDecl protected
| |   | | |-TypedefDecl referenced type '_Tp'
| |   | | | `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | | |   `-TemplateTypeParm '_Tp'
| |   | | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:148:92> constexpr min 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-CXXMethodDecl constexpr max 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-CXXMethodDecl constexpr lowest 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:152:5, > digits 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-VarDecl digits10 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-VarDecl max_digits10 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl is_integer 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl radix 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:159:96> constexpr epsilon 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-CXXMethodDecl constexpr round_error 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:162:5, > min_exponent 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-VarDecl min_exponent10 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-VarDecl max_exponent 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-VarDecl max_exponent10 'const int' static constexpr cinit
| |   | | | `-IntegerLiteral 'int' 0
| |   | | |-VarDecl has_infinity 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | | `-DeclRefExpr 'enum std::__1::float_denorm_style' EnumConstant 0x7fa3338bf2a8 'denorm_absent' 'enum std::__1::float_denorm_style'
| |   | | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:172:97> constexpr infinity 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-CXXMethodDecl constexpr denorm_min 'std::__1::__libcpp_numeric_limits::type (void) noexcept' static
| |   | | | |-CompoundStmt
| |   | | | | `-ReturnStmt
| |   | | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits::type':'_Tp'
| |   | | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | | `-VisibilityAttr Hidden
| |   | | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:177:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | | `-CXXBoolLiteralExpr '_Bool' false
| |   | | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   | |   `-DeclRefExpr 'enum std::__1::float_round_style' EnumConstant 0x7fa3338befc8 'round_toward_zero' 'enum std::__1::float_round_style'
| |   | |-ClassTemplateSpecialization '__libcpp_numeric_limits'
| |   | |-ClassTemplateSpecialization '__libcpp_numeric_limits'
| |   | |-ClassTemplateSpecialization '__libcpp_numeric_limits'
| |   | `-ClassTemplateSpecialization '__libcpp_numeric_limits'
| |   |-ClassTemplateDecl __libcpp_compute_min
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'int' depth 0 index 1 __digits
| |   | |-NonTypeTemplateParmDecl '_Bool' depth 0 index 2 _IsSigned
| |   | `-CXXRecordDecl struct __libcpp_compute_min definition
| |   |   |-CXXRecordDecl implicit struct __libcpp_compute_min
| |   |   `-VarDecl value 'const _Tp' static constexpr cinit
| |   |     `-CXXUnresolvedConstructExpr '_Tp'
| |   |       `-BinaryOperator '<dependent type>' '<<'
| |   |         |-CXXUnresolvedConstructExpr '_Tp'
| |   |         | `-IntegerLiteral 'int' 1
| |   |         `-DeclRefExpr 'int' NonTypeTemplateParm 0x7fa333809200 '__digits' 'int'
| |   |-ClassTemplatePartialSpecializationDecl struct __libcpp_compute_min definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument expr
| |   | | `-DeclRefExpr 'int' NonTypeTemplateParm 0x7fa333809950 '__digits' 'int'
| |   | |-TemplateArgument integral 0
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-NonTypeTemplateParmDecl referenced 'int' depth 0 index 1 __digits
| |   | |-CXXRecordDecl implicit struct __libcpp_compute_min
| |   | `-VarDecl value 'const _Tp' static constexpr cinit
| |   |   `-CXXUnresolvedConstructExpr '_Tp'
| |   |     `-IntegerLiteral 'int' 0
| |   |-ClassTemplatePartialSpecializationDecl class __libcpp_numeric_limits definition
| |   | |-TemplateArgument type 'type-parameter-0-0'
| |   | |-TemplateArgument integral 1
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-CXXRecordDecl implicit class __libcpp_numeric_limits
| |   | |-AccessSpecDecl protected
| |   | |-TypedefDecl referenced type '_Tp'
| |   | | `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Tp'
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl referenced is_signed 'const _Bool' static constexpr cinit
| |   | | `-BinaryOperator '<dependent type>' '<'
| |   | |   |-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | |   | `-UnaryOperator 'int' prefix '-'
| |   | |   |   `-IntegerLiteral 'int' 1
| |   | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | |     `-IntegerLiteral 'int' 0
| |   | |-VarDecl referenced digits 'const int' static constexpr cinit
| |   | | `-CXXStaticCastExpr 'int' static_cast<int> <NoOp>
| |   | |   `-ImplicitCastExpr 'int' <IntegralCast>
| |   | |     `-BinaryOperator 'unsigned long' '-'
| |   | |       |-BinaryOperator :66:22> 'unsigned long' '*'
| |   | |       | |-UnaryExprOrTypeTraitExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:207:67, > 'unsigned long' sizeof 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | |       | `-ImplicitCastExpr <<built-in>:66:22> 'unsigned long' <IntegralCast>
| |   | |       |   `-IntegerLiteral 'int' 8
| |   | |       `-ImplicitCastExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:207:97> 'unsigned long' <IntegralCast>
| |   | |         `-ImplicitCastExpr '_Bool' <LValueToRValue>
| |   | |           `-DeclRefExpr 'const _Bool' lvalue Var 0x7fa33380a650 'is_signed' 'const _Bool'
| |   | |-VarDecl digits10 'const int' static constexpr cinit
| |   | | `-BinaryOperator 'int' '/'
| |   | |   |-BinaryOperator 'int' '*'
| |   | |   | |-ImplicitCastExpr 'int' <LValueToRValue>
| |   | |   | | `-DeclRefExpr 'const int' lvalue Var 0x7fa33380a7f0 'digits' 'const int'
| |   | |   | `-IntegerLiteral 'int' 3
| |   | |   `-IntegerLiteral 'int' 10
| |   | |-VarDecl max_digits10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl referenced __min 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl referenced __max 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp' static constexpr cinit
| |   | | `-ConditionalOperator '<dependent type>'
| |   | |   |-ImplicitCastExpr '_Bool' <LValueToRValue>
| |   | |   | `-DeclRefExpr 'const _Bool' lvalue Var 0x7fa33380a650 'is_signed' 'const _Bool'
| |   | |   |-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | |   | `-BinaryOperator '<dependent type>' '^'
| |   | |   |   |-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | |   |   | `-UnaryOperator 'int' prefix '~'
| |   | |   |   |   `-IntegerLiteral 'int' 0
| |   | |   |   `-DeclRefExpr 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp' lvalue Var 0x7fa33380abb0 '__min' 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp'
| |   | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | |     `-UnaryOperator 'int' prefix '~'
| |   | |       `-IntegerLiteral 'int' 0
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:212:91> referenced constexpr min 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-DeclRefExpr 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp' lvalue Var 0x7fa33380abb0 '__min' 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr max 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-DeclRefExpr 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp' lvalue Var 0x7fa33380ae88 '__max' 'const std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'const _Tp'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DeclRefExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' lvalue CXXMethod 0x7fa33380b200 'min' 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:216:5, > is_integer 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl radix 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 2
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:219:97> constexpr epsilon 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | | |     `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | | |     `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:222:5, > min_exponent 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl min_exponent10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl max_exponent 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl max_exponent10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl has_infinity 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DeclRefExpr 'enum std::__1::float_denorm_style' EnumConstant 0x7fa3338bf2a8 'denorm_absent' 'enum std::__1::float_denorm_style'
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:232:98> constexpr infinity 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | | |     `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | | |     `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | | |     `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXUnresolvedConstructExpr 'std::__1::__libcpp_numeric_limits<type-parameter-0-0, true>::type':'_Tp'
| |   | | |     `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:237:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   `-DependentScopeDeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:440:15, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:239:77> '<dependent type>' lvalue
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DeclRefExpr 'enum std::__1::float_round_style' EnumConstant 0x7fa3338befc8 'round_toward_zero' 'enum std::__1::float_round_style'
| |   |-ClassTemplateSpecializationDecl class __libcpp_numeric_limits definition
| |   | |-TemplateArgument type '_Bool'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit class __libcpp_numeric_limits
| |   | |-AccessSpecDecl protected
| |   | |-TypedefDecl referenced type '_Bool'
| |   | | `-BuiltinType '_Bool'
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl digits 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 1
| |   | |-VarDecl digits10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl max_digits10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl referenced __min 'const std::__1::__libcpp_numeric_limits<_Bool, true>::type':'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl referenced __max 'const std::__1::__libcpp_numeric_limits<_Bool, true>::type':'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:265:91> used constexpr min 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-ImplicitCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' <LValueToRValue>
| |   | | |     `-DeclRefExpr 'const std::__1::__libcpp_numeric_limits<_Bool, true>::type':'const _Bool' lvalue Var 0x7fa33286f240 '__min' 'const std::__1::__libcpp_numeric_limits<_Bool, true>::type':'const _Bool'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr max 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-ImplicitCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' <LValueToRValue>
| |   | | |     `-DeclRefExpr 'const std::__1::__libcpp_numeric_limits<_Bool, true>::type':'const _Bool' lvalue Var 0x7fa33286f320 '__max' 'const std::__1::__libcpp_numeric_limits<_Bool, true>::type':'const _Bool'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool'
| |   | | |     `-ImplicitCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (*)(void) noexcept' <FunctionToPointerDecay>
| |   | | |       `-DeclRefExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' lvalue CXXMethod 0x7fa33286f4d8 'min' 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:269:5, > is_integer 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl radix 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 2
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:272:97> constexpr epsilon 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXFunctionalCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' functional cast to std::__1::__libcpp_numeric_limits<_Bool, true>::type <NoOp>
| |   | | |     `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   | | |       `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXFunctionalCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' functional cast to std::__1::__libcpp_numeric_limits<_Bool, true>::type <NoOp>
| |   | | |     `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   | | |       `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:275:5, > min_exponent 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl min_exponent10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl max_exponent 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl max_exponent10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral 'int' 0
| |   | |-VarDecl has_infinity 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DeclRefExpr 'enum std::__1::float_denorm_style' EnumConstant 0x7fa3338bf2a8 'denorm_absent' 'enum std::__1::float_denorm_style'
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:285:98> constexpr infinity 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXFunctionalCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' functional cast to std::__1::__libcpp_numeric_limits<_Bool, true>::type <NoOp>
| |   | | |     `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   | | |       `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXFunctionalCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' functional cast to std::__1::__libcpp_numeric_limits<_Bool, true>::type <NoOp>
| |   | | |     `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   | | |       `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXFunctionalCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' functional cast to std::__1::__libcpp_numeric_limits<_Bool, true>::type <NoOp>
| |   | | |     `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   | | |       `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::__libcpp_numeric_limits<_Bool, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CXXFunctionalCastExpr 'std::__1::__libcpp_numeric_limits<_Bool, true>::type':'_Bool' functional cast to std::__1::__libcpp_numeric_limits<_Bool, true>::type <NoOp>
| |   | | |     `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   | | |       `-IntegerLiteral 'int' 0
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:290:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DeclRefExpr 'enum std::__1::float_round_style' EnumConstant 0x7fa3338befc8 'round_toward_zero' 'enum std::__1::float_round_style'
| |   |-ClassTemplateSpecializationDecl class __libcpp_numeric_limits definition
| |   | |-TemplateArgument type 'float'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit class __libcpp_numeric_limits
| |   | |-AccessSpecDecl protected
| |   | |-TypedefDecl referenced type 'float'
| |   | | `-BuiltinType 'float'
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl :139:26> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:308:41 referenced digits 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:139:26> 'int' 24
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:309:5, <built-in>:134:21> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:309:41 digits10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:134:21> 'int' 6
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:310:5, > max_digits10 'const int' static constexpr cinit
| |   | | `-ImplicitCastExpr 'const int' <IntegralCast>
| |   | |   `-BinaryOperator 'long' '+'
| |   | |     |-ImplicitCastExpr 'long' <IntegralCast>
| |   | |     | `-IntegerLiteral 'int' 2
| |   | |     `-BinaryOperator 'long' '/'
| |   | |       |-ParenExpr 'long'
| |   | |       | `-BinaryOperator 'long' '*'
| |   | |       |   |-ImplicitCastExpr 'long' <IntegralCast>
| |   | |       |   | `-ImplicitCastExpr 'int' <LValueToRValue>
| |   | |       |   |   `-DeclRefExpr 'const int' lvalue Var 0x7fa332871bf8 'digits' 'const int'
| |   | |       |   `-IntegerLiteral 'long' 30103
| |   | |       `-IntegerLiteral 'long' 100000
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:311:97> constexpr min 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :145:21>
| |   | | |   `-FloatingLiteral 'float' 1.175494e-38
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl used constexpr max 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :142:21>
| |   | | |   `-FloatingLiteral 'float' 3.402823e+38
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-UnaryOperator 'std::__1::__libcpp_numeric_limits<float, true>::type':'float' prefix '-'
| |   | | |     `-CallExpr 'std::__1::__libcpp_numeric_limits<float, true>::type':'float'
| |   | | |       `-ImplicitCastExpr 'std::__1::__libcpp_numeric_limits<float, true>::type (*)(void) noexcept' <FunctionToPointerDecay>
| |   | | |         `-DeclRefExpr 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' lvalue CXXMethod 0x7fa332872230 'max' 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:315:5, > is_integer 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl :332:23> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:317:41 radix 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:332:23> 'int' 2
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:318:105> constexpr epsilon 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :136:25>
| |   | | |   `-FloatingLiteral 'float' 1.192093e-07
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-FloatingLiteral 'float' 5.000000e-01
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:321:5, <built-in>:144:30> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:321:41 min_exponent 'const int' static constexpr cinit
| |   | | `-ParenExpr <<built-in>:144:25, > 'int'
| |   | |   `-UnaryOperator 'int' prefix '-'
| |   | |     `-IntegerLiteral 'int' 125
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:322:5, <built-in>:143:32> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:322:41 min_exponent10 'const int' static constexpr cinit
| |   | | `-ParenExpr <<built-in>:143:28, > 'int'
| |   | |   `-UnaryOperator 'int' prefix '-'
| |   | |     `-IntegerLiteral 'int' 37
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:323:5, <built-in>:141:25> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:323:41 max_exponent 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:141:25> 'int' 128
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:324:5, <built-in>:140:28> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:324:41 max_exponent10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:140:28> 'int' 38
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:326:5, > has_infinity 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DeclRefExpr 'enum std::__1::float_denorm_style' EnumConstant 0x7fa3338bf310 'denorm_present' 'enum std::__1::float_denorm_style'
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:331:112> constexpr infinity 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'float'
| |   | | |     `-ImplicitCastExpr 'float (*)(void) noexcept' <BuiltinFnToFnPtr>
| |   | | |       `-DeclRefExpr '<builtin fn type>' Function 0x7fa332873f90 '__builtin_huge_valf' 'float (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'float'
| |   | | |     |-ImplicitCastExpr 'float (*)(const char *) noexcept' <BuiltinFnToFnPtr>
| |   | | |     | `-DeclRefExpr '<builtin fn type>' Function 0x7fa332874170 '__builtin_nanf' 'float (const char *) noexcept'
| |   | | |     `-ImplicitCastExpr 'const char *' <ArrayToPointerDecay>
| |   | | |       `-StringLiteral 'const char [1]' lvalue ""
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'float'
| |   | | |     |-ImplicitCastExpr 'float (*)(const char *) noexcept' <BuiltinFnToFnPtr>
| |   | | |     | `-DeclRefExpr '<builtin fn type>' Function 0x7fa332874470 '__builtin_nansf' 'float (const char *) noexcept'
| |   | | |     `-ImplicitCastExpr 'const char *' <ArrayToPointerDecay>
| |   | | |       `-StringLiteral 'const char [1]' lvalue ""
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::__libcpp_numeric_limits<float, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :132:28>
| |   | | |   `-FloatingLiteral 'float' 1.401298e-45
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:336:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DeclRefExpr 'enum std::__1::float_round_style' EnumConstant 0x7fa3338bf030 'round_to_nearest' 'enum std::__1::float_round_style'
| |   |-ClassTemplateSpecializationDecl class __libcpp_numeric_limits definition
| |   | |-TemplateArgument type 'double'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit class __libcpp_numeric_limits
| |   | |-AccessSpecDecl protected
| |   | |-TypedefDecl referenced type 'double'
| |   | | `-BuiltinType 'double'
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl :153:26> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:354:41 referenced digits 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:153:26> 'int' 53
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:355:5, <built-in>:148:21> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:355:41 digits10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:148:21> 'int' 15
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:356:5, > max_digits10 'const int' static constexpr cinit
| |   | | `-ImplicitCastExpr 'const int' <IntegralCast>
| |   | |   `-BinaryOperator 'long' '+'
| |   | |     |-ImplicitCastExpr 'long' <IntegralCast>
| |   | |     | `-IntegerLiteral 'int' 2
| |   | |     `-BinaryOperator 'long' '/'
| |   | |       |-ParenExpr 'long'
| |   | |       | `-BinaryOperator 'long' '*'
| |   | |       |   |-ImplicitCastExpr 'long' <IntegralCast>
| |   | |       |   | `-ImplicitCastExpr 'int' <LValueToRValue>
| |   | |       |   |   `-DeclRefExpr 'const int' lvalue Var 0x7fa332874cd8 'digits' 'const int'
| |   | |       |   `-IntegerLiteral 'long' 30103
| |   | |       `-IntegerLiteral 'long' 100000
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:357:97> constexpr min 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :159:21>
| |   | | |   `-FloatingLiteral 'double' 2.225074e-308
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl used constexpr max 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :156:21>
| |   | | |   `-FloatingLiteral 'double' 1.797693e+308
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-UnaryOperator 'std::__1::__libcpp_numeric_limits<double, true>::type':'double' prefix '-'
| |   | | |     `-CallExpr 'std::__1::__libcpp_numeric_limits<double, true>::type':'double'
| |   | | |       `-ImplicitCastExpr 'std::__1::__libcpp_numeric_limits<double, true>::type (*)(void) noexcept' <FunctionToPointerDecay>
| |   | | |         `-DeclRefExpr 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' lvalue CXXMethod 0x7fa332875350 'max' 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:361:5, > is_integer 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl :332:23> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:363:41 radix 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:332:23> 'int' 2
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:364:105> constexpr epsilon 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :150:25>
| |   | | |   `-FloatingLiteral 'double' 2.220446e-16
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-FloatingLiteral 'double' 5.000000e-01
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:367:5, <built-in>:158:31> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:367:41 min_exponent 'const int' static constexpr cinit
| |   | | `-ParenExpr <<built-in>:158:25, > 'int'
| |   | |   `-UnaryOperator 'int' prefix '-'
| |   | |     `-IntegerLiteral 'int' 1021
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:368:5, <built-in>:157:33> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:368:41 min_exponent10 'const int' static constexpr cinit
| |   | | `-ParenExpr <<built-in>:157:28, > 'int'
| |   | |   `-UnaryOperator 'int' prefix '-'
| |   | |     `-IntegerLiteral 'int' 307
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:369:5, <built-in>:155:25> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:369:41 max_exponent 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:155:25> 'int' 1024
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:370:5, <built-in>:154:28> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:370:41 max_exponent10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:154:28> 'int' 308
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:372:5, > has_infinity 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DeclRefExpr 'enum std::__1::float_denorm_style' EnumConstant 0x7fa3338bf310 'denorm_present' 'enum std::__1::float_denorm_style'
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:377:111> constexpr infinity 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'double'
| |   | | |     `-ImplicitCastExpr 'double (*)(void) noexcept' <BuiltinFnToFnPtr>
| |   | | |       `-DeclRefExpr '<builtin fn type>' Function 0x7fa3328770c0 '__builtin_huge_val' 'double (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'double'
| |   | | |     |-ImplicitCastExpr 'double (*)(const char *) noexcept' <BuiltinFnToFnPtr>
| |   | | |     | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3328772a0 '__builtin_nan' 'double (const char *) noexcept'
| |   | | |     `-ImplicitCastExpr 'const char *' <ArrayToPointerDecay>
| |   | | |       `-StringLiteral 'const char [1]' lvalue ""
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'double'
| |   | | |     |-ImplicitCastExpr 'double (*)(const char *) noexcept' <BuiltinFnToFnPtr>
| |   | | |     | `-DeclRefExpr '<builtin fn type>' Function 0x7fa3328775a0 '__builtin_nans' 'double (const char *) noexcept'
| |   | | |     `-ImplicitCastExpr 'const char *' <ArrayToPointerDecay>
| |   | | |       `-StringLiteral 'const char [1]' lvalue ""
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::__libcpp_numeric_limits<double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :146:28>
| |   | | |   `-FloatingLiteral 'double' 4.940656e-324
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:382:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DeclRefExpr 'enum std::__1::float_round_style' EnumConstant 0x7fa3338bf030 'round_to_nearest' 'enum std::__1::float_round_style'
| |   |-ClassTemplateSpecializationDecl class __libcpp_numeric_limits definition
| |   | |-TemplateArgument type 'long double'
| |   | |-TemplateArgument integral 1
| |   | |-CXXRecordDecl implicit class __libcpp_numeric_limits
| |   | |-AccessSpecDecl protected
| |   | |-TypedefDecl referenced type 'long double'
| |   | | `-BuiltinType 'long double'
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl :167:27> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:400:41 referenced digits 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:167:27> 'int' 64
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:401:5, <built-in>:162:22> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:401:41 digits10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:162:22> 'int' 18
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:402:5, > max_digits10 'const int' static constexpr cinit
| |   | | `-ImplicitCastExpr 'const int' <IntegralCast>
| |   | |   `-BinaryOperator 'long' '+'
| |   | |     |-ImplicitCastExpr 'long' <IntegralCast>
| |   | |     | `-IntegerLiteral 'int' 2
| |   | |     `-BinaryOperator 'long' '/'
| |   | |       |-ParenExpr 'long'
| |   | |       | `-BinaryOperator 'long' '*'
| |   | |       |   |-ImplicitCastExpr 'long' <IntegralCast>
| |   | |       |   | `-ImplicitCastExpr 'int' <LValueToRValue>
| |   | |       |   |   `-DeclRefExpr 'const int' lvalue Var 0x7fa332877e08 'digits' 'const int'
| |   | |       |   `-IntegerLiteral 'long' 30103
| |   | |       `-IntegerLiteral 'long' 100000
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:403:98> constexpr min 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :173:22>
| |   | | |   `-FloatingLiteral 'long double' 0.000000e+00
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl used constexpr max 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :170:22>
| |   | | |   `-FloatingLiteral 'long double' INF
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-UnaryOperator 'std::__1::__libcpp_numeric_limits<long double, true>::type':'long double' prefix '-'
| |   | | |     `-CallExpr 'std::__1::__libcpp_numeric_limits<long double, true>::type':'long double'
| |   | | |       `-ImplicitCastExpr 'std::__1::__libcpp_numeric_limits<long double, true>::type (*)(void) noexcept' <FunctionToPointerDecay>
| |   | | |         `-DeclRefExpr 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' lvalue CXXMethod 0x7fa332878440 'max' 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:407:5, > is_integer 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl :332:23> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:409:41 radix 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:332:23> 'int' 2
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:410:106> constexpr epsilon 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :164:26>
| |   | | |   `-FloatingLiteral 'long double' 1.084202e-19
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-ImplicitCastExpr 'std::__1::__libcpp_numeric_limits<long double, true>::type':'long double' <FloatingCast>
| |   | | |     `-FloatingLiteral 'double' 5.000000e-01
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:413:5, <built-in>:172:33> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:413:41 min_exponent 'const int' static constexpr cinit
| |   | | `-ParenExpr <<built-in>:172:26, > 'int'
| |   | |   `-UnaryOperator 'int' prefix '-'
| |   | |     `-IntegerLiteral 'int' 16381
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:414:5, <built-in>:171:35> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:414:41 min_exponent10 'const int' static constexpr cinit
| |   | | `-ParenExpr <<built-in>:171:29, > 'int'
| |   | |   `-UnaryOperator 'int' prefix '-'
| |   | |     `-IntegerLiteral 'int' 4931
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:415:5, <built-in>:169:26> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:415:41 max_exponent 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:169:26> 'int' 16384
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:416:5, <built-in>:168:29> /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:416:41 max_exponent10 'const int' static constexpr cinit
| |   | | `-IntegerLiteral <<built-in>:168:29> 'int' 4932
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:418:5, > has_infinity 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DeclRefExpr 'enum std::__1::float_denorm_style' EnumConstant 0x7fa3338bf310 'denorm_present' 'enum std::__1::float_denorm_style'
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:423:112> constexpr infinity 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'long double'
| |   | | |     `-ImplicitCastExpr 'long double (*)(void) noexcept' <BuiltinFnToFnPtr>
| |   | | |       `-DeclRefExpr '<builtin fn type>' Function 0x7fa33287a218 '__builtin_huge_vall' 'long double (void) noexcept'
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'long double'
| |   | | |     |-ImplicitCastExpr 'long double (*)(const char *) noexcept' <BuiltinFnToFnPtr>
| |   | | |     | `-DeclRefExpr '<builtin fn type>' Function 0x7fa33287a3f8 '__builtin_nanl' 'long double (const char *) noexcept'
| |   | | |     `-ImplicitCastExpr 'const char *' <ArrayToPointerDecay>
| |   | | |       `-StringLiteral 'const char [1]' lvalue ""
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr 'long double'
| |   | | |     |-ImplicitCastExpr 'long double (*)(const char *) noexcept' <BuiltinFnToFnPtr>
| |   | | |     | `-DeclRefExpr '<builtin fn type>' Function 0x7fa33287a700 '__builtin_nansl' 'long double (const char *) noexcept'
| |   | | |     `-ImplicitCastExpr 'const char *' <ArrayToPointerDecay>
| |   | | |       `-StringLiteral 'const char [1]' lvalue ""
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::__libcpp_numeric_limits<long double, true>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt :160:29>
| |   | | |   `-FloatingLiteral 'long double' 0.000000e+00
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:431:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' true
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-CXXBoolLiteralExpr '_Bool' false
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DeclRefExpr 'enum std::__1::float_round_style' EnumConstant 0x7fa3338bf030 'round_to_nearest' 'enum std::__1::float_round_style'
| |   |-ClassTemplateDecl numeric_limits
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | `-CXXRecordDecl class numeric_limits definition
| |   |   |-private '__libcpp_numeric_limits<typename remove_cv<_Tp>::type>'
| |   |   |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   |   |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:442:1, > implicit class numeric_limits
| |   |   |-TypedefDecl referenced __base '__libcpp_numeric_limits<typename remove_cv<_Tp>::type>'
| |   |   | `-TemplateSpecializationType '__libcpp_numeric_limits<typename remove_cv<_Tp>::type>' dependent __libcpp_numeric_limits
| |   |   |   `-TemplateArgument type 'typename remove_cv<_Tp>::type'
| |   |   |-TypedefDecl referenced type 'typename __base::type'
| |   |   | `-DependentNameType 'typename __base::type' dependent
| |   |   |-AccessSpecDecl public
| |   |   |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:449:99> constexpr min 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-CXXMethodDecl constexpr max 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-CXXMethodDecl constexpr lowest 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:453:5, > digits 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl digits10 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl max_digits10 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl is_integer 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl radix 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:460:107> constexpr epsilon 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-CXXMethodDecl constexpr round_error 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:463:5, > min_exponent 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl min_exponent10 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl max_exponent 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl max_exponent10 'const int' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl has_infinity 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:473:109> constexpr infinity 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-CXXMethodDecl constexpr quiet_NaN 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-CXXMethodDecl constexpr signaling_NaN 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-CXXMethodDecl constexpr denorm_min 'std::__1::numeric_limits::type (void) noexcept' static
| |   |   | |-CompoundStmt
| |   |   | | `-ReturnStmt
| |   |   | |   `-CallExpr '<dependent type>'
| |   |   | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   |   | `-VisibilityAttr Hidden
| |   |   |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:478:5, > is_iec559 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl traps 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   |   | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |   `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287b6f0 is_specialized 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287bc70 digits 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287bd60 digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287be50 max_digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287bf38 is_signed 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c020 is_integer 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c108 is_exact 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c1f8 radix 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c578 min_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c668 min_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c758 max_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c848 max_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287c930 has_infinity 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287ca18 has_quiet_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287cb00 has_signaling_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287cbe8 has_denorm 'const enum std::__1::float_denorm_style' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287ccd0 has_denorm_loss 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287d2d8 is_iec559 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287d3c0 is_bounded 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287d4a8 is_modulo 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287d590 traps 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287d678 tinyness_before 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa33287aa70 prev 0x7fa33287d760 round_style 'const enum std::__1::float_round_style' constexpr
| |   |-ClassTemplatePartialSpecializationDecl class numeric_limits definition
| |   | |-private 'numeric_limits<_Tp>'
| |   | |-TemplateArgument type 'const type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:535:1, > implicit class numeric_limits
| |   | |-TypedefDecl referenced __base 'numeric_limits<_Tp>'
| |   | | `-TemplateSpecializationType 'numeric_limits<_Tp>' dependent numeric_limits
| |   | |   `-TemplateArgument type '_Tp'
| |   | |-TypedefDecl referenced type '_Tp'
| |   | | `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Tp'
| |   | |-AccessSpecDecl public
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:542:99> constexpr min 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr max 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:546:5, > digits 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl digits10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_digits10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_integer 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl radix 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:553:107> constexpr epsilon 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:556:5, > min_exponent 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl min_exponent10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_exponent 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_exponent10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_infinity 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:566:109> constexpr infinity 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::numeric_limits<const type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:571:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332883280 is_specialized 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332883800 digits 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa3328838f0 digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa3328839e0 max_digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332883ac8 is_signed 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332883bb0 is_integer 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332883c98 is_exact 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332883d88 radix 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332884118 min_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332884208 min_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa3328842f8 max_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa3328843e8 max_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa3328844d0 has_infinity 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa3328845b8 has_quiet_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa3328846a0 has_signaling_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332884788 has_denorm 'const enum std::__1::float_denorm_style' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332884870 has_denorm_loss 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332884e78 is_iec559 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332884f60 is_bounded 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332885048 is_modulo 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332885130 traps 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332885218 tinyness_before 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa332882d08 prev 0x7fa332885300 round_style 'const enum std::__1::float_round_style' constexpr
| |   |-ClassTemplatePartialSpecializationDecl class numeric_limits definition
| |   | |-private 'numeric_limits<_Tp>'
| |   | |-TemplateArgument type 'volatile type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:628:1, > implicit class numeric_limits
| |   | |-TypedefDecl referenced __base 'numeric_limits<_Tp>'
| |   | | `-TemplateSpecializationType 'numeric_limits<_Tp>' dependent numeric_limits
| |   | |   `-TemplateArgument type '_Tp'
| |   | |-TypedefDecl referenced type '_Tp'
| |   | | `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Tp'
| |   | |-AccessSpecDecl public
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:635:99> constexpr min 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr max 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:639:5, > digits 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl digits10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_digits10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_integer 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl radix 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:646:107> constexpr epsilon 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:649:5, > min_exponent 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl min_exponent10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_exponent 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_exponent10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_infinity 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:659:109> constexpr infinity 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::numeric_limits<volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:664:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa332889e38 is_specialized 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288a3c0 digits 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288a4b0 digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288a5a0 max_digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288a688 is_signed 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288a770 is_integer 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288a858 is_exact 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288a948 radix 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288acc8 min_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288adb8 min_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288aea8 max_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288af98 max_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288b080 has_infinity 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288b168 has_quiet_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288b250 has_signaling_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288b338 has_denorm 'const enum std::__1::float_denorm_style' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288b420 has_denorm_loss 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288ba28 is_iec559 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288bb10 is_bounded 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288bbf8 is_modulo 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288bce0 traps 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288be00 tinyness_before 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328898b8 prev 0x7fa33288bee8 round_style 'const enum std::__1::float_round_style' constexpr
| |   |-ClassTemplatePartialSpecializationDecl class numeric_limits definition
| |   | |-private 'numeric_limits<_Tp>'
| |   | |-TemplateArgument type 'const volatile type-parameter-0-0'
| |   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _Tp
| |   | |-TypeVisibilityAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:678:52, > Default
| |   | |-CXXRecordDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:721:1, > implicit class numeric_limits
| |   | |-TypedefDecl referenced __base 'numeric_limits<_Tp>'
| |   | | `-TemplateSpecializationType 'numeric_limits<_Tp>' dependent numeric_limits
| |   | |   `-TemplateArgument type '_Tp'
| |   | |-TypedefDecl referenced type '_Tp'
| |   | | `-TemplateTypeParmType '_Tp' dependent depth 0 index 0
| |   | |   `-TemplateTypeParm '_Tp'
| |   | |-AccessSpecDecl public
| |   | |-VarDecl is_specialized 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:728:99> constexpr min 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr max 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr lowest 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:732:5, > digits 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl digits10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_digits10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_signed 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_integer 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_exact 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl radix 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:739:107> constexpr epsilon 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr round_error 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:742:5, > min_exponent 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl min_exponent10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_exponent 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl max_exponent10 'const int' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_infinity 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_quiet_NaN 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_signaling_NaN 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_denorm 'const enum std::__1::float_denorm_style' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl has_denorm_loss 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-CXXMethodDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:35, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:752:109> constexpr infinity 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr quiet_NaN 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr signaling_NaN 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-CXXMethodDecl constexpr denorm_min 'std::__1::numeric_limits<const volatile type-parameter-0-0>::type (void) noexcept' static
| |   | | |-CompoundStmt
| |   | | | `-ReturnStmt
| |   | | |   `-CallExpr '<dependent type>'
| |   | | |     `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   | | `-VisibilityAttr Hidden
| |   | |-VarDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:757:5, > is_iec559 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_bounded 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl is_modulo 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl traps 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |-VarDecl tinyness_before 'const _Bool' static constexpr cinit
| |   | | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | `-VarDecl round_style 'const enum std::__1::float_round_style' static constexpr cinit
| |   |   `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332890a30 is_specialized 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332890fb0 digits 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa3328910a0 digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891190 max_digits10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891278 is_signed 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891360 is_integer 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891448 is_exact 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891538 radix 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa3328918b8 min_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa3328919a8 min_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891a98 max_exponent 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891b88 max_exponent10 'const int' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891c70 has_infinity 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891d58 has_quiet_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891e50 has_signaling_NaN 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332891f38 has_denorm 'const enum std::__1::float_denorm_style' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332892020 has_denorm_loss 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332892628 is_iec559 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa332892710 is_bounded 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa3328927f8 is_modulo 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa3328928e0 traps 'const _Bool' constexpr
| |   |-VarDecl parent 0x7fa3328904b8 prev 0x7fa3328929c8 tinyness_before 'const _Bool' constexpr
| |   `-VarDecl parent 0x7fa3328904b8 prev 0x7fa332892ab0 round_style 'const enum std::__1::float_round_style' constexpr
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:316:1, > __libcpp_signbit
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:322:1> __libcpp_signbit '_Bool (_A1) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   |     `-ParenExpr 'int'
| |   |       `-ConditionalOperator 'int'
| |   |         |-BinaryOperator '_Bool' '=='
| |   |         | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |         | | `-ParenExpr '_A1' lvalue
| |   |         | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:321:20> '_A1' lvalue ParmVar 0x7fa332896f80 '__lcpp_x' '_A1'
| |   |         | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:184:20, > 'unsigned long' sizeof 'float'
| |   |         |-CallExpr 'int'
| |   |         | |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| |   |         | | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa3330d5668 '__inline_signbitf' 'int (float)'
| |   |         | `-CStyleCastExpr 'float' <Dependent>
| |   |         |   `-ParenExpr '_A1' lvalue
| |   |         |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:321:20> '_A1' lvalue ParmVar 0x7fa332896f80 '__lcpp_x' '_A1'
| |   |         `-ConditionalOperator </usr/include/math.h:185:7, > 'int'
| |   |           |-BinaryOperator '_Bool' '=='
| |   |           | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |           | | `-ParenExpr '_A1' lvalue
| |   |           | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:321:20> '_A1' lvalue ParmVar 0x7fa332896f80 '__lcpp_x' '_A1'
| |   |           | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:185:20, > 'unsigned long' sizeof 'double'
| |   |           |-CallExpr 'int'
| |   |           | |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| |   |           | | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa3330d73b0 '__inline_signbitd' 'int (double)'
| |   |           | `-CStyleCastExpr 'double' <Dependent>
| |   |           |   `-ParenExpr '_A1' lvalue
| |   |           |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:321:20> '_A1' lvalue ParmVar 0x7fa332896f80 '__lcpp_x' '_A1'
| |   |           `-CallExpr </usr/include/math.h:186:37, > 'int'
| |   |             |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| |   |             | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa3330d9a88 '__inline_signbitl' 'int (long double)'
| |   |             `-CStyleCastExpr 'long double' <Dependent>
| |   |               `-ParenExpr '_A1' lvalue
| |   |                 `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:321:20> '_A1' lvalue ParmVar 0x7fa332896f80 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:326:1, > signbit
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl signbit 'typename std::enable_if<std::is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_signbit' 0x7fa332897120
| |   |     `-CStyleCastExpr 'typename std::__promote<_A1>::type' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa332897cc0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:334:1, > signbit
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl signbit 'typename std::enable_if<std::is_integral<_A1>::value && std::is_signed<_A1>::value, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-BinaryOperator '<dependent type>' '<'
| |   |     |-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3328987e0 '__lcpp_x' '_A1'
| |   |     `-IntegerLiteral 'int' 0
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:341:1, > signbit
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl signbit 'typename std::enable_if<std::is_integral<_A1>::value && !std::is_signed<_A1>::value, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CXXBoolLiteralExpr '_Bool' false
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:378:1, > __libcpp_fpclassify
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:384:1> __libcpp_fpclassify 'int (_A1) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-ParenExpr 'int'
| |   |     `-ConditionalOperator 'int'
| |   |       |-BinaryOperator '_Bool' '=='
| |   |       | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |       | | `-ParenExpr '_A1' lvalue
| |   |       | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:383:23> '_A1' lvalue ParmVar 0x7fa3328993a0 '__lcpp_x' '_A1'
| |   |       | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:140:20, > 'unsigned long' sizeof 'float'
| |   |       |-CallExpr 'int'
| |   |       | |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| |   |       | | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa33302f398 '__fpclassifyf' 'int (float)'
| |   |       | `-CStyleCastExpr 'float' <Dependent>
| |   |       |   `-ParenExpr '_A1' lvalue
| |   |       |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:383:23> '_A1' lvalue ParmVar 0x7fa3328993a0 '__lcpp_x' '_A1'
| |   |       `-ConditionalOperator </usr/include/math.h:141:7, > 'int'
| |   |         |-BinaryOperator '_Bool' '=='
| |   |         | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |         | | `-ParenExpr '_A1' lvalue
| |   |         | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:383:23> '_A1' lvalue ParmVar 0x7fa3328993a0 '__lcpp_x' '_A1'
| |   |         | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:141:20, > 'unsigned long' sizeof 'double'
| |   |         |-CallExpr 'int'
| |   |         | |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| |   |         | | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa33302f518 '__fpclassifyd' 'int (double)'
| |   |         | `-CStyleCastExpr 'double' <Dependent>
| |   |         |   `-ParenExpr '_A1' lvalue
| |   |         |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:383:23> '_A1' lvalue ParmVar 0x7fa3328993a0 '__lcpp_x' '_A1'
| |   |         `-CallExpr </usr/include/math.h:142:37, > 'int'
| |   |           |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| |   |           | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa33302f698 '__fpclassifyl' 'int (long double)'
| |   |           `-CStyleCastExpr 'long double' <Dependent>
| |   |             `-ParenExpr '_A1' lvalue
| |   |               `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:383:23> '_A1' lvalue ParmVar 0x7fa3328993a0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:388:1, > fpclassify
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl fpclassify 'typename std::enable_if<std::is_floating_point<_A1>::value, int>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_fpclassify' 0x7fa332899548
| |   |     `-CStyleCastExpr 'typename std::__promote<_A1>::type' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33289a0b0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:396:1, > fpclassify
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl fpclassify 'typename std::enable_if<std::is_integral<_A1>::value, int>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-ConditionalOperator </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:400:10, /usr/include/math.h:77:25> 'int'
| |   |     |-BinaryOperator </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:400:10, > '<dependent type>' '=='
| |   |     | |-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33289a930 '__lcpp_x' '_A1'
| |   |     | `-IntegerLiteral 'int' 0
| |   |     |-IntegerLiteral </usr/include/math.h:76:25> 'int' 3
| |   |     `-IntegerLiteral 'int' 4
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:424:1, > __libcpp_isfinite
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:430:1> __libcpp_isfinite '_Bool (_A1) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   |     `-ParenExpr 'int'
| |   |       `-ConditionalOperator 'int'
| |   |         |-BinaryOperator '_Bool' '=='
| |   |         | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |         | | `-ParenExpr '_A1' lvalue
| |   |         | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:429:21> '_A1' lvalue ParmVar 0x7fa33289ad70 '__lcpp_x' '_A1'
| |   |         | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:169:20, > 'unsigned long' sizeof 'float'
| |   |         |-CallExpr 'int'
| |   |         | |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| |   |         | | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa3330d2390 '__inline_isfinitef' 'int (float)'
| |   |         | `-CStyleCastExpr 'float' <Dependent>
| |   |         |   `-ParenExpr '_A1' lvalue
| |   |         |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:429:21> '_A1' lvalue ParmVar 0x7fa33289ad70 '__lcpp_x' '_A1'
| |   |         `-ConditionalOperator </usr/include/math.h:170:7, > 'int'
| |   |           |-BinaryOperator '_Bool' '=='
| |   |           | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |           | | `-ParenExpr '_A1' lvalue
| |   |           | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:429:21> '_A1' lvalue ParmVar 0x7fa33289ad70 '__lcpp_x' '_A1'
| |   |           | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:170:20, > 'unsigned long' sizeof 'double'
| |   |           |-CallExpr 'int'
| |   |           | |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| |   |           | | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa3330d2c00 '__inline_isfinited' 'int (double)'
| |   |           | `-CStyleCastExpr 'double' <Dependent>
| |   |           |   `-ParenExpr '_A1' lvalue
| |   |           |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:429:21> '_A1' lvalue ParmVar 0x7fa33289ad70 '__lcpp_x' '_A1'
| |   |           `-CallExpr </usr/include/math.h:171:37, > 'int'
| |   |             |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| |   |             | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa3330d3900 '__inline_isfinitel' 'int (long double)'
| |   |             `-CStyleCastExpr 'long double' <Dependent>
| |   |               `-ParenExpr '_A1' lvalue
| |   |                 `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:429:21> '_A1' lvalue ParmVar 0x7fa33289ad70 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:434:1, > isfinite
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isfinite 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::numeric_limits<_A1>::has_infinity, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isfinite' 0x7fa33289aed0
| |   |     `-CStyleCastExpr 'typename std::__promote<_A1>::type' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33289bbd0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:444:1, > isfinite
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isfinite 'typename std::enable_if<std::is_arithmetic<_A1>::value && !std::numeric_limits<_A1>::has_infinity, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CXXBoolLiteralExpr '_Bool' true
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:458:1, > __libcpp_isinf
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:464:1> __libcpp_isinf '_Bool (_A1) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   |     `-ParenExpr 'int'
| |   |       `-ConditionalOperator 'int'
| |   |         |-BinaryOperator '_Bool' '=='
| |   |         | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |         | | `-ParenExpr '_A1' lvalue
| |   |         | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:463:18> '_A1' lvalue ParmVar 0x7fa33289d930 '__lcpp_x' '_A1'
| |   |         | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:174:20, > 'unsigned long' sizeof 'float'
| |   |         |-CallExpr 'int'
| |   |         | |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| |   |         | | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa3330d4170 '__inline_isinff' 'int (float)'
| |   |         | `-CStyleCastExpr 'float' <Dependent>
| |   |         |   `-ParenExpr '_A1' lvalue
| |   |         |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:463:18> '_A1' lvalue ParmVar 0x7fa33289d930 '__lcpp_x' '_A1'
| |   |         `-ConditionalOperator </usr/include/math.h:175:7, > 'int'
| |   |           |-BinaryOperator '_Bool' '=='
| |   |           | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |           | | `-ParenExpr '_A1' lvalue
| |   |           | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:463:18> '_A1' lvalue ParmVar 0x7fa33289d930 '__lcpp_x' '_A1'
| |   |           | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:175:20, > 'unsigned long' sizeof 'double'
| |   |           |-CallExpr 'int'
| |   |           | |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| |   |           | | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa3330d4490 '__inline_isinfd' 'int (double)'
| |   |           | `-CStyleCastExpr 'double' <Dependent>
| |   |           |   `-ParenExpr '_A1' lvalue
| |   |           |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:463:18> '_A1' lvalue ParmVar 0x7fa33289d930 '__lcpp_x' '_A1'
| |   |           `-CallExpr </usr/include/math.h:176:37, > 'int'
| |   |             |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| |   |             | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa3330d4bb0 '__inline_isinfl' 'int (long double)'
| |   |             `-CStyleCastExpr 'long double' <Dependent>
| |   |               `-ParenExpr '_A1' lvalue
| |   |                 `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:463:18> '_A1' lvalue ParmVar 0x7fa33289d930 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:468:1, > isinf
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isinf 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::numeric_limits<_A1>::has_infinity, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isinf' 0x7fa33289da90
| |   |     `-CStyleCastExpr 'typename std::__promote<_A1>::type' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33289e690 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:478:1, > isinf
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isinf 'typename std::enable_if<std::is_arithmetic<_A1>::value && !std::numeric_limits<_A1>::has_infinity, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CXXBoolLiteralExpr '_Bool' false
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:492:1, > __libcpp_isnan
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:498:1> __libcpp_isnan '_Bool (_A1) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   |     `-ParenExpr 'int'
| |   |       `-ConditionalOperator 'int'
| |   |         |-BinaryOperator '_Bool' '=='
| |   |         | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |         | | `-ParenExpr '_A1' lvalue
| |   |         | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:497:18> '_A1' lvalue ParmVar 0x7fa33289f2c0 '__lcpp_x' '_A1'
| |   |         | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:179:20, > 'unsigned long' sizeof 'float'
| |   |         |-CallExpr 'int'
| |   |         | |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| |   |         | | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa3330d4ed0 '__inline_isnanf' 'int (float)'
| |   |         | `-CStyleCastExpr 'float' <Dependent>
| |   |         |   `-ParenExpr '_A1' lvalue
| |   |         |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:497:18> '_A1' lvalue ParmVar 0x7fa33289f2c0 '__lcpp_x' '_A1'
| |   |         `-ConditionalOperator </usr/include/math.h:180:7, > 'int'
| |   |           |-BinaryOperator '_Bool' '=='
| |   |           | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |           | | `-ParenExpr '_A1' lvalue
| |   |           | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:497:18> '_A1' lvalue ParmVar 0x7fa33289f2c0 '__lcpp_x' '_A1'
| |   |           | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:180:20, > 'unsigned long' sizeof 'double'
| |   |           |-CallExpr 'int'
| |   |           | |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| |   |           | | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa3330d5158 '__inline_isnand' 'int (double)'
| |   |           | `-CStyleCastExpr 'double' <Dependent>
| |   |           |   `-ParenExpr '_A1' lvalue
| |   |           |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:497:18> '_A1' lvalue ParmVar 0x7fa33289f2c0 '__lcpp_x' '_A1'
| |   |           `-CallExpr </usr/include/math.h:181:37, > 'int'
| |   |             |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| |   |             | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa3330d53e0 '__inline_isnanl' 'int (long double)'
| |   |             `-CStyleCastExpr 'long double' <Dependent>
| |   |               `-ParenExpr '_A1' lvalue
| |   |                 `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:497:18> '_A1' lvalue ParmVar 0x7fa33289f2c0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:502:1, > isnan
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isnan 'typename std::enable_if<std::is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isnan' 0x7fa33289f420
| |   |     `-CStyleCastExpr 'typename std::__promote<_A1>::type' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33289fee0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:510:1, > isnan
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isnan 'typename std::enable_if<std::is_integral<_A1>::value, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CXXBoolLiteralExpr '_Bool' false
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:522:1, > __libcpp_isnormal
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:528:1> __libcpp_isnormal '_Bool (_A1) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-ImplicitCastExpr '_Bool' <IntegralToBoolean>
| |   |     `-ParenExpr 'int'
| |   |       `-ConditionalOperator 'int'
| |   |         |-BinaryOperator '_Bool' '=='
| |   |         | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |         | | `-ParenExpr '_A1' lvalue
| |   |         | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:527:21> '_A1' lvalue ParmVar 0x7fa3328a0a90 '__lcpp_x' '_A1'
| |   |         | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:164:20, > 'unsigned long' sizeof 'float'
| |   |         |-CallExpr 'int'
| |   |         | |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| |   |         | | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa3330db838 '__inline_isnormalf' 'int (float)'
| |   |         | `-CStyleCastExpr 'float' <Dependent>
| |   |         |   `-ParenExpr '_A1' lvalue
| |   |         |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:527:21> '_A1' lvalue ParmVar 0x7fa3328a0a90 '__lcpp_x' '_A1'
| |   |         `-ConditionalOperator </usr/include/math.h:165:7, > 'int'
| |   |           |-BinaryOperator '_Bool' '=='
| |   |           | |-UnaryExprOrTypeTraitExpr 'unsigned long' sizeof
| |   |           | | `-ParenExpr '_A1' lvalue
| |   |           | |   `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:527:21> '_A1' lvalue ParmVar 0x7fa3328a0a90 '__lcpp_x' '_A1'
| |   |           | `-UnaryExprOrTypeTraitExpr </usr/include/math.h:165:20, > 'unsigned long' sizeof 'double'
| |   |           |-CallExpr 'int'
| |   |           | |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| |   |           | | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa3330dc090 '__inline_isnormald' 'int (double)'
| |   |           | `-CStyleCastExpr 'double' <Dependent>
| |   |           |   `-ParenExpr '_A1' lvalue
| |   |           |     `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:527:21> '_A1' lvalue ParmVar 0x7fa3328a0a90 '__lcpp_x' '_A1'
| |   |           `-CallExpr </usr/include/math.h:166:37, > 'int'
| |   |             |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| |   |             | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa3330dc4d8 '__inline_isnormall' 'int (long double)'
| |   |             `-CStyleCastExpr 'long double' <Dependent>
| |   |               `-ParenExpr '_A1' lvalue
| |   |                 `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:527:21> '_A1' lvalue ParmVar 0x7fa3328a0a90 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:532:1, > isnormal
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isnormal 'typename std::enable_if<std::is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isnormal' 0x7fa3328a0bf0
| |   |     `-CStyleCastExpr 'typename std::__promote<_A1>::type' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3328a16d0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:540:1, > isnormal
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl isnormal 'typename std::enable_if<std::is_integral<_A1>::value, _Bool>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-BinaryOperator '<dependent type>' '!='
| |   |     |-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3328a1e60 '__lcpp_x' '_A1'
| |   |     `-IntegerLiteral 'int' 0
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:552:1, > __libcpp_isgreater
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:558:1> __libcpp_isgreater '_Bool (_A1, _A2) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa3328a2600 '__builtin_isgreater' 'int (...) noexcept'
| |   |     |-ParenExpr '_A1' lvalue
| |   |     | `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:557:22> '_A1' lvalue ParmVar 0x7fa3328a2268 '__lcpp_x' '_A1'
| |   |     `-ParenExpr </usr/include/math.h:557:49, > '_A2' lvalue
| |   |       `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:557:32> '_A2' lvalue ParmVar 0x7fa3328a22d8 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:562:1, > isgreater
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl isgreater 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, _Bool>::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isgreater' 0x7fa3328a2490
| |   |     |-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3328a2e30 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3328a2ea0 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:582:1, > __libcpp_isgreaterequal
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:588:1> __libcpp_isgreaterequal '_Bool (_A1, _A2) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa3328a39a8 '__builtin_isgreaterequal' 'int (...) noexcept'
| |   |     |-ParenExpr '_A1' lvalue
| |   |     | `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:587:27> '_A1' lvalue ParmVar 0x7fa3328a36b8 '__lcpp_x' '_A1'
| |   |     `-ParenExpr </usr/include/math.h:558:59, > '_A2' lvalue
| |   |       `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:587:37> '_A2' lvalue ParmVar 0x7fa3328a3728 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:592:1, > isgreaterequal
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl isgreaterequal 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, _Bool>::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isgreaterequal' 0x7fa3328a38a0
| |   |     |-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3328a40b0 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3328a4120 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:612:1, > __libcpp_isless
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:618:1> __libcpp_isless '_Bool (_A1, _A2) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa3328a4b18 '__builtin_isless' 'int (...) noexcept'
| |   |     |-ParenExpr '_A1' lvalue
| |   |     | `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:617:19> '_A1' lvalue ParmVar 0x7fa3328a4828 '__lcpp_x' '_A1'
| |   |     `-ParenExpr </usr/include/math.h:559:43, > '_A2' lvalue
| |   |       `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:617:29> '_A2' lvalue ParmVar 0x7fa3328a4898 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:622:1, > isless
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl isless 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, _Bool>::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isless' 0x7fa3328a4a10
| |   |     |-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33381ae40 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa33381aeb0 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:642:1, > __libcpp_islessequal
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:648:1> __libcpp_islessequal '_Bool (_A1, _A2) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa33381b8a8 '__builtin_islessequal' 'int (...) noexcept'
| |   |     |-ParenExpr '_A1' lvalue
| |   |     | `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:647:24> '_A1' lvalue ParmVar 0x7fa33381b5b8 '__lcpp_x' '_A1'
| |   |     `-ParenExpr </usr/include/math.h:560:53, > '_A2' lvalue
| |   |       `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:647:34> '_A2' lvalue ParmVar 0x7fa33381b628 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:652:1, > islessequal
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl islessequal 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, _Bool>::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_islessequal' 0x7fa33381b7a0
| |   |     |-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33381bfb0 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa33381c020 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:672:1, > __libcpp_islessgreater
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:678:1> __libcpp_islessgreater '_Bool (_A1, _A2) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa33381ca50 '__builtin_islessgreater' 'int (...) noexcept'
| |   |     |-ParenExpr '_A1' lvalue
| |   |     | `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:677:26> '_A1' lvalue ParmVar 0x7fa33381c728 '__lcpp_x' '_A1'
| |   |     `-ParenExpr </usr/include/math.h:561:57, > '_A2' lvalue
| |   |       `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:677:36> '_A2' lvalue ParmVar 0x7fa33381c798 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:682:1, > islessgreater
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl islessgreater 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, _Bool>::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_islessgreater' 0x7fa33381c910
| |   |     |-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33381d160 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa33381d1d0 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:702:1, > __libcpp_isunordered
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:708:1> __libcpp_isunordered '_Bool (_A1, _A2) noexcept'
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa33381dbc8 '__builtin_isunordered' 'int (...) noexcept'
| |   |     |-ParenExpr '_A1' lvalue
| |   |     | `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:707:24> '_A1' lvalue ParmVar 0x7fa33381d8d8 '__lcpp_x' '_A1'
| |   |     `-ParenExpr </usr/include/math.h:562:53, > '_A2' lvalue
| |   |       `-DeclRefExpr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:707:34> '_A2' lvalue ParmVar 0x7fa33381d948 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:712:1, > isunordered
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl isunordered 'typename std::enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, _Bool>::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = '__libcpp_isunordered' 0x7fa33381dac0
| |   |     |-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33381e2d0 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr 'type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa33381e340 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:731:1, > abs 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ea8f0 'fabsf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33381e950 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:735:1, > abs 'double (double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'double'
| | |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330eaa90 'fabs' 'double (double)'
| | |     `-ImplicitCastExpr 'double' <LValueToRValue>
| | |       `-DeclRefExpr 'double' lvalue ParmVar 0x7fa33381ec58 '__lcpp_x' 'double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:739:1, > abs 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330eac30 'fabsl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33381ef48 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:747:1, > acos 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330dc938 'acosf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33381f238 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:748:1, > acos 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330dcc78 'acosl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33381f528 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:751:1, > acos
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl acos 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330dcad8 'acos' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33381fbb0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:759:1, > asin 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330dce18 'asinf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338218c8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:760:1, > asin 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330dd1a0 'asinl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333821bb8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:763:1, > asin
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl asin 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330dd000 'asin' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333822190 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:771:1, > atan 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330dd340 'atanf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333822888 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:772:1, > atan 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330dd680 'atanl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333822ba8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:775:1, > atan
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl atan 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330dd4e0 'atan' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333823180 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:783:1, > atan2 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330dd8e8 'atan2f' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333823878 '__lcpp_y' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338238f0 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:784:1, > atan2 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330dde48 'atan2l' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333823c68 '__lcpp_y' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333823ce0 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:787:1, > atan2
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl atan2 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_y '_A1'
| |   |-ParmVarDecl referenced __lcpp_x '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'atan2' 0x7fa3330ddb98 0x7fa333823990 0x7fa333823d80 0x7fa333824950
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333824720 '__lcpp_y' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa333824790 '__lcpp_x' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:806:1, > ceil 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ed8a8 'ceilf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338252d0 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:807:1, > ceil 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330edbe8 'ceill' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338255c0 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:810:1, > ceil
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl ceil 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330eda48 'ceil' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333825ba0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:818:1, > cos 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330de830 'cosf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333826298 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:819:1, > cos 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330deb70 'cosl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333826588 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:822:1, > cos
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl cos 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330de9d0 'cos' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338d9990 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:830:1, > cosh 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e0d90 'coshf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338da088 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:831:1, > cosh 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e18f0 'coshl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338da378 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:834:1, > cosh
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl cosh 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e0f30 'cosh' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338da950 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:842:1, > exp 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e2450 'expf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338db048 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:843:1, > exp 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e2800 'expl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338db338 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:846:1, > exp
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl exp 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e25f0 'exp' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338db930 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:854:1, > fabs 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ea8f0 'fabsf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338dc028 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:855:1, > fabs 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330eac30 'fabsl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338dc318 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:858:1, > fabs
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl fabs 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330eaa90 'fabs' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338dc8f0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:866:1, > floor 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330edd88 'floorf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338dcfe8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:867:1, > floor 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ee0c8 'floorl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338dd2d8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:870:1, > floor
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl floor 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330edf28 'floor' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338dd8d0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:878:1, > fmod 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330f0d60 'fmodf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338ddfc8 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338de040 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:879:1, > fmod 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330f11b0 'fmodl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338de388 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338de400 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:882:1, > fmod
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl fmod 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'fmod' 0x7fa3330f0f88 0x7fa3338de0e0 0x7fa3338de4a0 0x7fa3338def40
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338ded50 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3338dedc0 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:901:1, > frexp 'float (float, int *) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_e 'int *'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, int *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, int *)' lvalue Function 0x7fa3330e7d88 'frexpf' 'float (float, int *)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338df800 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'int *' <LValueToRValue>
| | |       `-DeclRefExpr 'int *' lvalue ParmVar 0x7fa3338df878 '__lcpp_e' 'int *'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:902:1, > frexp 'long double (long double, int *) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_e 'int *'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, int *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, int *)' lvalue Function 0x7fa3330e82c8 'frexpl' 'long double (long double, int *)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338dfc18 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'int *' <LValueToRValue>
| | |       `-DeclRefExpr 'int *' lvalue ParmVar 0x7fa3338dfc90 '__lcpp_e' 'int *'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:905:1, > frexp
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl frexp 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1, int *) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_e 'int *'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double, int *)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double, int *)' lvalue Function 0x7fa3330e8028 'frexp' 'double (double, int *)'
| |   |     |-CStyleCastExpr 'double' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338e0320 '__lcpp_x' '_A1'
| |   |     `-ImplicitCastExpr 'int *' <LValueToRValue>
| |   |       `-DeclRefExpr 'int *' lvalue ParmVar 0x7fa3338e0398 '__lcpp_e' 'int *'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:913:1, > ldexp 'float (float, int) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_e 'int'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, int)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, int)' lvalue Function 0x7fa3330e6538 'ldexpf' 'float (float, int)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e0b60 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'int' <LValueToRValue>
| | |       `-DeclRefExpr 'int' lvalue ParmVar 0x7fa3338e0bd8 '__lcpp_e' 'int'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:914:1, > ldexp 'long double (long double, int) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_e 'int'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, int)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, int)' lvalue Function 0x7fa3330e7ab8 'ldexpl' 'long double (long double, int)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e0f48 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'int' <LValueToRValue>
| | |       `-DeclRefExpr 'int' lvalue ParmVar 0x7fa3338e0fc0 '__lcpp_e' 'int'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:917:1, > ldexp
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl ldexp 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1, int) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_e 'int'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double, int)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double, int)' lvalue Function 0x7fa3330e7800 'ldexp' 'double (double, int)'
| |   |     |-CStyleCastExpr 'double' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338e1620 '__lcpp_x' '_A1'
| |   |     `-ImplicitCastExpr 'int' <LValueToRValue>
| |   |       `-DeclRefExpr 'int' lvalue ParmVar 0x7fa3338e1698 '__lcpp_e' 'int'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:925:1, > log 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e3360 'logf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e1ea0 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:926:1, > log 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e36a0 'logl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e2190 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:929:1, > log
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl log 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e3500 'log' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338e2770 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:937:1, > log10 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e3890 'log10f' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e2e68 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:938:1, > log10 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e3bd0 'log10l' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e3158 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:941:1, > log10
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl log10 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e3a30 'log10' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338e3730 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:949:1, > modf 'float (float, float *) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float *'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float *)' lvalue Function 0x7fa3330e5d18 'modff' 'float (float, float *)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e3e68 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float *' <LValueToRValue>
| | |       `-DeclRefExpr 'float *' lvalue ParmVar 0x7fa3338e3ee0 '__lcpp_y' 'float *'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:950:1, > modf 'long double (long double, long double *) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double *'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double *)' lvalue Function 0x7fa3330e6298 'modfl' 'long double (long double, long double *)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e4288 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double *' <LValueToRValue>
| | |       `-DeclRefExpr 'long double *' lvalue ParmVar 0x7fa3338e4300 '__lcpp_y' 'long double *'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:956:1, > pow 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330eba28 'powf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e46a8 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e4720 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:957:1, > pow 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330ebe78 'powl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e4a68 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e4ae0 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:960:1, > pow
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl pow 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'pow' 0x7fa3330ebc50 0x7fa3338e47c0 0x7fa3338e4b80 0x7fa3338e5620
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338e5430 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3338e54a0 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:979:1, > sin 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ded10 'sinf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e5ec0 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:980:1, > sin 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330df050 'sinl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e61b0 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:983:1, > sin
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl sin 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330deeb0 'sin' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338e6790 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:991:1, > sinh 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e1a90 'sinhf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338e6e88 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:992:1, > sinh 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e1dd0 'sinhl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338e7178 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:995:1, > sinh
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl sinh 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e1c30 'sinh' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338e7750 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1003:1, > sqrt 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ec020 'sqrtf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338ea068 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1004:1, > sqrt 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ec360 'sqrtl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338ea358 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1007:1, > sqrt
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl sqrt 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ec1c0 'sqrt' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338ea930 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1015:1, > tan 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330df1f0 'tanf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338eb028 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1016:1, > tan 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330df530 'tanl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338eb318 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1019:1, > tan
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl tan 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330df390 'tan' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338eb8f0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1027:1, > tanh 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e1f70 'tanhf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338ec028 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1028:1, > tanh 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e22b0 'tanhl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338ec318 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1031:1, > tanh
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl tanh 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e2110 'tanh' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338ec8f0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1038:1, > acosh 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330df6d0 'acoshf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338ecfe8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1039:1, > acosh 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e0230 'acoshl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338ed2d8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1041:1, > acosh
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl acosh 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e0090 'acosh' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338ed8b0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1048:1, > asinh 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e03d0 'asinhf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338ee028 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1049:1, > asinh 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e0710 'asinhl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338ee318 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1051:1, > asinh
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl asinh 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e0570 'asinh' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338ee8f0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1058:1, > atanh 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e08b0 'atanhf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338eefe8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1059:1, > atanh 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e0bf0 'atanhl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338ef2d8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1061:1, > atanh
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl atanh 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e0a50 'atanh' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338ef8b0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1068:1, > cbrt 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330eadd0 'cbrtf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f0028 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1069:1, > cbrt 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330eb110 'cbrtl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f0318 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1071:1, > cbrt
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl cbrt 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330eaf70 'cbrt' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338f08f0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1078:1, > copysign 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330f2240 'copysignf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f0fe8 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f1060 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1082:1, > copysign 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330f2690 'copysignl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f13a8 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f1420 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1087:1, > copysign
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl copysign 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'copysign' 0x7fa3330f2468 0x7fa3338f1100 0x7fa3338f14c0 0x7fa3338f1f80
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338f1d90 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3338f1e00 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1105:1, > erf 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ec500 'erff' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f2820 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1106:1, > erf 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ec890 'erfl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f2b10 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1108:1, > erf
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl erf 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ec6a0 'erf' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338f30f0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1115:1, > erfc 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330eca30 'erfcf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f37e8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1116:1, > erfc 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ecd70 'erfcl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f4ae0 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1118:1, > erfc
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl erfc 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ecbd0 'erfc' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338f50c0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1125:1, > exp2 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e29a0 'exp2f' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f57b8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1126:1, > exp2 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e2ce0 'exp2l' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f5aa8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1128:1, > exp2
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl exp2 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e2b40 'exp2' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338f6080 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1135:1, > expm1 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e2e80 'expm1f' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f6778 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1136:1, > expm1 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e31c0 'expm1l' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f6a68 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1138:1, > expm1
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl expm1 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e3020 'expm1' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338f7040 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1145:1, > fdim 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330e4d68 'fdimf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f7738 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338f77b0 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1146:1, > fdim 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330e51b8 'fdiml' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f7af8 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338f7b70 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1148:1, > fdim
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl fdim 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'fdim' 0x7fa3330e4f90 0x7fa3338f7850 0x7fa3338f7c10 0x7fa3338f86b0
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338f84c0 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3338f8530 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1166:1, > fma 'float (float, float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-ParmVarDecl used __lcpp_z 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float, float)' lvalue Function 0x7fa3330f81a8 'fmaf' 'float (float, float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338faf70 '__lcpp_x' 'float'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338fafe8 '__lcpp_y' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338fb060 '__lcpp_z' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1167:1, > fma 'long double (long double, long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-ParmVarDecl used __lcpp_z 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double, long double)' lvalue Function 0x7fa3330e8888 'fmal' 'long double (long double, long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338fb428 '__lcpp_x' 'long double'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338fb4a0 '__lcpp_y' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338fb518 '__lcpp_z' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1169:1, > fma
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | |-TemplateTypeParmDecl referenced class depth 0 index 2 _A3
| | `-FunctionDecl fma 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value && std::is_arithmetic<_A3>::value, std::__promote<_A1, _A2, _A3> >::type (_A1, _A2, _A3) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-ParmVarDecl referenced __lcpp_z '_A3'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2, _A3>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2, _A3>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-BinaryOperator '<dependent type>' '&&'
| |   | |   |       | |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       | `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'fma' 0x7fa3330f84f8 0x7fa3338fb108 0x7fa3338fb5c0 0x7fa3338fc4d0
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2, _A3>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338fc210 '__lcpp_x' '_A1'
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2, _A3>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3338fc280 '__lcpp_y' '_A2'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2, _A3>::type' <Dependent>
| |   |       `-DeclRefExpr '_A3' lvalue ParmVar 0x7fa3338fc2f0 '__lcpp_z' '_A3'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1189:1, > fmax 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330e53e0 'fmaxf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338fd108 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338fd180 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1190:1, > fmax 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330f7838 'fmaxl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338fd4c8 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338fd540 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1192:1, > fmax
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl fmax 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'fmax' 0x7fa3330e5608 0x7fa3338fd220 0x7fa3338fd5e0 0x7fa3338fe080
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338fde90 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3338fdf00 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1210:1, > fmin 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330f7a60 'fminf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338fe920 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3338fe998 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1211:1, > fmin 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330f7eb0 'fminl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338fece8 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3338fed60 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1213:1, > fmin
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl fmin 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'fmin' 0x7fa3330f7c88 0x7fa3338fea40 0x7fa3338fee00 0x7fa3338ff8a0
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3338ff6b0 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa3338ff720 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1231:1, > hypot 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330eb330 'hypotf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333900140 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3339001b8 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1232:1, > hypot 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330eb800 'hypotl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333900500 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333900578 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1234:1, > hypot
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl hypot 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'hypot' 0x7fa3330eb558 0x7fa333900258 0x7fa333900618 0x7fa333901100
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333900f10 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa333900f80 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1252:1, > ilogb 'int (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'int'
| | |     |-ImplicitCastExpr 'int (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'int (float)' lvalue Function 0x7fa3330e84a0 'ilogbf' 'int (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3339019a0 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1253:1, > ilogb 'int (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'int'
| | |     |-ImplicitCastExpr 'int (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'int (long double)' lvalue Function 0x7fa3330e9890 'ilogbl' 'int (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333901c90 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1255:1, > ilogb
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl ilogb 'typename std::enable_if<std::is_integral<_A1>::value, int>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'int'
| |   |     |-ImplicitCastExpr 'int (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'int (double)' lvalue Function 0x7fa3330e8678 'ilogb' 'int (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333902270 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1262:1, > lgamma 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ecf10 'lgammaf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333902c20 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1263:1, > lgamma 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ed230 'lgammal' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333902f10 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1265:1, > lgamma
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl lgamma 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ed0a0 'lgamma' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3339034f0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1272:1, > llrint 'long long (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long long'
| | |     |-ImplicitCastExpr 'long long (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long long (float)' lvalue Function 0x7fa3330efc88 'llrintf' 'long long (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333903be8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1273:1, > llrint 'long long (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long long'
| | |     |-ImplicitCastExpr 'long long (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long long (long double)' lvalue Function 0x7fa3330f00c8 'llrintl' 'long long (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333903f08 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1275:1, > llrint
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl llrint 'typename std::enable_if<std::is_integral<_A1>::value, long long>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'long long'
| |   |     |-ImplicitCastExpr 'long long (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'long long (double)' lvalue Function 0x7fa3330efea8 'llrint' 'long long (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3339045c0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1282:1, > llround 'long long (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long long'
| | |     |-ImplicitCastExpr 'long long (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long long (float)' lvalue Function 0x7fa3330f02a8 'llroundf' 'long long (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333904fb0 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1283:1, > llround 'long long (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long long'
| | |     |-ImplicitCastExpr 'long long (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long long (long double)' lvalue Function 0x7fa3330f05e8 'llroundl' 'long long (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3339052a0 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1285:1, > llround
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl llround 'typename std::enable_if<std::is_integral<_A1>::value, long long>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'long long'
| |   |     |-ImplicitCastExpr 'long long (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'long long (double)' lvalue Function 0x7fa3330f0448 'llround' 'long long (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333905880 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1292:1, > log1p 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e4250 'log1pf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333905f78 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1293:1, > log1p 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e4590 'log1pl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333906268 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1295:1, > log1p
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl log1p 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e43f0 'log1p' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333906840 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1302:1, > log2 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e3d70 'log2f' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333906f38 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1303:1, > log2 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e40b0 'log2l' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333907228 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1305:1, > log2
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl log2 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e3f10 'log2' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333907800 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1312:1, > logb 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330e4730 'logbf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333907ef8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1313:1, > logb 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330e5a90 'logbl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3339081e8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1315:1, > logb
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl logb 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330e58f0 'logb' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3339087c0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1322:1, > lrint 'long (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long'
| | |     |-ImplicitCastExpr 'long (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long (float)' lvalue Function 0x7fa3330eec68 'lrintf' 'long (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333909eb8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1323:1, > lrint 'long (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long'
| | |     |-ImplicitCastExpr 'long (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long (long double)' lvalue Function 0x7fa3330ef0a8 'lrintl' 'long (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390a1d8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1325:1, > lrint
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl lrint 'typename std::enable_if<std::is_integral<_A1>::value, long>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'long'
| |   |     |-ImplicitCastExpr 'long (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'long (double)' lvalue Function 0x7fa3330eee88 'lrint' 'long (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33390a890 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1332:1, > lround 'long (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long'
| | |     |-ImplicitCastExpr 'long (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long (float)' lvalue Function 0x7fa3330ef768 'lroundf' 'long (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33390b260 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1333:1, > lround 'long (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long'
| | |     |-ImplicitCastExpr 'long (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long (long double)' lvalue Function 0x7fa3330efaa8 'lroundl' 'long (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390b550 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1335:1, > lround
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl lround 'typename std::enable_if<std::is_integral<_A1>::value, long>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'long'
| |   |     |-ImplicitCastExpr 'long (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'long (double)' lvalue Function 0x7fa3330ef908 'lround' 'long (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33390bb30 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1344:1, > nearbyint 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ee268 'nearbyintf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33390c228 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1345:1, > nearbyint 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ee5a8 'nearbyintl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390c518 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1347:1, > nearbyint
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl nearbyint 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ee408 'nearbyint' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33390caf0 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1354:1, > nextafter 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330f2f68 'nextafterf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33390d1e8 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33390d260 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1355:1, > nextafter 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330f33b8 'nextafterl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390d5a8 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390d620 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1357:1, > nextafter
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl nextafter 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'nextafter' 0x7fa3330f3190 0x7fa33390d300 0x7fa33390d6c0 0x7fa33390e160
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33390df70 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa33390dfe0 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1375:1, > nexttoward 'float (float, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, long double)' lvalue Function 0x7fa3330e48d8 'nexttowardf' 'float (float, long double)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33390ea00 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390ea78 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1376:1, > nexttoward 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330e4b40 'nexttowardl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390ede8 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390ee60 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1378:1, 7> nexttoward
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl nexttoward 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1, long double) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y 'long double'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double, long double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double, long double)' lvalue Function 0x7fa3330f3628 'nexttoward' 'double (double, long double)'
| |   |     |-CStyleCastExpr 'double' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa33390f490 '__lcpp_x' '_A1'
| |   |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| |   |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa33390f508 '__lcpp_y' 'long double'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1385:1, > remainder 'float (float, float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float)' lvalue Function 0x7fa3330f13d8 'remainderf' 'float (float, float)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33390fcd0 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa33390fd48 '__lcpp_y' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1386:1, > remainder 'long double (long double, long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double)' lvalue Function 0x7fa3330f1838 'remainderl' 'long double (long double, long double)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333910090 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333910108 '__lcpp_y' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1388:1, > remainder
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl remainder 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'remainder' 0x7fa3330f1600 0x7fa33390fde8 0x7fa3339101a8 0x7fa333910c50
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333910a60 '__lcpp_x' '_A1'
| |   |     `-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |       `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa333910ad0 '__lcpp_y' '_A2'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1406:1, > remquo 'float (float, float, int *) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'float'
| | |-ParmVarDecl used __lcpp_z 'int *'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, float, int *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, float, int *)' lvalue Function 0x7fa3330f1b28 'remquof' 'float (float, float, int *)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3339114f0 '__lcpp_x' 'float'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333911568 '__lcpp_y' 'float'
| | |     `-ImplicitCastExpr 'int *' <LValueToRValue>
| | |       `-DeclRefExpr 'int *' lvalue ParmVar 0x7fa3339115e0 '__lcpp_z' 'int *'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1407:1, > remquo 'long double (long double, long double, int *) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long double'
| | |-ParmVarDecl used __lcpp_z 'int *'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long double, int *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long double, int *)' lvalue Function 0x7fa3330f2068 'remquol' 'long double (long double, long double, int *)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333911a00 '__lcpp_x' 'long double'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333911a78 '__lcpp_y' 'long double'
| | |     `-ImplicitCastExpr 'int *' <LValueToRValue>
| | |       `-DeclRefExpr 'int *' lvalue ParmVar 0x7fa333911af0 '__lcpp_z' 'int *'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1409:1, > remquo
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | |-TemplateTypeParmDecl referenced class depth 0 index 1 _A2
| | `-FunctionDecl remquo 'typename std::__lazy_enable_if<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, std::__promote<_A1, _A2> >::type (_A1, _A2, int *) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y '_A2'
| |   |-ParmVarDecl referenced __lcpp_z 'int *'
| |   |-CompoundStmt
| |   | |-DeclStmt
| |   | | `-TypedefDecl referenced __result_type 'typename std::__promote<_A1, _A2>::type'
| |   | |   `-DependentNameType 'typename std::__promote<_A1, _A2>::type' dependent
| |   | |-DeclStmt
| |   | | `-StaticAssertDecl
| |   | |   |-ParenExpr '<dependent type>'
| |   | |   | `-UnaryOperator '<dependent type>' prefix '!'
| |   | |   |   `-ParenExpr '<dependent type>'
| |   | |   |     `-BinaryOperator '<dependent type>' '&&'
| |   | |   |       |-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   |       `-DependentScopeDeclRefExpr '<dependent type>' lvalue
| |   | |   `-StringLiteral 'const char [1]' lvalue ""
| |   | `-ReturnStmt
| |   |   `-CallExpr '<dependent type>'
| |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (no ADL) = 'remquo' 0x7fa3330f1dc8 0x7fa3339116d0 0x7fa333911be0 0x7fa3339127e0
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333912510 '__lcpp_x' '_A1'
| |   |     |-CStyleCastExpr '__result_type':'typename std::__promote<_A1, _A2>::type' <Dependent>
| |   |     | `-DeclRefExpr '_A2' lvalue ParmVar 0x7fa333912580 '__lcpp_y' '_A2'
| |   |     `-DeclRefExpr 'int *' lvalue ParmVar 0x7fa3339125f8 '__lcpp_z' 'int *'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1427:1, > rint 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ee748 'rintf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3339130b0 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1428:1, > rint 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330eea90 'rintl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3339133a0 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1430:1, > rint
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl rint 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ee8f0 'rint' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333913980 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1437:1, > round 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ef288 'roundf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333914078 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1438:1, > round 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ef5c8 'roundl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333914368 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1440:1, > round
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl round 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ef428 'round' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333914940 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1447:1, > scalbln 'float (float, long) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'long'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, long)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, long)' lvalue Function 0x7fa3330ea1a8 'scalblnf' 'float (float, long)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333915038 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'long' <LValueToRValue>
| | |       `-DeclRefExpr 'long' lvalue ParmVar 0x7fa3339150b0 '__lcpp_y' 'long'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1448:1, > scalbln 'long double (long double, long) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'long'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, long)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, long)' lvalue Function 0x7fa3330ea708 'scalblnl' 'long double (long double, long)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333915428 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'long' <LValueToRValue>
| | |       `-DeclRefExpr 'long' lvalue ParmVar 0x7fa3339154a0 '__lcpp_y' 'long'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1450:1, > scalbln
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl scalbln 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1, long) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y 'long'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double, long)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double, long)' lvalue Function 0x7fa3330ea458 'scalbln' 'double (double, long)'
| |   |     |-CStyleCastExpr 'double' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333915b30 '__lcpp_x' '_A1'
| |   |     `-ImplicitCastExpr 'long' <LValueToRValue>
| |   |       `-DeclRefExpr 'long' lvalue ParmVar 0x7fa333915ba8 '__lcpp_y' 'long'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1457:1, > scalbn 'float (float, int) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-ParmVarDecl used __lcpp_y 'int'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float, int)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float, int)' lvalue Function 0x7fa3330e9ae8 'scalbnf' 'float (float, int)'
| | |     |-ImplicitCastExpr 'float' <LValueToRValue>
| | |     | `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333916370 '__lcpp_x' 'float'
| | |     `-ImplicitCastExpr 'int' <LValueToRValue>
| | |       `-DeclRefExpr 'int' lvalue ParmVar 0x7fa3339163e8 '__lcpp_y' 'int'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1458:1, > scalbn 'long double (long double, int) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-ParmVarDecl used __lcpp_y 'int'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double, int)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double, int)' lvalue Function 0x7fa3330e9f38 'scalbnl' 'long double (long double, int)'
| | |     |-ImplicitCastExpr 'long double' <LValueToRValue>
| | |     | `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333916730 '__lcpp_x' 'long double'
| | |     `-ImplicitCastExpr 'int' <LValueToRValue>
| | |       `-DeclRefExpr 'int' lvalue ParmVar 0x7fa3339167a8 '__lcpp_y' 'int'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1460:1, > scalbn
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl scalbn 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1, int) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-ParmVarDecl referenced __lcpp_y 'int'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double, int)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double, int)' lvalue Function 0x7fa3330e9d10 'scalbn' 'double (double, int)'
| |   |     |-CStyleCastExpr 'double' <Dependent>
| |   |     | `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333916de0 '__lcpp_x' '_A1'
| |   |     `-ImplicitCastExpr 'int' <LValueToRValue>
| |   |       `-DeclRefExpr 'int' lvalue ParmVar 0x7fa333916e58 '__lcpp_y' 'int'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1467:1, > tgamma 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330ed3c0 'tgammaf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa3339175b8 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1468:1, > tgamma 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330ed700 'tgammal' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa3339178a8 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1470:1, > tgamma
| | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
| | `-FunctionDecl tgamma 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
| |   |-ParmVarDecl referenced __lcpp_x '_A1'
| |   |-CompoundStmt
| |   | `-ReturnStmt
| |   |   `-CallExpr 'double'
| |   |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ed560 'tgamma' 'double (double)'
| |   |     `-CStyleCastExpr 'double' <Dependent>
| |   |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333917e80 '__lcpp_x' '_A1'
| |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| |   `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1477:1, > trunc 'float (float) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'float'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'float'
| | |     |-ImplicitCastExpr 'float (*)(float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'float (float)' lvalue Function 0x7fa3330f0800 'truncf' 'float (float)'
| | |     `-ImplicitCastExpr 'float' <LValueToRValue>
| | |       `-DeclRefExpr 'float' lvalue ParmVar 0x7fa333918578 '__lcpp_x' 'float'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| |-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1478:1, > trunc 'long double (long double) noexcept' inline
| | |-ParmVarDecl used __lcpp_x 'long double'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-CallExpr 'long double'
| | |     |-ImplicitCastExpr 'long double (*)(long double)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 'long double (long double)' lvalue Function 0x7fa3330f0b40 'truncl' 'long double (long double)'
| | |     `-ImplicitCastExpr 'long double' <LValueToRValue>
| | |       `-DeclRefExpr 'long double' lvalue ParmVar 0x7fa333918868 '__lcpp_x' 'long double'
| | |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
| | `-VisibilityAttr Hidden
| `-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/math.h:1480:1, > trunc
|   |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
|   `-FunctionDecl trunc 'typename std::enable_if<std::is_integral<_A1>::value, double>::type (_A1) noexcept' inline
|     |-ParmVarDecl referenced __lcpp_x '_A1'
|     |-CompoundStmt
|     | `-ReturnStmt
|     |   `-CallExpr 'double'
|     |     |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330f09a0 'trunc' 'double (double)'
|     |     `-CStyleCastExpr 'double' <Dependent>
|     |       `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333918e40 '__lcpp_x' '_A1'
|     |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:729:77> always_inline
|     `-VisibilityAttr Hidden
|-LinkageSpecDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/type_traits:439:12> implicit C
| `-FunctionDecl implicit referenced __builtin_addressof 'void *(void &) noexcept' extern
|   |-ParmVarDecl 'void &'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/limits:331:90> implicit C
| `-FunctionDecl implicit used __builtin_huge_valf 'float (void) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_nanf 'float (const char *) noexcept' extern
|   |-ParmVarDecl 'const char *'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_nansf 'float (const char *) noexcept' extern
|   |-ParmVarDecl 'const char *'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_huge_val 'double (void) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_nan 'double (const char *) noexcept' extern
|   |-ParmVarDecl 'const char *'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_nans 'double (const char *) noexcept' extern
|   |-ParmVarDecl 'const char *'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_huge_vall 'long double (void) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_nanl 'long double (const char *) noexcept' extern
|   |-ParmVarDecl 'const char *'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit used __builtin_nansl 'long double (const char *) noexcept' extern
|   |-ParmVarDecl 'const char *'
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl </usr/include/math.h:557:25> implicit C
| `-FunctionDecl implicit referenced __builtin_isgreater 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit referenced __builtin_isgreaterequal 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit referenced __builtin_isless 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit referenced __builtin_islessequal 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit referenced __builtin_islessgreater 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit referenced __builtin_isunordered 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-NamespaceDecl prev 0x7fa3338bed98 </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:438:37, > std
| |-original Namespace 0x7fa33302ee58 'std'
| `-NamespaceDecl prev 0x7fa3338bee00 <scratch space>:440:1 __1 inline
|   |-original Namespace 0x7fa33302eec0 '__1'
|   |-UsingDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:313:1, > ::signbit
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa332897e98 'signbit'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa332898990 'signbit'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3328991e0 'signbit'
|   |-UsingDecl ::fpclassify
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33289a260 'fpclassify'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33289aae0 'fpclassify'
|   |-UsingDecl ::isfinite
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33289bd80 'isfinite'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33289d770 'isfinite'
|   |-UsingDecl ::isinf
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33289e800 'isinf'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33289f100 'isinf'
|   |-UsingDecl ::isnan
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3328a0050 'isnan'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3328a08d0 'isnan'
|   |-UsingDecl ::isnormal
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3328a1840 'isnormal'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3328a1fd0 'isnormal'
|   |-UsingDecl ::isgreater
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3328a3060 'isgreater'
|   |-UsingDecl ::isgreaterequal
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3328a42a0 'isgreaterequal'
|   |-UsingDecl ::isless
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33381b030 'isless'
|   |-UsingDecl ::islessequal
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33381c1a0 'islessequal'
|   |-UsingDecl ::islessgreater
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33381d350 'islessgreater'
|   |-UsingDecl ::isunordered
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33381e4c0 'isunordered'
|   |-UsingDecl ::isunordered
|   |-UsingShadowDecl prev 0x7fa33391aef0 implicit FunctionTemplate 0x7fa33381e4c0 'isunordered'
|   |-UsingDecl ::float_t
|   |-UsingShadowDecl implicit Typedef 0x7fa33302f040 'float_t'
|   | `-<<<NULL>>>
|   |-UsingDecl ::double_t
|   |-UsingShadowDecl implicit Typedef 0x7fa33302f0b0 'double_t'
|   | `-<<<NULL>>>
|   |-UsingDecl ::abs
|   |-UsingShadowDecl implicit Function 0x7fa33381ea00 'abs' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33381ecf0 'abs' 'double (double) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33381efe0 'abs' 'long double (long double) noexcept'
|   |-UsingDecl ::acos
|   |-UsingShadowDecl implicit Function 0x7fa3330dcad8 'acos' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa33381f2d0 'acos' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33381f5c0 'acos' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33381fd60 'acos'
|   |-UsingDecl ::acosf
|   |-UsingShadowDecl implicit Function 0x7fa3330dc938 'acosf' 'float (float)'
|   |-UsingDecl ::asin
|   |-UsingShadowDecl implicit Function 0x7fa3330dd000 'asin' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333821960 'asin' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333821c50 'asin' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333822300 'asin'
|   |-UsingDecl ::asinf
|   |-UsingShadowDecl implicit Function 0x7fa3330dce18 'asinf' 'float (float)'
|   |-UsingDecl ::atan
|   |-UsingShadowDecl implicit Function 0x7fa3330dd4e0 'atan' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333822920 'atan' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333822c40 'atan' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338232f0 'atan'
|   |-UsingDecl ::atanf
|   |-UsingShadowDecl implicit Function 0x7fa3330dd340 'atanf' 'float (float)'
|   |-UsingDecl ::atan2
|   |-UsingShadowDecl implicit Function 0x7fa3330ddb98 'atan2' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa333823990 'atan2' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333823d80 'atan2' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333824950 'atan2'
|   |-UsingDecl ::atan2f
|   |-UsingShadowDecl implicit Function 0x7fa3330dd8e8 'atan2f' 'float (float, float)'
|   |-UsingDecl ::ceil
|   |-UsingShadowDecl implicit Function 0x7fa3330eda48 'ceil' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333825368 'ceil' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333825658 'ceil' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333825d10 'ceil'
|   |-UsingDecl ::ceilf
|   |-UsingShadowDecl implicit Function 0x7fa3330ed8a8 'ceilf' 'float (float)'
|   |-UsingDecl ::cos
|   |-UsingShadowDecl implicit Function 0x7fa3330de9d0 'cos' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333826330 'cos' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333826620 'cos' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338d9b00 'cos'
|   |-UsingDecl ::cosf
|   |-UsingShadowDecl implicit Function 0x7fa3330de830 'cosf' 'float (float)'
|   |-UsingDecl ::cosh
|   |-UsingShadowDecl implicit Function 0x7fa3330e0f30 'cosh' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338da120 'cosh' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338da410 'cosh' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338daac0 'cosh'
|   |-UsingDecl ::coshf
|   |-UsingShadowDecl implicit Function 0x7fa3330e0d90 'coshf' 'float (float)'
|   |-UsingDecl ::exp
|   |-UsingShadowDecl implicit Function 0x7fa3330e25f0 'exp' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338db0e0 'exp' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338db3d0 'exp' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338dbaa0 'exp'
|   |-UsingDecl ::expf
|   |-UsingShadowDecl implicit Function 0x7fa3330e2450 'expf' 'float (float)'
|   |-UsingDecl ::fabs
|   |-UsingShadowDecl implicit Function 0x7fa3330eaa90 'fabs' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338dc0c0 'fabs' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338dc3b0 'fabs' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338dca60 'fabs'
|   |-UsingDecl ::fabsf
|   |-UsingShadowDecl implicit Function 0x7fa3330ea8f0 'fabsf' 'float (float)'
|   |-UsingDecl ::floor
|   |-UsingShadowDecl implicit Function 0x7fa3330edf28 'floor' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338dd080 'floor' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338dd370 'floor' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338dda40 'floor'
|   |-UsingDecl ::floorf
|   |-UsingShadowDecl implicit Function 0x7fa3330edd88 'floorf' 'float (float)'
|   |-UsingDecl ::fmod
|   |-UsingShadowDecl implicit Function 0x7fa3330f0f88 'fmod' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338de0e0 'fmod' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338de4a0 'fmod' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338def40 'fmod'
|   |-UsingDecl ::fmodf
|   |-UsingShadowDecl implicit Function 0x7fa3330f0d60 'fmodf' 'float (float, float)'
|   |-UsingDecl ::frexp
|   |-UsingShadowDecl implicit Function 0x7fa3330e8028 'frexp' 'double (double, int *)'
|   |-UsingShadowDecl implicit Function 0x7fa3338df918 'frexp' 'float (float, int *) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338dfd30 'frexp' 'long double (long double, int *) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338e0560 'frexp'
|   |-UsingDecl ::frexpf
|   |-UsingShadowDecl implicit Function 0x7fa3330e7d88 'frexpf' 'float (float, int *)'
|   |-UsingDecl ::ldexp
|   |-UsingShadowDecl implicit Function 0x7fa3330e7800 'ldexp' 'double (double, int)'
|   |-UsingShadowDecl implicit Function 0x7fa3338e0c78 'ldexp' 'float (float, int) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338e1060 'ldexp' 'long double (long double, int) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338e1898 'ldexp'
|   |-UsingDecl ::ldexpf
|   |-UsingShadowDecl implicit Function 0x7fa3330e6538 'ldexpf' 'float (float, int)'
|   |-UsingDecl ::log
|   |-UsingShadowDecl implicit Function 0x7fa3330e3500 'log' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338e1f38 'log' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338e2228 'log' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338e28e0 'log'
|   |-UsingDecl ::logf
|   |-UsingShadowDecl implicit Function 0x7fa3330e3360 'logf' 'float (float)'
|   |-UsingDecl ::log10
|   |-UsingShadowDecl implicit Function 0x7fa3330e3a30 'log10' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338e2f00 'log10' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338e31f0 'log10' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338e38d8 'log10'
|   |-UsingDecl ::log10f
|   |-UsingShadowDecl implicit Function 0x7fa3330e3890 'log10f' 'float (float)'
|   |-UsingDecl ::modf
|   |-UsingShadowDecl implicit Function 0x7fa3330e5fd8 'modf' 'double (double, double *)'
|   |-UsingShadowDecl implicit Function 0x7fa3338e3f80 'modf' 'float (float, float *) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338e43a0 'modf' 'long double (long double, long double *) noexcept'
|   |-UsingDecl ::modff
|   |-UsingShadowDecl implicit Function 0x7fa3330e5d18 'modff' 'float (float, float *)'
|   |-UsingDecl ::pow
|   |-UsingShadowDecl implicit Function 0x7fa3330ebc50 'pow' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338e47c0 'pow' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338e4b80 'pow' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338e5620 'pow'
|   |-UsingDecl ::powf
|   |-UsingShadowDecl implicit Function 0x7fa3330eba28 'powf' 'float (float, float)'
|   |-UsingDecl ::sin
|   |-UsingShadowDecl implicit Function 0x7fa3330deeb0 'sin' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338e5f58 'sin' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338e6248 'sin' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338e6900 'sin'
|   |-UsingDecl ::sinf
|   |-UsingShadowDecl implicit Function 0x7fa3330ded10 'sinf' 'float (float)'
|   |-UsingDecl ::sinh
|   |-UsingShadowDecl implicit Function 0x7fa3330e1c30 'sinh' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338e6f20 'sinh' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338e7210 'sinh' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338e9ad8 'sinh'
|   |-UsingDecl ::sinhf
|   |-UsingShadowDecl implicit Function 0x7fa3330e1a90 'sinhf' 'float (float)'
|   |-UsingDecl ::sqrt
|   |-UsingShadowDecl implicit Function 0x7fa3330ec1c0 'sqrt' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338ea100 'sqrt' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338ea3f0 'sqrt' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338eaaa0 'sqrt'
|   |-UsingDecl ::sqrtf
|   |-UsingShadowDecl implicit Function 0x7fa3330ec020 'sqrtf' 'float (float)'
|   |-UsingDecl ::tan
|   |-UsingShadowDecl implicit Function 0x7fa3330df390 'tan' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338eb0c0 'tan' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338eb3b0 'tan' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338eba98 'tan'
|   |-UsingDecl ::tanf
|   |-UsingShadowDecl implicit Function 0x7fa3330df1f0 'tanf' 'float (float)'
|   |-UsingDecl ::tanh
|   |-UsingShadowDecl implicit Function 0x7fa3330e2110 'tanh' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338ec0c0 'tanh' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338ec3b0 'tanh' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338eca60 'tanh'
|   |-UsingDecl ::tanhf
|   |-UsingShadowDecl implicit Function 0x7fa3330e1f70 'tanhf' 'float (float)'
|   |-UsingDecl ::acosh
|   |-UsingShadowDecl implicit Function 0x7fa3330e0090 'acosh' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338ed080 'acosh' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338ed370 'acosh' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338eda98 'acosh'
|   |-UsingDecl ::acoshf
|   |-UsingShadowDecl implicit Function 0x7fa3330df6d0 'acoshf' 'float (float)'
|   |-UsingDecl ::asinh
|   |-UsingShadowDecl implicit Function 0x7fa3330e0570 'asinh' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338ee0c0 'asinh' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338ee3b0 'asinh' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338eea60 'asinh'
|   |-UsingDecl ::asinhf
|   |-UsingShadowDecl implicit Function 0x7fa3330e03d0 'asinhf' 'float (float)'
|   |-UsingDecl ::atanh
|   |-UsingShadowDecl implicit Function 0x7fa3330e0a50 'atanh' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338ef080 'atanh' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338ef370 'atanh' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338efa98 'atanh'
|   |-UsingDecl ::atanhf
|   |-UsingShadowDecl implicit Function 0x7fa3330e08b0 'atanhf' 'float (float)'
|   |-UsingDecl ::cbrt
|   |-UsingShadowDecl implicit Function 0x7fa3330eaf70 'cbrt' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338f00c0 'cbrt' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338f03b0 'cbrt' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338f0a60 'cbrt'
|   |-UsingDecl ::cbrtf
|   |-UsingShadowDecl implicit Function 0x7fa3330eadd0 'cbrtf' 'float (float)'
|   |-UsingDecl ::copysign
|   |-UsingShadowDecl implicit Function 0x7fa3330f2468 'copysign' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338f1100 'copysign' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338f14c0 'copysign' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338f1f80 'copysign'
|   |-UsingDecl ::copysignf
|   |-UsingShadowDecl implicit Function 0x7fa3330f2240 'copysignf' 'float (float, float)'
|   |-UsingDecl ::erf
|   |-UsingShadowDecl implicit Function 0x7fa3330ec6a0 'erf' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338f28b8 'erf' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338f2ba8 'erf' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338f3260 'erf'
|   |-UsingDecl ::erff
|   |-UsingShadowDecl implicit Function 0x7fa3330ec500 'erff' 'float (float)'
|   |-UsingDecl ::erfc
|   |-UsingShadowDecl implicit Function 0x7fa3330ecbd0 'erfc' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338f3880 'erfc' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338f4b78 'erfc' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338f5230 'erfc'
|   |-UsingDecl ::erfcf
|   |-UsingShadowDecl implicit Function 0x7fa3330eca30 'erfcf' 'float (float)'
|   |-UsingDecl ::exp2
|   |-UsingShadowDecl implicit Function 0x7fa3330e2b40 'exp2' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338f5850 'exp2' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338f5b40 'exp2' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338f61f0 'exp2'
|   |-UsingDecl ::exp2f
|   |-UsingShadowDecl implicit Function 0x7fa3330e29a0 'exp2f' 'float (float)'
|   |-UsingDecl ::expm1
|   |-UsingShadowDecl implicit Function 0x7fa3330e3020 'expm1' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338f6810 'expm1' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338f6b00 'expm1' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338f71b0 'expm1'
|   |-UsingDecl ::expm1f
|   |-UsingShadowDecl implicit Function 0x7fa3330e2e80 'expm1f' 'float (float)'
|   |-UsingDecl ::fdim
|   |-UsingShadowDecl implicit Function 0x7fa3330e4f90 'fdim' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338f7850 'fdim' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338f7c10 'fdim' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338f86b0 'fdim'
|   |-UsingDecl ::fdimf
|   |-UsingShadowDecl implicit Function 0x7fa3330e4d68 'fdimf' 'float (float, float)'
|   |-UsingDecl ::fmaf
|   |-UsingShadowDecl implicit Function 0x7fa3330f81a8 'fmaf' 'float (float, float, float)'
|   |-UsingDecl ::fma
|   |-UsingShadowDecl implicit Function 0x7fa3330f84f8 'fma' 'double (double, double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338fb108 'fma' 'float (float, float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338fb5c0 'fma' 'long double (long double, long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338fc4d0 'fma'
|   |-UsingDecl ::fmax
|   |-UsingShadowDecl implicit Function 0x7fa3330e5608 'fmax' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338fd220 'fmax' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338fd5e0 'fmax' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338fe080 'fmax'
|   |-UsingDecl ::fmaxf
|   |-UsingShadowDecl implicit Function 0x7fa3330e53e0 'fmaxf' 'float (float, float)'
|   |-UsingDecl ::fmin
|   |-UsingShadowDecl implicit Function 0x7fa3330f7c88 'fmin' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa3338fea40 'fmin' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3338fee00 'fmin' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3338ff8a0 'fmin'
|   |-UsingDecl ::fminf
|   |-UsingShadowDecl implicit Function 0x7fa3330f7a60 'fminf' 'float (float, float)'
|   |-UsingDecl ::hypot
|   |-UsingShadowDecl implicit Function 0x7fa3330eb558 'hypot' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa333900258 'hypot' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333900618 'hypot' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333901100 'hypot'
|   |-UsingDecl ::hypotf
|   |-UsingShadowDecl implicit Function 0x7fa3330eb330 'hypotf' 'float (float, float)'
|   |-UsingDecl ::ilogb
|   |-UsingShadowDecl implicit Function 0x7fa3330e8678 'ilogb' 'int (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333901a38 'ilogb' 'int (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333901d28 'ilogb' 'int (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3339023e0 'ilogb'
|   |-UsingDecl ::ilogbf
|   |-UsingShadowDecl implicit Function 0x7fa3330e84a0 'ilogbf' 'int (float)'
|   |-UsingDecl ::lgamma
|   |-UsingShadowDecl implicit Function 0x7fa3330ed0a0 'lgamma' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333902cb8 'lgamma' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333902fa8 'lgamma' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333903660 'lgamma'
|   |-UsingDecl ::lgammaf
|   |-UsingShadowDecl implicit Function 0x7fa3330ecf10 'lgammaf' 'float (float)'
|   |-UsingDecl ::llrint
|   |-UsingShadowDecl implicit Function 0x7fa3330efea8 'llrint' 'long long (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333903c80 'llrint' 'long long (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333903fa0 'llrint' 'long long (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333904770 'llrint'
|   |-UsingDecl ::llrintf
|   |-UsingShadowDecl implicit Function 0x7fa3330efc88 'llrintf' 'long long (float)'
|   |-UsingDecl ::llround
|   |-UsingShadowDecl implicit Function 0x7fa3330f0448 'llround' 'long long (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333905048 'llround' 'long long (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333905338 'llround' 'long long (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3339059f0 'llround'
|   |-UsingDecl ::llroundf
|   |-UsingShadowDecl implicit Function 0x7fa3330f02a8 'llroundf' 'long long (float)'
|   |-UsingDecl ::log1p
|   |-UsingShadowDecl implicit Function 0x7fa3330e43f0 'log1p' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333906010 'log1p' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333906300 'log1p' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3339069b0 'log1p'
|   |-UsingDecl ::log1pf
|   |-UsingShadowDecl implicit Function 0x7fa3330e4250 'log1pf' 'float (float)'
|   |-UsingDecl ::log2
|   |-UsingShadowDecl implicit Function 0x7fa3330e3f10 'log2' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333906fd0 'log2' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3339072c0 'log2' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333907970 'log2'
|   |-UsingDecl ::log2f
|   |-UsingShadowDecl implicit Function 0x7fa3330e3d70 'log2f' 'float (float)'
|   |-UsingDecl ::logb
|   |-UsingShadowDecl implicit Function 0x7fa3330e58f0 'logb' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333907f90 'logb' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333908280 'logb' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333908930 'logb'
|   |-UsingDecl ::logbf
|   |-UsingShadowDecl implicit Function 0x7fa3330e4730 'logbf' 'float (float)'
|   |-UsingDecl ::lrint
|   |-UsingShadowDecl implicit Function 0x7fa3330eee88 'lrint' 'long (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333909f50 'lrint' 'long (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33390a270 'lrint' 'long (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33390aa40 'lrint'
|   |-UsingDecl ::lrintf
|   |-UsingShadowDecl implicit Function 0x7fa3330eec68 'lrintf' 'long (float)'
|   |-UsingDecl ::lround
|   |-UsingShadowDecl implicit Function 0x7fa3330ef908 'lround' 'long (double)'
|   |-UsingShadowDecl implicit Function 0x7fa33390b2f8 'lround' 'long (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33390b5e8 'lround' 'long (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33390bca0 'lround'
|   |-UsingDecl ::lroundf
|   |-UsingShadowDecl implicit Function 0x7fa3330ef768 'lroundf' 'long (float)'
|   |-UsingDecl ::nan
|   |-UsingShadowDecl implicit Function 0x7fa3330f2ae8 'nan' 'double (const char *)'
|   |-UsingDecl ::nanf
|   |-UsingShadowDecl implicit Function 0x7fa3330f28c8 'nanf' 'float (const char *)'
|   |-UsingDecl ::nearbyint
|   |-UsingShadowDecl implicit Function 0x7fa3330ee408 'nearbyint' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa33390c2c0 'nearbyint' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33390c5b0 'nearbyint' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33390cc60 'nearbyint'
|   |-UsingDecl ::nearbyintf
|   |-UsingShadowDecl implicit Function 0x7fa3330ee268 'nearbyintf' 'float (float)'
|   |-UsingDecl ::nextafter
|   |-UsingShadowDecl implicit Function 0x7fa3330f3190 'nextafter' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa33390d300 'nextafter' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33390d6c0 'nextafter' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33390e160 'nextafter'
|   |-UsingDecl ::nextafterf
|   |-UsingShadowDecl implicit Function 0x7fa3330f2f68 'nextafterf' 'float (float, float)'
|   |-UsingDecl ::nexttoward
|   |-UsingShadowDecl implicit Function 0x7fa3330f3628 'nexttoward' 'double (double, long double)'
|   |-UsingShadowDecl implicit Function 0x7fa33390eb18 'nexttoward' 'float (float, long double) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa33390ef00 'nexttoward' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa33390f6d0 'nexttoward'
|   |-UsingDecl ::nexttowardf
|   |-UsingShadowDecl implicit Function 0x7fa3330e48d8 'nexttowardf' 'float (float, long double)'
|   |-UsingDecl ::remainder
|   |-UsingShadowDecl implicit Function 0x7fa3330f1600 'remainder' 'double (double, double)'
|   |-UsingShadowDecl implicit Function 0x7fa33390fde8 'remainder' 'float (float, float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa3339101a8 'remainder' 'long double (long double, long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333910c50 'remainder'
|   |-UsingDecl ::remainderf
|   |-UsingShadowDecl implicit Function 0x7fa3330f13d8 'remainderf' 'float (float, float)'
|   |-UsingDecl ::remquo
|   |-UsingShadowDecl implicit Function 0x7fa3330f1dc8 'remquo' 'double (double, double, int *)'
|   |-UsingShadowDecl implicit Function 0x7fa3339116d0 'remquo' 'float (float, float, int *) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333911be0 'remquo' 'long double (long double, long double, int *) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa3339127e0 'remquo'
|   |-UsingDecl ::remquof
|   |-UsingShadowDecl implicit Function 0x7fa3330f1b28 'remquof' 'float (float, float, int *)'
|   |-UsingDecl ::rint
|   |-UsingShadowDecl implicit Function 0x7fa3330ee8f0 'rint' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333913148 'rint' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333913438 'rint' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333913af0 'rint'
|   |-UsingDecl ::rintf
|   |-UsingShadowDecl implicit Function 0x7fa3330ee748 'rintf' 'float (float)'
|   |-UsingDecl ::round
|   |-UsingShadowDecl implicit Function 0x7fa3330ef428 'round' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333914110 'round' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333914400 'round' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333914ab0 'round'
|   |-UsingDecl ::roundf
|   |-UsingShadowDecl implicit Function 0x7fa3330ef288 'roundf' 'float (float)'
|   |-UsingDecl ::scalbln
|   |-UsingShadowDecl implicit Function 0x7fa3330ea458 'scalbln' 'double (double, long)'
|   |-UsingShadowDecl implicit Function 0x7fa333915150 'scalbln' 'float (float, long) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333915540 'scalbln' 'long double (long double, long) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333915d70 'scalbln'
|   |-UsingDecl ::scalblnf
|   |-UsingShadowDecl implicit Function 0x7fa3330ea1a8 'scalblnf' 'float (float, long)'
|   |-UsingDecl ::scalbn
|   |-UsingShadowDecl implicit Function 0x7fa3330e9d10 'scalbn' 'double (double, int)'
|   |-UsingShadowDecl implicit Function 0x7fa333916488 'scalbn' 'float (float, int) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333916848 'scalbn' 'long double (long double, int) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333916fe0 'scalbn'
|   |-UsingDecl ::scalbnf
|   |-UsingShadowDecl implicit Function 0x7fa3330e9ae8 'scalbnf' 'float (float, int)'
|   |-UsingDecl ::tgamma
|   |-UsingShadowDecl implicit Function 0x7fa3330ed560 'tgamma' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333917650 'tgamma' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333917940 'tgamma' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333917ff0 'tgamma'
|   |-UsingDecl ::tgammaf
|   |-UsingShadowDecl implicit Function 0x7fa3330ed3c0 'tgammaf' 'float (float)'
|   |-UsingDecl ::trunc
|   |-UsingShadowDecl implicit Function 0x7fa3330f09a0 'trunc' 'double (double)'
|   |-UsingShadowDecl implicit Function 0x7fa333918610 'trunc' 'float (float) noexcept'
|   |-UsingShadowDecl implicit Function 0x7fa333918900 'trunc' 'long double (long double) noexcept'
|   |-UsingShadowDecl implicit FunctionTemplate 0x7fa333918fb0 'trunc'
|   |-UsingDecl ::truncf
|   |-UsingShadowDecl implicit Function 0x7fa3330f0800 'truncf' 'float (float)'
|   |-UsingDecl ::acosl
|   |-UsingShadowDecl implicit Function 0x7fa3330dcc78 'acosl' 'long double (long double)'
|   |-UsingDecl ::asinl
|   |-UsingShadowDecl implicit Function 0x7fa3330dd1a0 'asinl' 'long double (long double)'
|   |-UsingDecl ::atanl
|   |-UsingShadowDecl implicit Function 0x7fa3330dd680 'atanl' 'long double (long double)'
|   |-UsingDecl ::atan2l
|   |-UsingShadowDecl implicit Function 0x7fa3330dde48 'atan2l' 'long double (long double, long double)'
|   |-UsingDecl ::ceill
|   |-UsingShadowDecl implicit Function 0x7fa3330edbe8 'ceill' 'long double (long double)'
|   |-UsingDecl ::cosl
|   |-UsingShadowDecl implicit Function 0x7fa3330deb70 'cosl' 'long double (long double)'
|   |-UsingDecl ::coshl
|   |-UsingShadowDecl implicit Function 0x7fa3330e18f0 'coshl' 'long double (long double)'
|   |-UsingDecl ::expl
|   |-UsingShadowDecl implicit Function 0x7fa3330e2800 'expl' 'long double (long double)'
|   |-UsingDecl ::fabsl
|   |-UsingShadowDecl implicit Function 0x7fa3330eac30 'fabsl' 'long double (long double)'
|   |-UsingDecl ::floorl
|   |-UsingShadowDecl implicit Function 0x7fa3330ee0c8 'floorl' 'long double (long double)'
|   |-UsingDecl ::fmodl
|   |-UsingShadowDecl implicit Function 0x7fa3330f11b0 'fmodl' 'long double (long double, long double)'
|   |-UsingDecl ::frexpl
|   |-UsingShadowDecl implicit Function 0x7fa3330e82c8 'frexpl' 'long double (long double, int *)'
|   |-UsingDecl ::ldexpl
|   |-UsingShadowDecl implicit Function 0x7fa3330e7ab8 'ldexpl' 'long double (long double, int)'
|   |-UsingDecl ::logl
|   |-UsingShadowDecl implicit Function 0x7fa3330e36a0 'logl' 'long double (long double)'
|   |-UsingDecl ::log10l
|   |-UsingShadowDecl implicit Function 0x7fa3330e3bd0 'log10l' 'long double (long double)'
|   |-UsingDecl ::modfl
|   |-UsingShadowDecl implicit Function 0x7fa3330e6298 'modfl' 'long double (long double, long double *)'
|   |-UsingDecl ::powl
|   |-UsingShadowDecl implicit Function 0x7fa3330ebe78 'powl' 'long double (long double, long double)'
|   |-UsingDecl ::sinl
|   |-UsingShadowDecl implicit Function 0x7fa3330df050 'sinl' 'long double (long double)'
|   |-UsingDecl ::sinhl
|   |-UsingShadowDecl implicit Function 0x7fa3330e1dd0 'sinhl' 'long double (long double)'
|   |-UsingDecl ::sqrtl
|   |-UsingShadowDecl implicit Function 0x7fa3330ec360 'sqrtl' 'long double (long double)'
|   |-UsingDecl ::tanl
|   |-UsingShadowDecl implicit Function 0x7fa3330df530 'tanl' 'long double (long double)'
|   |-UsingDecl ::tanhl
|   |-UsingShadowDecl implicit Function 0x7fa3330e22b0 'tanhl' 'long double (long double)'
|   |-UsingDecl ::acoshl
|   |-UsingShadowDecl implicit Function 0x7fa3330e0230 'acoshl' 'long double (long double)'
|   |-UsingDecl ::asinhl
|   |-UsingShadowDecl implicit Function 0x7fa3330e0710 'asinhl' 'long double (long double)'
|   |-UsingDecl ::atanhl
|   |-UsingShadowDecl implicit Function 0x7fa3330e0bf0 'atanhl' 'long double (long double)'
|   |-UsingDecl ::cbrtl
|   |-UsingShadowDecl implicit Function 0x7fa3330eb110 'cbrtl' 'long double (long double)'
|   |-UsingDecl ::copysignl
|   |-UsingShadowDecl implicit Function 0x7fa3330f2690 'copysignl' 'long double (long double, long double)'
|   |-UsingDecl ::erfl
|   |-UsingShadowDecl implicit Function 0x7fa3330ec890 'erfl' 'long double (long double)'
|   |-UsingDecl ::erfcl
|   |-UsingShadowDecl implicit Function 0x7fa3330ecd70 'erfcl' 'long double (long double)'
|   |-UsingDecl ::exp2l
|   |-UsingShadowDecl implicit Function 0x7fa3330e2ce0 'exp2l' 'long double (long double)'
|   |-UsingDecl ::expm1l
|   |-UsingShadowDecl implicit Function 0x7fa3330e31c0 'expm1l' 'long double (long double)'
|   |-UsingDecl ::fdiml
|   |-UsingShadowDecl implicit Function 0x7fa3330e51b8 'fdiml' 'long double (long double, long double)'
|   |-UsingDecl ::fmal
|   |-UsingShadowDecl implicit Function 0x7fa3330e8888 'fmal' 'long double (long double, long double, long double)'
|   |-UsingDecl ::fmaxl
|   |-UsingShadowDecl implicit Function 0x7fa3330f7838 'fmaxl' 'long double (long double, long double)'
|   |-UsingDecl ::fminl
|   |-UsingShadowDecl implicit Function 0x7fa3330f7eb0 'fminl' 'long double (long double, long double)'
|   |-UsingDecl ::hypotl
|   |-UsingShadowDecl implicit Function 0x7fa3330eb800 'hypotl' 'long double (long double, long double)'
|   |-UsingDecl ::ilogbl
|   |-UsingShadowDecl implicit Function 0x7fa3330e9890 'ilogbl' 'int (long double)'
|   |-UsingDecl ::lgammal
|   |-UsingShadowDecl implicit Function 0x7fa3330ed230 'lgammal' 'long double (long double)'
|   |-UsingDecl ::llrintl
|   |-UsingShadowDecl implicit Function 0x7fa3330f00c8 'llrintl' 'long long (long double)'
|   |-UsingDecl ::llroundl
|   |-UsingShadowDecl implicit Function 0x7fa3330f05e8 'llroundl' 'long long (long double)'
|   |-UsingDecl ::log1pl
|   |-UsingShadowDecl implicit Function 0x7fa3330e4590 'log1pl' 'long double (long double)'
|   |-UsingDecl ::log2l
|   |-UsingShadowDecl implicit Function 0x7fa3330e40b0 'log2l' 'long double (long double)'
|   |-UsingDecl ::logbl
|   |-UsingShadowDecl implicit Function 0x7fa3330e5a90 'logbl' 'long double (long double)'
|   |-UsingDecl ::lrintl
|   |-UsingShadowDecl implicit Function 0x7fa3330ef0a8 'lrintl' 'long (long double)'
|   |-UsingDecl ::lroundl
|   |-UsingShadowDecl implicit Function 0x7fa3330efaa8 'lroundl' 'long (long double)'
|   |-UsingDecl ::nanl
|   |-UsingShadowDecl implicit Function 0x7fa3330f2d08 'nanl' 'long double (const char *)'
|   |-UsingDecl ::nearbyintl
|   |-UsingShadowDecl implicit Function 0x7fa3330ee5a8 'nearbyintl' 'long double (long double)'
|   |-UsingDecl ::nextafterl
|   |-UsingShadowDecl implicit Function 0x7fa3330f33b8 'nextafterl' 'long double (long double, long double)'
|   |-UsingDecl ::nexttowardl
|   |-UsingShadowDecl implicit Function 0x7fa3330e4b40 'nexttowardl' 'long double (long double, long double)'
|   |-UsingDecl ::remainderl
|   |-UsingShadowDecl implicit Function 0x7fa3330f1838 'remainderl' 'long double (long double, long double)'
|   |-UsingDecl ::remquol
|   |-UsingShadowDecl implicit Function 0x7fa3330f2068 'remquol' 'long double (long double, long double, int *)'
|   |-UsingDecl ::rintl
|   |-UsingShadowDecl implicit Function 0x7fa3330eea90 'rintl' 'long double (long double)'
|   |-UsingDecl ::roundl
|   |-UsingShadowDecl implicit Function 0x7fa3330ef5c8 'roundl' 'long double (long double)'
|   |-UsingDecl ::scalblnl
|   |-UsingShadowDecl implicit Function 0x7fa3330ea708 'scalblnl' 'long double (long double, long)'
|   |-UsingDecl ::scalbnl
|   |-UsingShadowDecl implicit Function 0x7fa3330e9f38 'scalbnl' 'long double (long double, int)'
|   |-UsingDecl ::tgammal
|   |-UsingShadowDecl implicit Function 0x7fa3330ed700 'tgammal' 'long double (long double)'
|   |-UsingDecl ::truncl
|   |-UsingShadowDecl implicit Function 0x7fa3330f0b40 'truncl' 'long double (long double)'
|   |-FunctionTemplateDecl __libcpp_isnan
|   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
|   | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:559:1> constexpr __libcpp_isnan 'typename enable_if<is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept'
|   |   |-ParmVarDecl referenced __lcpp_x '_A1'
|   |   |-CompoundStmt
|   |   | `-ReturnStmt
|   |   |   `-CallExpr '<dependent type>'
|   |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa3339279e0 '__builtin_isnan' 'int (...) noexcept'
|   |   |     `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333927770 '__lcpp_x' '_A1'
|   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
|   |   `-VisibilityAttr Hidden
|   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:561:1, > __libcpp_isnan
|   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
|   | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:567:1> constexpr __libcpp_isnan 'typename enable_if<!is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept'
|   |   |-ParmVarDecl referenced __lcpp_x '_A1'
|   |   |-CompoundStmt
|   |   | `-ReturnStmt
|   |   |   `-CallExpr '<dependent type>'
|   |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = 'isnan' 0x7fa33391aa48 0x7fa33391aa00
|   |   |     `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333927f50 '__lcpp_x' '_A1'
|   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
|   |   `-VisibilityAttr Hidden
|   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:569:1, > __libcpp_isinf
|   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
|   | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:579:1> constexpr __libcpp_isinf 'typename enable_if<is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept'
|   |   |-ParmVarDecl referenced __lcpp_x '_A1'
|   |   |-CompoundStmt
|   |   | `-ReturnStmt
|   |   |   `-CallExpr '<dependent type>'
|   |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa333928820 '__builtin_isinf' 'int (...) noexcept'
|   |   |     `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa3339285b0 '__lcpp_x' '_A1'
|   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
|   |   `-VisibilityAttr Hidden
|   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:581:1, > __libcpp_isinf
|   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
|   | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:587:1> constexpr __libcpp_isinf 'typename enable_if<!is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept'
|   |   |-ParmVarDecl referenced __lcpp_x '_A1'
|   |   |-CompoundStmt
|   |   | `-ReturnStmt
|   |   |   `-CallExpr '<dependent type>'
|   |   |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = 'isinf' 0x7fa333919960 0x7fa333919918
|   |   |     `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333928cf0 '__lcpp_x' '_A1'
|   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
|   |   `-VisibilityAttr Hidden
|   |-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:589:1, > __libcpp_isfinite
|   | |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
|   | `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:599:1> constexpr __libcpp_isfinite 'typename enable_if<is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept'
|   |   |-ParmVarDecl referenced __lcpp_x '_A1'
|   |   |-CompoundStmt
|   |   | `-ReturnStmt
|   |   |   `-CallExpr '<dependent type>'
|   |   |     |-DeclRefExpr '<builtin fn type>' Function 0x7fa3339315a0 '__builtin_isfinite' 'int (...) noexcept'
|   |   |     `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333931330 '__lcpp_x' '_A1'
|   |   |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
|   |   `-VisibilityAttr Hidden
|   `-FunctionTemplateDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:601:1, > __libcpp_isfinite
|     |-TemplateTypeParmDecl referenced class depth 0 index 0 _A1
|     `-FunctionDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:32, /usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:607:1> constexpr __libcpp_isfinite 'typename enable_if<!is_floating_point<_A1>::value, _Bool>::type (_A1) noexcept'
|       |-ParmVarDecl referenced __lcpp_x '_A1'
|       |-CompoundStmt
|       | `-ReturnStmt
|       |   `-CallExpr '<dependent type>'
|       |     |-UnresolvedLookupExpr '<overloaded function type>' lvalue (ADL) = 'isfinite' 0x7fa333919878 0x7fa333919830
|       |     `-DeclRefExpr '_A1' lvalue ParmVar 0x7fa333931a70 '__lcpp_x' '_A1'
|       |-AlwaysInlineAttr </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/__config:737:74> always_inline
|       `-VisibilityAttr Hidden
|-LinkageSpecDecl </usr/local/Cellar/llvm/5.0.0/bin/../include/c++/v1/cmath:555:12> implicit C
| `-FunctionDecl implicit referenced __builtin_isnan 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit referenced __builtin_isinf 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-LinkageSpecDecl implicit C
| `-FunctionDecl implicit referenced __builtin_isfinite 'int (...) noexcept' extern
|   |-NoThrowAttr Implicit
|   `-ConstAttr Implicit
|-CXXRecordDecl referenced struct P1 definition
| |-CXXRecordDecl implicit struct P1
| |-FieldDecl referenced x 'double'
| |-CXXConstructorDecl implicit P1 'void (void) noexcept' inline default trivial
| |-CXXDestructorDecl implicit ~P1 'void (void)' inline default trivial noexcept-unevaluated 0x7fa333933648
| |-CXXConstructorDecl implicit constexpr P1 'void (const struct P1 &)' inline default trivial noexcept-unevaluated 0x7fa333933908
| | `-ParmVarDecl 'const struct P1 &'
| `-CXXConstructorDecl implicit constexpr P1 'void (struct P1 &&)' inline default trivial noexcept-unevaluated 0x7fa333933ac8
|   `-ParmVarDecl 'struct P1 &&'
|-CXXRecordDecl referenced struct P2 definition
| |-CXXRecordDecl implicit struct P2
| |-FieldDecl referenced y 'double'
| |-CXXConstructorDecl implicit P2 'void (void) noexcept' inline default trivial
| |-CXXDestructorDecl implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7fa333933828
| |-CXXConstructorDecl implicit constexpr P2 'void (const struct P2 &)' inline default trivial noexcept-unevaluated 0x7fa333933c58
| | `-ParmVarDecl 'const struct P2 &'
| `-CXXConstructorDecl implicit constexpr P2 'void (struct P2 &&)' inline default trivial noexcept-unevaluated 0x7fa333933e18
|   `-ParmVarDecl 'struct P2 &&'
|-CXXRecordDecl referenced struct P3 definition
| |-public 'struct P1'
| |-public 'struct P2'
| |-CXXRecordDecl implicit struct P3
| |-FieldDecl z 'double'
| |-CXXConstructorDecl implicit referenced P3 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl implicit constexpr P3 'void (const struct P3 &)' inline default trivial noexcept-unevaluated 0x7fa333933fa8
| | `-ParmVarDecl 'const struct P3 &'
| `-CXXConstructorDecl implicit constexpr P3 'void (struct P3 &&)' inline default trivial noexcept-unevaluated 0x7fa333934168
|   `-ParmVarDecl 'struct P3 &&'
|-FunctionDecl used func1 'double (const struct P1 &)'
| |-ParmVarDecl used p 'const struct P1 &'
| `-CompoundStmt
|   `-ReturnStmt
|     `-BinaryOperator 'double' '*'
|       |-ImplicitCastExpr 'double' <LValueToRValue>
|       | `-MemberExpr 'const double' lvalue .x 0x7fa333931f58
|       |   `-DeclRefExpr 'const struct P1' lvalue ParmVar 0x7fa3339324f8 'p' 'const struct P1 &'
|       `-ImplicitCastExpr 'double' <LValueToRValue>
|         `-MemberExpr 'const double' lvalue .x 0x7fa333931f58
|           `-DeclRefExpr 'const struct P1' lvalue ParmVar 0x7fa3339324f8 'p' 'const struct P1 &'
|-FunctionDecl used func2 'double (const struct P2 &)'
| |-ParmVarDecl used p 'const struct P2 &'
| `-CompoundStmt
|   `-ReturnStmt
|     `-BinaryOperator 'double' '*'
|       |-ImplicitCastExpr 'double' <LValueToRValue>
|       | `-MemberExpr 'const double' lvalue .y 0x7fa333932198
|       |   `-DeclRefExpr 'const struct P2' lvalue ParmVar 0x7fa3339327f8 'p' 'const struct P2 &'
|       `-ImplicitCastExpr 'double' <LValueToRValue>
|         `-MemberExpr 'const double' lvalue .y 0x7fa333932198
|           `-DeclRefExpr 'const struct P2' lvalue ParmVar 0x7fa3339327f8 'p' 'const struct P2 &'
|-FunctionDecl used func3 'double (const struct P3 &)'
| |-ParmVarDecl used p 'const struct P3 &'
| `-CompoundStmt
|   `-ReturnStmt
|     `-CallExpr 'double'
|       |-ImplicitCastExpr 'double (*)(double)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 'double (double)' lvalue Function 0x7fa3330ec1c0 'sqrt' 'double (double)' (UsingShadow 0x7fa33391da20 'sqrt')
|       `-BinaryOperator 'double' '+'
|         |-CallExpr 'double'
|         | |-ImplicitCastExpr 'double (*)(const struct P1 &)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 'double (const struct P1 &)' lvalue Function 0x7fa3339325c8 'func1' 'double (const struct P1 &)'
|         | `-ImplicitCastExpr 'const struct P1' lvalue <DerivedToBase (P1)>
|         |   `-DeclRefExpr 'const struct P3' lvalue ParmVar 0x7fa333932af8 'p' 'const struct P3 &'
|         `-CallExpr 'double'
|           |-ImplicitCastExpr 'double (*)(const struct P2 &)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 'double (const struct P2 &)' lvalue Function 0x7fa3339328c8 'func2' 'double (const struct P2 &)'
|           `-ImplicitCastExpr 'const struct P2' lvalue <DerivedToBase (P2)>
|             `-DeclRefExpr 'const struct P3' lvalue ParmVar 0x7fa333932af8 'p' 'const struct P3 &'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used p3 'struct P3' listinit
    |   `-CXXConstructExpr 'struct P3' 'void (void) noexcept' zeroing
    |-DeclStmt
    | `-VarDecl pv 'struct P2 *' cinit
    |   `-ImplicitCastExpr 'struct P2 *' <DerivedToBase (P2)>
    |     `-UnaryOperator 'struct P3 *' prefix '&'
    |       `-DeclRefExpr 'struct P3' lvalue Var 0x7fa3339333a8 'p3' 'struct P3'
    |-DeclStmt
    | `-VarDecl v 'double':'double' cinit
    |   `-CallExpr 'double'
    |     |-ImplicitCastExpr 'double (*)(const struct P3 &)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 'double (const struct P3 &)' lvalue Function 0x7fa333932bc8 'func3' 'double (const struct P3 &)'
    |     `-ImplicitCastExpr 'const struct P3' lvalue <NoOp>
    |       `-DeclRefExpr 'struct P3' lvalue Var 0x7fa3339333a8 'p3' 'struct P3'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

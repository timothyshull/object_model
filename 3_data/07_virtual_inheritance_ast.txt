TranslationUnitDecl 0x7f8ed4818cd0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8ed4819260 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8ed4818f40 '__int128'
|-TypedefDecl 0x7f8ed48192d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8ed4818f60 'unsigned __int128'
|-TypedefDecl 0x7f8ed4819618 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8ed48193c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f8ed4819328 '__NSConstantString_tag'
|-TypedefDecl 0x7f8ed48196b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8ed4819670 'char *'
|   `-BuiltinType 0x7f8ed4818d60 'char'
|-TypedefDecl 0x7f8ed484c200 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8ed4819990 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8ed48197a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f8ed4819708 '__va_list_tag'
|-CXXRecordDecl 0x7f8ed484c258 <object_model/3_data/07_virtual_inheritance.cpp:1:1, line:4:1> line:1:8 referenced struct P2 definition
| |-CXXRecordDecl 0x7f8ed484c378 <col:1, col:8> col:8 implicit struct P2
| |-FieldDecl 0x7f8ed484c428 <line:2:5, col:12> col:12 referenced x 'double'
| |-FieldDecl 0x7f8ed484c488 <line:3:5, col:12> col:12 referenced y 'double'
| |-CXXMethodDecl 0x7f8ed484c9c8 <line:1:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct P2 &(const struct P2 &)' inline default trivial noexcept-unevaluated 0x7f8ed484c9c8
| | `-ParmVarDecl 0x7f8ed484cae0 <col:8> col:8 'const struct P2 &'
| |-CXXMethodDecl 0x7f8ed484cb78 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct P2 &(struct P2 &&)' inline default trivial noexcept-unevaluated 0x7f8ed484cb78
| | `-ParmVarDecl 0x7f8ed484cc90 <col:8> col:8 'struct P2 &&'
| |-CXXDestructorDecl 0x7f8ed484cfd8 <col:8> col:8 implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed484cfd8
| |-CXXConstructorDecl 0x7f8ed4879668 <col:8> col:8 implicit used P2 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7f8ed487a4e0 <col:8>
| |-CXXConstructorDecl 0x7f8ed4879b28 <col:8> col:8 implicit constexpr P2 'void (const struct P2 &)' inline default trivial noexcept-unevaluated 0x7f8ed4879b28
| | `-ParmVarDecl 0x7f8ed4879c50 <col:8> col:8 'const struct P2 &'
| `-CXXConstructorDecl 0x7f8ed4879cb8 <col:8> col:8 implicit constexpr P2 'void (struct P2 &&)' inline default trivial noexcept-unevaluated 0x7f8ed4879cb8
|   `-ParmVarDecl 0x7f8ed4879e00 <col:8> col:8 'struct P2 &&'
|-CXXRecordDecl 0x7f8ed484c4f0 <line:6:1, line:8:1> line:6:8 referenced struct V definition
| |-virtual public 'struct P2'
| |-CXXRecordDecl 0x7f8ed484c670 <col:1, col:8> col:8 implicit referenced struct V
| |-FieldDecl 0x7f8ed484c748 <line:7:5, col:8> col:8 n 'struct V *'
| |-CXXMethodDecl 0x7f8ed484c7e8 <line:6:8, <invalid sloc>> col:8 implicit operator= 'struct V &(const struct V &)' inline default noexcept-unevaluated 0x7f8ed484c7e8
| | `-ParmVarDecl 0x7f8ed484c900 <col:8> col:8 'const struct V &'
| |-CXXMethodDecl 0x7f8ed484cd28 <col:8, <invalid sloc>> col:8 implicit operator= 'struct V &(struct V &&)' inline default noexcept-unevaluated 0x7f8ed484cd28
| | `-ParmVarDecl 0x7f8ed484ce40 <col:8> col:8 'struct V &&'
| |-CXXDestructorDecl 0x7f8ed484cec8 <col:8> col:8 implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed484cec8
| |-CXXConstructorDecl 0x7f8ed4879768 <col:8> col:8 implicit used V 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct P2'
| | | `-CXXConstructExpr 0x7f8ed487a650 <col:8> 'struct P2' 'void (void) noexcept'
| | `-CompoundStmt 0x7f8ed487a6c0 <col:8>
| |-CXXConstructorDecl 0x7f8ed4879ff8 <col:8> col:8 implicit V 'void (const struct V &)' inline default noexcept-unevaluated 0x7f8ed4879ff8
| | `-ParmVarDecl 0x7f8ed487a120 <col:8> col:8 'const struct V &'
| `-CXXConstructorDecl 0x7f8ed487a188 <col:8> col:8 implicit V 'void (struct V &&)' inline default noexcept-unevaluated 0x7f8ed487a188
|   `-ParmVarDecl 0x7f8ed487a2b0 <col:8> col:8 'struct V &&'
|-CXXRecordDecl 0x7f8ed484d0b8 <line:10:1, line:14:1> line:10:8 referenced struct P3 definition
| |-virtual public 'struct P2'
| |-CXXRecordDecl 0x7f8ed4877e30 <col:1, col:8> col:8 implicit referenced struct P3
| |-FieldDecl 0x7f8ed4877ee0 <line:11:5, col:12> col:12 referenced z 'double'
| |-CXXMethodDecl 0x7f8ed4878060 <line:13:5, col:34> col:10 operator+= 'void (const struct P3 &)'
| | `-ParmVarDecl 0x7f8ed4877f68 <col:21, col:31> col:31 rhs 'const struct P3 &'
| |-CXXMethodDecl 0x7f8ed4878128 <line:10:8, <invalid sloc>> col:8 implicit operator= 'struct P3 &(const struct P3 &)' inline default noexcept-unevaluated 0x7f8ed4878128
| | `-ParmVarDecl 0x7f8ed4878240 <col:8> col:8 'const struct P3 &'
| |-CXXMethodDecl 0x7f8ed48782d8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct P3 &(struct P3 &&)' inline default noexcept-unevaluated 0x7f8ed48782d8
| | `-ParmVarDecl 0x7f8ed48783f0 <col:8> col:8 'struct P3 &&'
| |-CXXDestructorDecl 0x7f8ed4878478 <col:8> col:8 implicit ~P3 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed4878478
| |-CXXConstructorDecl 0x7f8ed4879568 <col:8> col:8 implicit used P3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct P2'
| | | `-CXXConstructExpr 0x7f8ed487a560 <col:8> 'struct P2' 'void (void) noexcept'
| | `-CompoundStmt 0x7f8ed487a5d0 <col:8>
| |-CXXConstructorDecl 0x7f8ed48799d8 <col:8> col:8 implicit P3 'void (const struct P3 &)' inline default noexcept-unevaluated 0x7f8ed48799d8
| | `-ParmVarDecl 0x7f8ed4879ac0 <col:8> col:8 'const struct P3 &'
| `-CXXConstructorDecl 0x7f8ed4879e68 <col:8> col:8 implicit P3 'void (struct P3 &&)' inline default noexcept-unevaluated 0x7f8ed4879e68
|   `-ParmVarDecl 0x7f8ed4879f90 <col:8> col:8 'struct P3 &&'
|-CXXRecordDecl 0x7f8ed4878558 <line:16:1, line:18:1> line:16:7 referenced class V3 definition
| |-public 'struct P3'
| |-public 'struct V'
| |-CXXRecordDecl 0x7f8ed4878710 <col:1, col:7> col:7 implicit class V3
| |-FieldDecl 0x7f8ed48787c0 <line:17:5, col:12> col:12 m 'double'
| |-CXXMethodDecl 0x7f8ed4878868 <line:16:7, <invalid sloc>> col:7 implicit operator= 'class V3 &(const class V3 &)' inline default noexcept-unevaluated 0x7f8ed4878868
| | `-ParmVarDecl 0x7f8ed4878980 <col:7> col:7 'const class V3 &'
| |-CXXMethodDecl 0x7f8ed4878a18 <col:7, <invalid sloc>> col:7 implicit operator= 'class V3 &(class V3 &&)' inline default noexcept-unevaluated 0x7f8ed4878a18
| | `-ParmVarDecl 0x7f8ed4878b30 <col:7> col:7 'class V3 &&'
| |-CXXDestructorDecl 0x7f8ed4878bb8 <col:7> col:7 implicit ~V3 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed4878bb8
| |-CXXConstructorDecl 0x7f8ed4879468 <col:7> col:7 implicit used V3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct P2'
| | | `-CXXConstructExpr 0x7f8ed487a4f8 <col:7> 'struct P2' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct P3'
| | | `-CXXConstructExpr 0x7f8ed487a5e8 <col:7> 'struct P3' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 0x7f8ed487a6d8 <col:7> 'struct V' 'void (void) noexcept'
| | `-CompoundStmt 0x7f8ed487a758 <col:7>
| |-CXXConstructorDecl 0x7f8ed4879848 <col:7> col:7 implicit V3 'void (const class V3 &)' inline default noexcept-unevaluated 0x7f8ed4879848
| | `-ParmVarDecl 0x7f8ed4879970 <col:7> col:7 'const class V3 &'
| `-CXXConstructorDecl 0x7f8ed487a318 <col:7> col:7 implicit V3 'void (class V3 &&)' inline default noexcept-unevaluated 0x7f8ed487a318
|   `-ParmVarDecl 0x7f8ed487a440 <col:7> col:7 'class V3 &&'
|-CXXMethodDecl 0x7f8ed4878d50 parent 0x7f8ed484d0b8 prev 0x7f8ed4878060 <line:20:1, line:25:1> line:20:10 operator+= 'void (const struct P3 &)'
| |-ParmVarDecl 0x7f8ed4878cc8 <col:21, col:31> col:31 used rhs 'const struct P3 &'
| `-CompoundStmt 0x7f8ed48791f0 <line:21:1, line:25:1>
|   |-CompoundAssignOperator 0x7f8ed4878f78 <line:22:5, col:14> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 0x7f8ed4878ea8 <col:5> 'double' lvalue ->x 0x7f8ed484c428
|   | | `-ImplicitCastExpr 0x7f8ed4878e88 <col:5> 'struct P2 *' <UncheckedDerivedToBase (virtual P2)>
|   | |   `-CXXThisExpr 0x7f8ed4878e40 <col:5> 'struct P3 *' this
|   | `-ImplicitCastExpr 0x7f8ed4878f60 <col:10, col:14> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f8ed4878f28 <col:10, col:14> 'const double' lvalue .x 0x7f8ed484c428
|   |     `-ImplicitCastExpr 0x7f8ed4878f08 <col:10> 'struct P2' lvalue <UncheckedDerivedToBase (virtual P2)>
|   |       `-DeclRefExpr 0x7f8ed4878ee0 <col:10> 'const struct P3' lvalue ParmVar 0x7f8ed4878cc8 'rhs' 'const struct P3 &'
|   |-CompoundAssignOperator 0x7f8ed48790b8 <line:23:5, col:14> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 0x7f8ed4878fe8 <col:5> 'double' lvalue ->y 0x7f8ed484c488
|   | | `-ImplicitCastExpr 0x7f8ed4878fc8 <col:5> 'struct P2 *' <UncheckedDerivedToBase (virtual P2)>
|   | |   `-CXXThisExpr 0x7f8ed4878fb0 <col:5> 'struct P3 *' this
|   | `-ImplicitCastExpr 0x7f8ed48790a0 <col:10, col:14> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f8ed4879068 <col:10, col:14> 'const double' lvalue .y 0x7f8ed484c488
|   |     `-ImplicitCastExpr 0x7f8ed4879048 <col:10> 'struct P2' lvalue <UncheckedDerivedToBase (virtual P2)>
|   |       `-DeclRefExpr 0x7f8ed4879020 <col:10> 'const struct P3' lvalue ParmVar 0x7f8ed4878cc8 'rhs' 'const struct P3 &'
|   `-CompoundAssignOperator 0x7f8ed48791b8 <line:24:5, col:14> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 0x7f8ed4879108 <col:5> 'double' lvalue ->z 0x7f8ed4877ee0
|     | `-CXXThisExpr 0x7f8ed48790f0 <col:5> 'struct P3 *' this
|     `-ImplicitCastExpr 0x7f8ed48791a0 <col:10, col:14> 'double' <LValueToRValue>
|       `-MemberExpr 0x7f8ed4879168 <col:10, col:14> 'const double' lvalue .z 0x7f8ed4877ee0
|         `-DeclRefExpr 0x7f8ed4879140 <col:10> 'const struct P3' lvalue ParmVar 0x7f8ed4878cc8 'rhs' 'const struct P3 &'
|-EmptyDecl 0x7f8ed4879220 <line:25:2> col:2
`-FunctionDecl 0x7f8ed4879298 <line:27:1, line:33:1> line:27:5 main 'int (void)'
  `-CompoundStmt 0x7f8ed487aac8 <line:28:1, line:33:1>
    |-DeclStmt 0x7f8ed487a7a0 <line:29:5, col:12>
    | `-VarDecl 0x7f8ed48793a8 <col:5, col:11> col:8 used v3 'class V3' listinit
    |   `-CXXConstructExpr 0x7f8ed487a770 <col:8, col:11> 'class V3' 'void (void) noexcept' zeroing
    |-DeclStmt 0x7f8ed487a990 <line:30:5, col:19>
    | `-VarDecl 0x7f8ed487a7f0 <col:5, col:17> col:10 used pv3 'class V3 *':'class V3 *' cinit
    |   `-UnaryOperator 0x7f8ed487a8a8 <col:16, col:17> 'class V3 *' prefix '&'
    |     `-DeclRefExpr 0x7f8ed487a850 <col:17> 'class V3' lvalue Var 0x7f8ed48793a8 'v3' 'class V3'
    |-DeclStmt 0x7f8ed487aa78 <line:31:5, col:16>
    | `-VarDecl 0x7f8ed487a9b8 <col:5, col:13> col:8 pv 'struct V *' cinit
    |   `-ImplicitCastExpr 0x7f8ed487aa58 <col:13> 'struct V *' <DerivedToBase (V)>
    |     `-ImplicitCastExpr 0x7f8ed487aa40 <col:13> 'class V3 *':'class V3 *' <LValueToRValue>
    |       `-DeclRefExpr 0x7f8ed487aa18 <col:13> 'class V3 *':'class V3 *' lvalue Var 0x7f8ed487a7f0 'pv3' 'class V3 *':'class V3 *'
    `-ReturnStmt 0x7f8ed487aab0 <line:32:5, col:12>
      `-IntegerLiteral 0x7f8ed487aa90 <col:12> 'int' 0

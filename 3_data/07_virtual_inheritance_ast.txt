TranslationUnitDecl 0x7f8ed4818cd0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct P2 definition
| |-CXXRecordDecl implicit struct P2
| |-FieldDecl referenced x 'double'
| |-FieldDecl referenced y 'double'
| |-CXXMethodDecl > implicit constexpr operator= 'struct P2 &(const struct P2 &)' inline default trivial noexcept-unevaluated 0x7f8ed484c9c8
| | `-ParmVarDecl 'const struct P2 &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct P2 &(struct P2 &&)' inline default trivial noexcept-unevaluated 0x7f8ed484cb78
| | `-ParmVarDecl 'struct P2 &&'
| |-CXXDestructorDecl implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed484cfd8
| |-CXXConstructorDecl implicit used P2 'void (void) noexcept' inline default trivial
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr P2 'void (const struct P2 &)' inline default trivial noexcept-unevaluated 0x7f8ed4879b28
| | `-ParmVarDecl 'const struct P2 &'
| `-CXXConstructorDecl implicit constexpr P2 'void (struct P2 &&)' inline default trivial noexcept-unevaluated 0x7f8ed4879cb8
|   `-ParmVarDecl 'struct P2 &&'
|-CXXRecordDecl referenced struct V definition
| |-virtual public 'struct P2'
| |-CXXRecordDecl implicit referenced struct V
| |-FieldDecl n 'struct V *'
| |-CXXMethodDecl > implicit operator= 'struct V &(const struct V &)' inline default noexcept-unevaluated 0x7f8ed484c7e8
| | `-ParmVarDecl 'const struct V &'
| |-CXXMethodDecl > implicit operator= 'struct V &(struct V &&)' inline default noexcept-unevaluated 0x7f8ed484cd28
| | `-ParmVarDecl 'struct V &&'
| |-CXXDestructorDecl implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed484cec8
| |-CXXConstructorDecl implicit used V 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct P2'
| | | `-CXXConstructExpr 'struct P2' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit V 'void (const struct V &)' inline default noexcept-unevaluated 0x7f8ed4879ff8
| | `-ParmVarDecl 'const struct V &'
| `-CXXConstructorDecl implicit V 'void (struct V &&)' inline default noexcept-unevaluated 0x7f8ed487a188
|   `-ParmVarDecl 'struct V &&'
|-CXXRecordDecl referenced struct P3 definition
| |-virtual public 'struct P2'
| |-CXXRecordDecl implicit referenced struct P3
| |-FieldDecl referenced z 'double'
| |-CXXMethodDecl operator+= 'void (const struct P3 &)'
| | `-ParmVarDecl rhs 'const struct P3 &'
| |-CXXMethodDecl > implicit operator= 'struct P3 &(const struct P3 &)' inline default noexcept-unevaluated 0x7f8ed4878128
| | `-ParmVarDecl 'const struct P3 &'
| |-CXXMethodDecl > implicit operator= 'struct P3 &(struct P3 &&)' inline default noexcept-unevaluated 0x7f8ed48782d8
| | `-ParmVarDecl 'struct P3 &&'
| |-CXXDestructorDecl implicit ~P3 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed4878478
| |-CXXConstructorDecl implicit used P3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct P2'
| | | `-CXXConstructExpr 'struct P2' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit P3 'void (const struct P3 &)' inline default noexcept-unevaluated 0x7f8ed48799d8
| | `-ParmVarDecl 'const struct P3 &'
| `-CXXConstructorDecl implicit P3 'void (struct P3 &&)' inline default noexcept-unevaluated 0x7f8ed4879e68
|   `-ParmVarDecl 'struct P3 &&'
|-CXXRecordDecl referenced class V3 definition
| |-public 'struct P3'
| |-public 'struct V'
| |-CXXRecordDecl implicit class V3
| |-FieldDecl m 'double'
| |-CXXMethodDecl > implicit operator= 'class V3 &(const class V3 &)' inline default noexcept-unevaluated 0x7f8ed4878868
| | `-ParmVarDecl 'const class V3 &'
| |-CXXMethodDecl > implicit operator= 'class V3 &(class V3 &&)' inline default noexcept-unevaluated 0x7f8ed4878a18
| | `-ParmVarDecl 'class V3 &&'
| |-CXXDestructorDecl implicit ~V3 'void (void)' inline default trivial noexcept-unevaluated 0x7f8ed4878bb8
| |-CXXConstructorDecl implicit used V3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct P2'
| | | `-CXXConstructExpr 'struct P2' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct P3'
| | | `-CXXConstructExpr 'struct P3' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct V'
| | | `-CXXConstructExpr 'struct V' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit V3 'void (const class V3 &)' inline default noexcept-unevaluated 0x7f8ed4879848
| | `-ParmVarDecl 'const class V3 &'
| `-CXXConstructorDecl implicit V3 'void (class V3 &&)' inline default noexcept-unevaluated 0x7f8ed487a318
|   `-ParmVarDecl 'class V3 &&'
|-CXXMethodDecl parent 0x7f8ed484d0b8 prev 0x7f8ed4878060 operator+= 'void (const struct P3 &)'
| |-ParmVarDecl used rhs 'const struct P3 &'
| `-CompoundStmt
|   |-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 'double' lvalue ->x 0x7f8ed484c428
|   | | `-ImplicitCastExpr 'struct P2 *' <UncheckedDerivedToBase (virtual P2)>
|   | |   `-CXXThisExpr 'struct P3 *' this
|   | `-ImplicitCastExpr 'double' <LValueToRValue>
|   |   `-MemberExpr 'const double' lvalue .x 0x7f8ed484c428
|   |     `-ImplicitCastExpr 'struct P2' lvalue <UncheckedDerivedToBase (virtual P2)>
|   |       `-DeclRefExpr 'const struct P3' lvalue ParmVar 0x7f8ed4878cc8 'rhs' 'const struct P3 &'
|   |-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-MemberExpr 'double' lvalue ->y 0x7f8ed484c488
|   | | `-ImplicitCastExpr 'struct P2 *' <UncheckedDerivedToBase (virtual P2)>
|   | |   `-CXXThisExpr 'struct P3 *' this
|   | `-ImplicitCastExpr 'double' <LValueToRValue>
|   |   `-MemberExpr 'const double' lvalue .y 0x7f8ed484c488
|   |     `-ImplicitCastExpr 'struct P2' lvalue <UncheckedDerivedToBase (virtual P2)>
|   |       `-DeclRefExpr 'const struct P3' lvalue ParmVar 0x7f8ed4878cc8 'rhs' 'const struct P3 &'
|   `-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
|     |-MemberExpr 'double' lvalue ->z 0x7f8ed4877ee0
|     | `-CXXThisExpr 'struct P3 *' this
|     `-ImplicitCastExpr 'double' <LValueToRValue>
|       `-MemberExpr 'const double' lvalue .z 0x7f8ed4877ee0
|         `-DeclRefExpr 'const struct P3' lvalue ParmVar 0x7f8ed4878cc8 'rhs' 'const struct P3 &'
|-EmptyDecl
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used v3 'class V3' listinit
    |   `-CXXConstructExpr 'class V3' 'void (void) noexcept' zeroing
    |-DeclStmt
    | `-VarDecl used pv3 'class V3 *':'class V3 *' cinit
    |   `-UnaryOperator 'class V3 *' prefix '&'
    |     `-DeclRefExpr 'class V3' lvalue Var 0x7f8ed48793a8 'v3' 'class V3'
    |-DeclStmt
    | `-VarDecl pv 'struct V *' cinit
    |   `-ImplicitCastExpr 'struct V *' <DerivedToBase (V)>
    |     `-ImplicitCastExpr 'class V3 *':'class V3 *' <LValueToRValue>
    |       `-DeclRefExpr 'class V3 *':'class V3 *' lvalue Var 0x7f8ed487a7f0 'pv3' 'class V3 *':'class V3 *'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

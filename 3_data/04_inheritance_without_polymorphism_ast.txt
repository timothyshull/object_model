TranslationUnitDecl 0x7fadc5819cd0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced class P2 definition
| |-CXXRecordDecl implicit referenced class P2
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P2 'void (double, double)'
| | |-ParmVarDecl used x 'double'
| | |-ParmVarDecl used y 'double'
| | |-CXXCtorInitializer Field 0x7fadc584dc90 '_x' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fadc584d850 'x' 'double'
| | |-CXXCtorInitializer Field 0x7fadc584dcf0 '_y' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fadc584d8c8 'y' 'double'
| | `-CompoundStmt
| |-CXXMethodDecl used operator+= 'void (const class P2 &)'
| | |-ParmVarDecl used rhs 'const class P2 &'
| | `-CompoundStmt
| |   |-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |   | |-MemberExpr 'double' lvalue ->_x 0x7fadc584dc90
| |   | | `-CXXThisExpr 'class P2 *' this
| |   | `-ImplicitCastExpr 'double' <LValueToRValue>
| |   |   `-MemberExpr 'const double' lvalue ._x 0x7fadc584dc90
| |   |     `-DeclRefExpr 'const class P2' lvalue ParmVar 0x7fadc584dae8 'rhs' 'const class P2 &'
| |   `-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 'double' lvalue ->_y 0x7fadc584dcf0
| |     | `-CXXThisExpr 'class P2 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ._y 0x7fadc584dcf0
| |         `-DeclRefExpr 'const class P2' lvalue ParmVar 0x7fadc584dae8 'rhs' 'const class P2 &'
| |-AccessSpecDecl protected
| |-FieldDecl referenced _x 'double'
| |-FieldDecl referenced _y 'double'
| |-CXXConstructorDecl implicit constexpr P2 'void (const class P2 &)' inline default trivial noexcept-unevaluated 0x7fadc6801bd8
| | `-ParmVarDecl 'const class P2 &'
| `-CXXConstructorDecl implicit constexpr P2 'void (class P2 &&)' inline default trivial noexcept-unevaluated 0x7fadc6801d58
|   `-ParmVarDecl 'class P2 &&'
|-CXXRecordDecl class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl implicit referenced class P3
| |-AccessSpecDecl public
| |-CXXConstructorDecl P3 'void (double, double, double)'
| | |-ParmVarDecl used x 'double'
| | |-ParmVarDecl used y 'double'
| | |-ParmVarDecl used z 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 'double' lvalue ParmVar 0x7fadc584e3d0 'x' 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fadc584e448 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fadc6801aa0 '_z' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fadc584e4c0 'z' 'double'
| | `-CompoundStmt
| |-CXXMethodDecl operator+= 'void (const class P3 &)'
| | |-ParmVarDecl used rhs 'const class P3 &'
| | `-CompoundStmt
| |   |-CXXMemberCallExpr 'void'
| |   | |-MemberExpr '<bound member function type>' ->operator+= 0x7fadc584dbb0
| |   | | `-ImplicitCastExpr 'class P2 *' <UncheckedDerivedToBase (P2)>
| |   | |   `-CXXThisExpr 'class P3 *' this
| |   | `-ImplicitCastExpr 'const class P2' lvalue <DerivedToBase (P2)>
| |   |   `-DeclRefExpr 'const class P3' lvalue ParmVar 0x7fadc68018f8 'rhs' 'const class P3 &'
| |   `-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 'double' lvalue ->_z 0x7fadc6801aa0
| |     | `-CXXThisExpr 'class P3 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ._z 0x7fadc6801aa0
| |         `-DeclRefExpr 'const class P3' lvalue ParmVar 0x7fadc68018f8 'rhs' 'const class P3 &'
| |-AccessSpecDecl private
| `-FieldDecl referenced _z 'double'
|   `-FloatingLiteral 'double' 0.000000e+00
|-CXXRecordDecl struct C definition
| |-CXXRecordDecl implicit struct C
| |-FieldDecl v 'int'
| |-FieldDecl c1 'char'
| |-FieldDecl c2 'char'
| `-FieldDecl c3 'char'
|-CXXRecordDecl referenced struct C1 definition
| |-CXXRecordDecl implicit struct C1
| |-FieldDecl referenced v 'int'
| |-FieldDecl referenced b1 'char'
| |-CXXConstructorDecl implicit used C1 'void (void) noexcept' inline default trivial
| | `-CompoundStmt
| |-CXXDestructorDecl implicit ~C1 'void (void)' inline default trivial noexcept-unevaluated 0x7fadc6804618
| |-CXXConstructorDecl implicit constexpr C1 'void (const struct C1 &)' inline default trivial noexcept-unevaluated 0x7fadc6804758
| | `-ParmVarDecl 'const struct C1 &'
| |-CXXConstructorDecl implicit constexpr C1 'void (struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fadc6804918
| | `-ParmVarDecl 'struct C1 &&'
| |-CXXMethodDecl implicit used constexpr operator= 'struct C1 &(const struct C1 &) noexcept' inline default trivial
| | |-ParmVarDecl used 'const struct C1 &'
| | `-CompoundStmt
| |   |-BinaryOperator 'int' lvalue '='
| |   | |-MemberExpr 'int' lvalue ->v 0x7fadc6802cb0
| |   | | `-CXXThisExpr 'struct C1 *' this
| |   | `-ImplicitCastExpr 'int' <LValueToRValue>
| |   |   `-MemberExpr 'const int' lvalue .v 0x7fadc6802cb0
| |   |     `-DeclRefExpr 'const struct C1' lvalue ParmVar 0x7fadc6806c00 '' 'const struct C1 &'
| |   |-BinaryOperator 'char' lvalue '='
| |   | |-MemberExpr 'char' lvalue ->b1 0x7fadc6802d08
| |   | | `-CXXThisExpr 'struct C1 *' this
| |   | `-ImplicitCastExpr 'char' <LValueToRValue>
| |   |   `-MemberExpr 'const char' lvalue .b1 0x7fadc6802d08
| |   |     `-DeclRefExpr 'const struct C1' lvalue ParmVar 0x7fadc6806c00 '' 'const struct C1 &'
| |   `-ReturnStmt
| |     `-UnaryOperator 'struct C1' lvalue prefix '*'
| |       `-CXXThisExpr 'struct C1 *' this
| `-CXXMethodDecl > implicit constexpr operator= 'struct C1 &(struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fadc6806c68
|   `-ParmVarDecl 'struct C1 &&'
|-CXXRecordDecl referenced struct C2 definition
| |-public 'struct C1'
| |-CXXRecordDecl implicit struct C2
| |-FieldDecl b2 'char'
| |-CXXConstructorDecl implicit used C2 'void (void) noexcept' inline default trivial
| | |-CXXCtorInitializer 'struct C1'
| | | `-CXXConstructExpr 'struct C1' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr C2 'void (const struct C2 &)' inline default trivial noexcept-unevaluated 0x7fadc6804aa8
| | `-ParmVarDecl 'const struct C2 &'
| `-CXXConstructorDecl implicit constexpr C2 'void (struct C2 &&)' inline default trivial noexcept-unevaluated 0x7fadc6804c68
|   `-ParmVarDecl 'struct C2 &&'
|-CXXRecordDecl struct C3 definition
| |-public 'struct C2'
| |-CXXRecordDecl implicit struct C3
| `-FieldDecl b3 'char'
|-FunctionDecl main 'int (void)'
| `-CompoundStmt
|   |-DeclStmt
|   | `-VarDecl used pc2 'struct C2 *' cinit
|   |   `-CXXNewExpr 'struct C2 *' Function 0x7fadc6803628 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 'struct C2' 'void (void) noexcept'
|   |-DeclStmt
|   | `-VarDecl used pc1_1 'struct C1 *' cinit
|   |   `-CXXNewExpr 'struct C1 *' Function 0x7fadc6803628 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 'struct C1' 'void (void) noexcept'
|   |-DeclStmt
|   | `-VarDecl used pc2_2 'struct C1 *' cinit
|   |   `-ImplicitCastExpr 'struct C1 *' <DerivedToBase (C1)>
|   |     `-CXXNewExpr 'struct C2 *' Function 0x7fadc6803628 'operator new' 'void *(unsigned long)'
|   |       `-CXXConstructExpr 'struct C2' 'void (void) noexcept'
|   |-CXXOperatorCallExpr 'struct C1' lvalue
|   | |-ImplicitCastExpr 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fadc68052e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 'struct C1 *' lvalue Var 0x7fadc6804fa8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 'struct C1 *' lvalue Var 0x7fadc68050c8 'pc2_2' 'struct C1 *'
|   |-BinaryOperator 'struct C1 *' lvalue '='
|   | |-DeclRefExpr 'struct C1 *' lvalue Var 0x7fadc6804fa8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 'struct C1 *' <DerivedToBase (C1)>
|   |   `-ImplicitCastExpr 'struct C2 *' <LValueToRValue>
|   |     `-DeclRefExpr 'struct C2 *' lvalue Var 0x7fadc68033f8 'pc2' 'struct C2 *'
|   |-CXXOperatorCallExpr 'struct C1' lvalue
|   | |-ImplicitCastExpr 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fadc68052e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 'struct C1 *' lvalue Var 0x7fadc6804fa8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 'struct C1 *' lvalue Var 0x7fadc68050c8 'pc2_2' 'struct C1 *'
|   `-ReturnStmt
|     `-IntegerLiteral 'int' 0
|-FunctionDecl implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
`-FunctionDecl implicit operator delete[] 'void (void *) noexcept'
  |-ParmVarDecl implicit 'void *'
  `-VisibilityAttr Implicit Default

TranslationUnitDecl 0x7fb6b40326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb6b4032c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb6b4032940 '__int128'
|-TypedefDecl 0x7fb6b4032cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb6b4032960 'unsigned __int128'
|-TypedefDecl 0x7fb6b4033018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb6b4032dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fb6b4032d28 '__NSConstantString_tag'
|-TypedefDecl 0x7fb6b40330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb6b4033070 'char *'
|   `-BuiltinType 0x7fb6b4032760 'char'
|-TypedefDecl 0x7fb6b4066000 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb6b4033390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb6b40331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fb6b4033108 '__va_list_tag'
|-CXXRecordDecl 0x7fb6b4066058 <object_model/3_data/04_inheritance_without_polymorphism.cpp:1:1, line:14:1> line:1:7 referenced class P2 definition
| |-CXXRecordDecl 0x7fb6b4066178 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7fb6b4066210 <line:2:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fb6b40663f0 <line:3:5, col:44> col:5 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7fb6b4066250 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fb6b40662c8 <col:18, col:25> col:25 used y 'double'
| | |-CXXCtorInitializer Field 0x7fb6b4066690 '_x' 'double'
| | | `-InitListExpr 0x7fb6b40667c8 <col:32, col:34> 'double'
| | |   `-ImplicitCastExpr 0x7fb6b4066808 <col:33> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6b4066758 <col:33> 'double' lvalue ParmVar 0x7fb6b4066250 'x' 'double'
| | |-CXXCtorInitializer Field 0x7fb6b40666f0 '_y' 'double'
| | | `-InitListExpr 0x7fb6b40668c0 <col:39, col:41> 'double'
| | |   `-ImplicitCastExpr 0x7fb6b4066900 <col:40> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6b4066850 <col:40> 'double' lvalue ParmVar 0x7fb6b40662c8 'y' 'double'
| | `-CompoundStmt 0x7fb6b4066958 <col:43, col:44>
| |-CXXMethodDecl 0x7fb6b40665b0 <line:5:5, line:9:5> line:5:10 used operator+= 'void (const class P2 &)'
| | |-ParmVarDecl 0x7fb6b40664e8 <col:21, col:31> col:31 used rhs 'const class P2 &'
| | `-CompoundStmt 0x7fb6b4066b70 <line:6:5, line:9:5>
| |   |-CompoundAssignOperator 0x7fb6b4066a38 <line:7:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |   | |-MemberExpr 0x7fb6b4066988 <col:9> 'double' lvalue ->_x 0x7fb6b4066690
| |   | | `-CXXThisExpr 0x7fb6b4066970 <col:9> 'class P2 *' this
| |   | `-ImplicitCastExpr 0x7fb6b4066a20 <col:15, col:19> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7fb6b40669e8 <col:15, col:19> 'const double' lvalue ._x 0x7fb6b4066690
| |   |     `-DeclRefExpr 0x7fb6b40669c0 <col:15> 'const class P2' lvalue ParmVar 0x7fb6b40664e8 'rhs' 'const class P2 &'
| |   `-CompoundAssignOperator 0x7fb6b4066b38 <line:8:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fb6b4066a88 <col:9> 'double' lvalue ->_y 0x7fb6b40666f0
| |     | `-CXXThisExpr 0x7fb6b4066a70 <col:9> 'class P2 *' this
| |     `-ImplicitCastExpr 0x7fb6b4066b20 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fb6b4066ae8 <col:15, col:19> 'const double' lvalue ._y 0x7fb6b40666f0
| |         `-DeclRefExpr 0x7fb6b4066ac0 <col:15> 'const class P2' lvalue ParmVar 0x7fb6b40664e8 'rhs' 'const class P2 &'
| |-AccessSpecDecl 0x7fb6b4066650 <line:11:1, col:10> col:1 protected
| |-FieldDecl 0x7fb6b4066690 <line:12:5, col:12> col:12 referenced _x 'double'
| |-FieldDecl 0x7fb6b40666f0 <line:13:5, col:12> col:12 referenced _y 'double'
| |-CXXConstructorDecl 0x7fb6b40917d8 <line:1:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default trivial noexcept-unevaluated 0x7fb6b40917d8
| | `-ParmVarDecl 0x7fb6b40918c0 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7fb6b4091958 <col:7> col:7 implicit constexpr P2 'void (class P2 &&)' inline default trivial noexcept-unevaluated 0x7fb6b4091958
|   `-ParmVarDecl 0x7fb6b4091a80 <col:7> col:7 'class P2 &&'
|-CXXRecordDecl 0x7fb6b4066b98 <line:16:1, line:28:1> line:16:7 class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl 0x7fb6b4066cf8 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7fb6b4066d90 <line:17:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fb6b4091400 <line:18:5, col:57> col:5 P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7fb6b4066dd0 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fb6b4066e48 <col:18, col:25> col:25 used y 'double'
| | |-ParmVarDecl 0x7fb6b4066ec0 <col:28, col:35> col:35 used z 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7fb6b4091b18 <col:40, col:47> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7fb6b4091ae8 <col:43> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7fb6b4091728 <col:43> 'double' lvalue ParmVar 0x7fb6b4066dd0 'x' 'double'
| | |   `-ImplicitCastExpr 0x7fb6b4091b00 <col:46> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6b4091750 <col:46> 'double' lvalue ParmVar 0x7fb6b4066e48 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fb6b40916a0 '_z' 'double'
| | | `-InitListExpr 0x7fb6b4091bf0 <col:52, col:54> 'double'
| | |   `-ImplicitCastExpr 0x7fb6b4091c30 <col:53> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6b4091b80 <col:53> 'double' lvalue ParmVar 0x7fb6b4066ec0 'z' 'double'
| | `-CompoundStmt 0x7fb6b4091c88 <col:56, col:57>
| |-CXXMethodDecl 0x7fb6b40915c0 <line:20:5, line:24:5> line:20:10 operator+= 'void (const class P3 &)'
| | |-ParmVarDecl 0x7fb6b40914f8 <col:21, col:31> col:31 used rhs 'const class P3 &'
| | `-CompoundStmt 0x7fb6b4091f08 <line:21:5, line:24:5>
| |   |-CXXMemberCallExpr 0x7fb6b4091d98 <line:22:9, col:27> 'void'
| |   | |-MemberExpr 0x7fb6b4091d20 <col:9, col:21> '<bound member function type>' ->operator+= 0x7fb6b40665b0
| |   | | `-ImplicitCastExpr 0x7fb6b4091dc8 <col:13> 'class P2 *' <UncheckedDerivedToBase (P2)>
| |   | |   `-CXXThisExpr 0x7fb6b4091d08 <col:13> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7fb6b4091de8 <col:24> 'const class P2' lvalue <DerivedToBase (P2)>
| |   |   `-DeclRefExpr 0x7fb6b4091d70 <col:24> 'const class P3' lvalue ParmVar 0x7fb6b40914f8 'rhs' 'const class P3 &'
| |   `-CompoundAssignOperator 0x7fb6b4091ed0 <line:23:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fb6b4091e20 <col:9> 'double' lvalue ->_z 0x7fb6b40916a0
| |     | `-CXXThisExpr 0x7fb6b4091e08 <col:9> 'class P3 *' this
| |     `-ImplicitCastExpr 0x7fb6b4091eb8 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fb6b4091e80 <col:15, col:19> 'const double' lvalue ._z 0x7fb6b40916a0
| |         `-DeclRefExpr 0x7fb6b4091e58 <col:15> 'const class P3' lvalue ParmVar 0x7fb6b40914f8 'rhs' 'const class P3 &'
| |-AccessSpecDecl 0x7fb6b4091660 <line:26:1, col:8> col:1 private
| `-FieldDecl 0x7fb6b40916a0 <line:27:5, col:17> col:12 referenced _z 'double'
|   `-FloatingLiteral 0x7fb6b4091708 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7fb6b4091f30 <line:30:1, line:35:1> line:30:8 struct C definition
| |-CXXRecordDecl 0x7fb6b4092058 <col:1, col:8> col:8 implicit struct C
| |-FieldDecl 0x7fb6b4092108 <line:31:5, col:9> col:9 v 'int'
| |-FieldDecl 0x7fb6b4092160 <line:32:5, col:10> col:10 c1 'char'
| |-FieldDecl 0x7fb6b40921b8 <line:33:5, col:10> col:10 c2 'char'
| `-FieldDecl 0x7fb6b4092210 <line:34:5, col:10> col:10 c3 'char'
|-CXXRecordDecl 0x7fb6b4092278 <line:37:1, line:40:1> line:37:8 referenced struct C1 definition
| |-CXXRecordDecl 0x7fb6b4092400 <col:1, col:8> col:8 implicit struct C1
| |-FieldDecl 0x7fb6b40924b0 <line:38:5, col:9> col:9 referenced v 'int'
| |-FieldDecl 0x7fb6b4092508 <line:39:5, col:10> col:10 referenced b1 'char'
| |-CXXConstructorDecl 0x7fb6b4800538 <line:37:8> col:8 implicit used C1 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7fb6b4800e30 <col:8>
| |-CXXDestructorDecl 0x7fb6b4800618 <col:8> col:8 implicit ~C1 'void (void)' inline default trivial noexcept-unevaluated 0x7fb6b4800618
| |-CXXConstructorDecl 0x7fb6b4800758 <col:8> col:8 implicit constexpr C1 'void (const struct C1 &)' inline default trivial noexcept-unevaluated 0x7fb6b4800758
| | `-ParmVarDecl 0x7fb6b4800880 <col:8> col:8 'const struct C1 &'
| |-CXXConstructorDecl 0x7fb6b4800918 <col:8> col:8 implicit constexpr C1 'void (struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fb6b4800918
| | `-ParmVarDecl 0x7fb6b4800a40 <col:8> col:8 'struct C1 &&'
| |-CXXMethodDecl 0x7fb6b48012e8 <col:8> col:8 implicit used constexpr operator= 'struct C1 &(const struct C1 &) noexcept' inline default trivial
| | |-ParmVarDecl 0x7fb6b4802c00 <col:8> col:8 used 'const struct C1 &'
| | `-CompoundStmt 0x7fb6b4803090 <col:8>
| |   |-BinaryOperator 0x7fb6b4802f28 <col:8> 'int' lvalue '='
| |   | |-MemberExpr 0x7fb6b4802e78 <col:8> 'int' lvalue ->v 0x7fb6b40924b0
| |   | | `-CXXThisExpr 0x7fb6b4802e60 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fb6b4802f10 <col:8> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x7fb6b4802ed8 <col:8> 'const int' lvalue .v 0x7fb6b40924b0
| |   |     `-DeclRefExpr 0x7fb6b4802eb0 <col:8> 'const struct C1' lvalue ParmVar 0x7fb6b4802c00 '' 'const struct C1 &'
| |   |-BinaryOperator 0x7fb6b4803018 <col:8> 'char' lvalue '='
| |   | |-MemberExpr 0x7fb6b4802f68 <col:8> 'char' lvalue ->b1 0x7fb6b4092508
| |   | | `-CXXThisExpr 0x7fb6b4802f50 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fb6b4803000 <col:8> 'char' <LValueToRValue>
| |   |   `-MemberExpr 0x7fb6b4802fc8 <col:8> 'const char' lvalue .b1 0x7fb6b4092508
| |   |     `-DeclRefExpr 0x7fb6b4802fa0 <col:8> 'const struct C1' lvalue ParmVar 0x7fb6b4802c00 '' 'const struct C1 &'
| |   `-ReturnStmt 0x7fb6b4803078 <col:8>
| |     `-UnaryOperator 0x7fb6b4803058 <col:8> 'struct C1' lvalue prefix '*'
| |       `-CXXThisExpr 0x7fb6b4803040 <col:8> 'struct C1 *' this
| `-CXXMethodDecl 0x7fb6b4802c68 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C1 &(struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fb6b4802c68
|   `-ParmVarDecl 0x7fb6b4802d80 <col:8> col:8 'struct C1 &&'
|-CXXRecordDecl 0x7fb6b4092570 <line:42:1, line:44:1> line:42:8 referenced struct C2 definition
| |-public 'struct C1'
| |-CXXRecordDecl 0x7fb6b40926d8 <col:1, col:8> col:8 implicit struct C2
| |-FieldDecl 0x7fb6b4092780 <line:43:5, col:10> col:10 b2 'char'
| |-CXXConstructorDecl 0x7fb6b4800400 <line:42:8> col:8 implicit used C2 'void (void) noexcept' inline default trivial
| | |-CXXCtorInitializer 'struct C1'
| | | `-CXXConstructExpr 0x7fb6b4800e48 <col:8> 'struct C1' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb6b4800eb8 <col:8>
| |-CXXConstructorDecl 0x7fb6b4800aa8 <col:8> col:8 implicit constexpr C2 'void (const struct C2 &)' inline default trivial noexcept-unevaluated 0x7fb6b4800aa8
| | `-ParmVarDecl 0x7fb6b4800bd0 <col:8> col:8 'const struct C2 &'
| `-CXXConstructorDecl 0x7fb6b4800c68 <col:8> col:8 implicit constexpr C2 'void (struct C2 &&)' inline default trivial noexcept-unevaluated 0x7fb6b4800c68
|   `-ParmVarDecl 0x7fb6b4800d90 <col:8> col:8 'struct C2 &&'
|-CXXRecordDecl 0x7fb6b40927e8 <line:46:1, line:48:1> line:46:8 struct C3 definition
| |-public 'struct C2'
| |-CXXRecordDecl 0x7fb6b4092948 <col:1, col:8> col:8 implicit struct C3
| `-FieldDecl 0x7fb6b40929f0 <line:47:5, col:10> col:10 b3 'char'
|-FunctionDecl 0x7fb6b4092ab8 <line:50:1, line:63:1> line:50:5 main 'int (void)'
| `-CompoundStmt 0x7fb6b48033c0 <line:51:1, line:63:1>
|   |-DeclStmt 0x7fb6b4800f58 <line:52:5, col:21>
|   | `-VarDecl 0x7fb6b4092bf8 <col:5, col:19> col:9 used pc2 'struct C2 *' cinit
|   |   `-CXXNewExpr 0x7fb6b4800f00 <col:15, col:19> 'struct C2 *' Function 0x7fb6b4092e28 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fb6b4800ed0 <col:19> 'struct C2' 'void (void) noexcept'
|   |-DeclStmt 0x7fb6b48010a0 <line:53:5, col:23>
|   | `-VarDecl 0x7fb6b4800fa8 <col:5, col:21> col:9 used pc1_1 'struct C1 *' cinit
|   |   `-CXXNewExpr 0x7fb6b4801048 <col:17, col:21> 'struct C1 *' Function 0x7fb6b4092e28 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fb6b4801018 <col:21> 'struct C1' 'void (void) noexcept'
|   |-DeclStmt 0x7fb6b48011e0 <line:54:5, col:23>
|   | `-VarDecl 0x7fb6b48010c8 <col:5, col:21> col:9 used pc2_2 'struct C1 *' cinit
|   |   `-ImplicitCastExpr 0x7fb6b48011c0 <col:17, col:21> 'struct C1 *' <DerivedToBase (C1)>
|   |     `-CXXNewExpr 0x7fb6b4801168 <col:17, col:21> 'struct C2 *' Function 0x7fb6b4092e28 'operator new' 'void *(unsigned long)'
|   |       `-CXXConstructExpr 0x7fb6b4801138 <col:21> 'struct C2' 'void (void) noexcept'
|   |-CXXOperatorCallExpr 0x7fb6b4803130 <line:56:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fb6b4803118 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fb6b4802e38 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fb6b48012e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fb6b4801238 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fb6b4801220 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fb6b48011f8 <col:6> 'struct C1 *' lvalue Var 0x7fb6b4800fa8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fb6b4802de8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fb6b4801298 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fb6b4801280 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fb6b4801258 <col:15> 'struct C1 *' lvalue Var 0x7fb6b48010c8 'pc2_2' 'struct C1 *'
|   |-BinaryOperator 0x7fb6b4803200 <line:58:5, col:13> 'struct C1 *' lvalue '='
|   | |-DeclRefExpr 0x7fb6b4803178 <col:5> 'struct C1 *' lvalue Var 0x7fb6b4800fa8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fb6b48031e0 <col:13> 'struct C1 *' <DerivedToBase (C1)>
|   |   `-ImplicitCastExpr 0x7fb6b48031c8 <col:13> 'struct C2 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fb6b48031a0 <col:13> 'struct C2 *' lvalue Var 0x7fb6b4092bf8 'pc2' 'struct C2 *'
|   |-CXXOperatorCallExpr 0x7fb6b4803340 <line:61:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fb6b4803328 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fb6b4803300 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fb6b48012e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fb6b4803268 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fb6b4803250 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fb6b4803228 <col:6> 'struct C1 *' lvalue Var 0x7fb6b4800fa8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fb6b48032e8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fb6b48032c8 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fb6b48032b0 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fb6b4803288 <col:15> 'struct C1 *' lvalue Var 0x7fb6b48010c8 'pc2_2' 'struct C1 *'
|   `-ReturnStmt 0x7fb6b48033a8 <line:62:5, col:12>
|     `-IntegerLiteral 0x7fb6b4803388 <col:12> 'int' 0
|-FunctionDecl 0x7fb6b4092e28 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fb6b4092f08 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fb6b4092ec0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb6b4092f70 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fb6b4093050 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fb6b4093008 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb6b4093138 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fb6b4093218 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fb6b40931d0 <<invalid sloc>> Implicit Default
`-FunctionDecl 0x7fb6b4093280 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
  |-ParmVarDecl 0x7fb6b4093360 <<invalid sloc>> <invalid sloc> implicit 'void *'
  `-VisibilityAttr 0x7fb6b4093318 <<invalid sloc>> Implicit Default

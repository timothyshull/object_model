TranslationUnitDecl 0x7fa7360326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa736032c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa736032940 '__int128'
|-TypedefDecl 0x7fa736032cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa736032960 'unsigned __int128'
|-TypedefDecl 0x7fa736033018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa736032dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fa736032d28 '__NSConstantString_tag'
|-TypedefDecl 0x7fa7360330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa736033070 'char *'
|   `-BuiltinType 0x7fa736032760 'char'
|-TypedefDecl 0x7fa736805600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa736033390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa7360331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fa736033108 '__va_list_tag'
|-CXXRecordDecl 0x7fa736805658 </Users/tskull/Documents/Programming/Cpp/object_model_refined/3_data/04_inheritance_without_polymorphism.cpp:1:1, line:14:1> line:1:7 referenced class P2 definition
| |-CXXRecordDecl 0x7fa736805778 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7fa736805810 <line:2:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fa7368059f0 <line:3:5, col:44> col:5 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7fa736805850 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fa7368058c8 <col:18, col:25> col:25 used y 'double'
| | |-CXXCtorInitializer Field 0x7fa736805c90 '_x' 'double'
| | | `-InitListExpr 0x7fa736805dc8 <col:32, col:34> 'double'
| | |   `-ImplicitCastExpr 0x7fa736805e08 <col:33> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fa736805d58 <col:33> 'double' lvalue ParmVar 0x7fa736805850 'x' 'double'
| | |-CXXCtorInitializer Field 0x7fa736805cf0 '_y' 'double'
| | | `-InitListExpr 0x7fa736805ec0 <col:39, col:41> 'double'
| | |   `-ImplicitCastExpr 0x7fa736805f00 <col:40> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fa736805e50 <col:40> 'double' lvalue ParmVar 0x7fa7368058c8 'y' 'double'
| | `-CompoundStmt 0x7fa736805f58 <col:43, col:44>
| |-CXXMethodDecl 0x7fa736805bb0 <line:5:5, line:9:5> line:5:10 used operator+= 'void (const class P2 &)'
| | |-ParmVarDecl 0x7fa736805ae8 <col:21, col:31> col:31 used rhs 'const class P2 &'
| | `-CompoundStmt 0x7fa736806170 <line:6:5, line:9:5>
| |   |-CompoundAssignOperator 0x7fa736806038 <line:7:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |   | |-MemberExpr 0x7fa736805f88 <col:9> 'double' lvalue ->_x 0x7fa736805c90
| |   | | `-CXXThisExpr 0x7fa736805f70 <col:9> 'class P2 *' this
| |   | `-ImplicitCastExpr 0x7fa736806020 <col:15, col:19> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7fa736805fe8 <col:15, col:19> 'const double' lvalue ._x 0x7fa736805c90
| |   |     `-DeclRefExpr 0x7fa736805fc0 <col:15> 'const class P2' lvalue ParmVar 0x7fa736805ae8 'rhs' 'const class P2 &'
| |   `-CompoundAssignOperator 0x7fa736806138 <line:8:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fa736806088 <col:9> 'double' lvalue ->_y 0x7fa736805cf0
| |     | `-CXXThisExpr 0x7fa736806070 <col:9> 'class P2 *' this
| |     `-ImplicitCastExpr 0x7fa736806120 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fa7368060e8 <col:15, col:19> 'const double' lvalue ._y 0x7fa736805cf0
| |         `-DeclRefExpr 0x7fa7368060c0 <col:15> 'const class P2' lvalue ParmVar 0x7fa736805ae8 'rhs' 'const class P2 &'
| |-AccessSpecDecl 0x7fa736805c50 <line:11:1, col:10> col:1 protected
| |-FieldDecl 0x7fa736805c90 <line:12:5, col:12> col:12 referenced _x 'double'
| |-FieldDecl 0x7fa736805cf0 <line:13:5, col:12> col:12 referenced _y 'double'
| |-CXXConstructorDecl 0x7fa736835dd8 <line:1:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default trivial noexcept-unevaluated 0x7fa736835dd8
| | `-ParmVarDecl 0x7fa736835ec0 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7fa736835f58 <col:7> col:7 implicit constexpr P2 'void (class P2 &&)' inline default trivial noexcept-unevaluated 0x7fa736835f58
|   `-ParmVarDecl 0x7fa736836080 <col:7> col:7 'class P2 &&'
|-CXXRecordDecl 0x7fa736806198 <line:16:1, line:28:1> line:16:7 class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl 0x7fa7368062f8 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7fa736806390 <line:17:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fa736835a00 <line:18:5, col:57> col:5 P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7fa7368063d0 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fa736806448 <col:18, col:25> col:25 used y 'double'
| | |-ParmVarDecl 0x7fa7368064c0 <col:28, col:35> col:35 used z 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7fa736836118 <col:40, col:47> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7fa7368360e8 <col:43> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7fa736835d28 <col:43> 'double' lvalue ParmVar 0x7fa7368063d0 'x' 'double'
| | |   `-ImplicitCastExpr 0x7fa736836100 <col:46> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fa736835d50 <col:46> 'double' lvalue ParmVar 0x7fa736806448 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fa736835ca0 '_z' 'double'
| | | `-InitListExpr 0x7fa7368361f0 <col:52, col:54> 'double'
| | |   `-ImplicitCastExpr 0x7fa736836230 <col:53> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fa736836180 <col:53> 'double' lvalue ParmVar 0x7fa7368064c0 'z' 'double'
| | `-CompoundStmt 0x7fa736836288 <col:56, col:57>
| |-CXXMethodDecl 0x7fa736835bc0 <line:20:5, line:24:5> line:20:10 operator+= 'void (const class P3 &)'
| | |-ParmVarDecl 0x7fa736835af8 <col:21, col:31> col:31 used rhs 'const class P3 &'
| | `-CompoundStmt 0x7fa736836508 <line:21:5, line:24:5>
| |   |-CXXMemberCallExpr 0x7fa736836398 <line:22:9, col:27> 'void'
| |   | |-MemberExpr 0x7fa736836320 <col:9, col:21> '<bound member function type>' ->operator+= 0x7fa736805bb0
| |   | | `-ImplicitCastExpr 0x7fa7368363c8 <col:13> 'class P2 *' <UncheckedDerivedToBase (P2)>
| |   | |   `-CXXThisExpr 0x7fa736836308 <col:13> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7fa7368363e8 <col:24> 'const class P2' lvalue <DerivedToBase (P2)>
| |   |   `-DeclRefExpr 0x7fa736836370 <col:24> 'const class P3' lvalue ParmVar 0x7fa736835af8 'rhs' 'const class P3 &'
| |   `-CompoundAssignOperator 0x7fa7368364d0 <line:23:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fa736836420 <col:9> 'double' lvalue ->_z 0x7fa736835ca0
| |     | `-CXXThisExpr 0x7fa736836408 <col:9> 'class P3 *' this
| |     `-ImplicitCastExpr 0x7fa7368364b8 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fa736836480 <col:15, col:19> 'const double' lvalue ._z 0x7fa736835ca0
| |         `-DeclRefExpr 0x7fa736836458 <col:15> 'const class P3' lvalue ParmVar 0x7fa736835af8 'rhs' 'const class P3 &'
| |-AccessSpecDecl 0x7fa736835c60 <line:26:1, col:8> col:1 private
| `-FieldDecl 0x7fa736835ca0 <line:27:5, col:17> col:12 referenced _z 'double'
|   `-FloatingLiteral 0x7fa736835d08 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7fa736836530 <line:30:1, line:35:1> line:30:8 struct C definition
| |-CXXRecordDecl 0x7fa736836658 <col:1, col:8> col:8 implicit struct C
| |-FieldDecl 0x7fa736836708 <line:31:5, col:9> col:9 v 'int'
| |-FieldDecl 0x7fa736836760 <line:32:5, col:10> col:10 c1 'char'
| |-FieldDecl 0x7fa7368367b8 <line:33:5, col:10> col:10 c2 'char'
| `-FieldDecl 0x7fa736836810 <line:34:5, col:10> col:10 c3 'char'
|-CXXRecordDecl 0x7fa736836878 <line:37:1, line:40:1> line:37:8 referenced struct C1 definition
| |-CXXRecordDecl 0x7fa736836a00 <col:1, col:8> col:8 implicit struct C1
| |-FieldDecl 0x7fa736836ab0 <line:38:5, col:9> col:9 referenced v 'int'
| |-FieldDecl 0x7fa736836b08 <line:39:5, col:10> col:10 referenced b1 'char'
| |-CXXConstructorDecl 0x7fa736837b38 <line:37:8> col:8 implicit used C1 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7fa736838430 <col:8>
| |-CXXDestructorDecl 0x7fa736837c18 <col:8> col:8 implicit ~C1 'void (void)' inline default trivial noexcept-unevaluated 0x7fa736837c18
| |-CXXConstructorDecl 0x7fa736837d58 <col:8> col:8 implicit constexpr C1 'void (const struct C1 &)' inline default trivial noexcept-unevaluated 0x7fa736837d58
| | `-ParmVarDecl 0x7fa736837e80 <col:8> col:8 'const struct C1 &'
| |-CXXConstructorDecl 0x7fa736837f18 <col:8> col:8 implicit constexpr C1 'void (struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fa736837f18
| | `-ParmVarDecl 0x7fa736838040 <col:8> col:8 'struct C1 &&'
| |-CXXMethodDecl 0x7fa7368388e8 <col:8> col:8 implicit used constexpr operator= 'struct C1 &(const struct C1 &) noexcept' inline default trivial
| | |-ParmVarDecl 0x7fa736839e00 <col:8> col:8 used 'const struct C1 &'
| | `-CompoundStmt 0x7fa73683a290 <col:8>
| |   |-BinaryOperator 0x7fa73683a128 <col:8> 'int' lvalue '='
| |   | |-MemberExpr 0x7fa73683a078 <col:8> 'int' lvalue ->v 0x7fa736836ab0
| |   | | `-CXXThisExpr 0x7fa73683a060 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fa73683a110 <col:8> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x7fa73683a0d8 <col:8> 'const int' lvalue .v 0x7fa736836ab0
| |   |     `-DeclRefExpr 0x7fa73683a0b0 <col:8> 'const struct C1' lvalue ParmVar 0x7fa736839e00 '' 'const struct C1 &'
| |   |-BinaryOperator 0x7fa73683a218 <col:8> 'char' lvalue '='
| |   | |-MemberExpr 0x7fa73683a168 <col:8> 'char' lvalue ->b1 0x7fa736836b08
| |   | | `-CXXThisExpr 0x7fa73683a150 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fa73683a200 <col:8> 'char' <LValueToRValue>
| |   |   `-MemberExpr 0x7fa73683a1c8 <col:8> 'const char' lvalue .b1 0x7fa736836b08
| |   |     `-DeclRefExpr 0x7fa73683a1a0 <col:8> 'const struct C1' lvalue ParmVar 0x7fa736839e00 '' 'const struct C1 &'
| |   `-ReturnStmt 0x7fa73683a278 <col:8>
| |     `-UnaryOperator 0x7fa73683a258 <col:8> 'struct C1' lvalue prefix '*'
| |       `-CXXThisExpr 0x7fa73683a240 <col:8> 'struct C1 *' this
| `-CXXMethodDecl 0x7fa736839e68 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C1 &(struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fa736839e68
|   `-ParmVarDecl 0x7fa736839f80 <col:8> col:8 'struct C1 &&'
|-CXXRecordDecl 0x7fa736836b70 <line:42:1, line:44:1> line:42:8 referenced struct C2 definition
| |-public 'struct C1'
| |-CXXRecordDecl 0x7fa736836cd8 <col:1, col:8> col:8 implicit struct C2
| |-FieldDecl 0x7fa736836d80 <line:43:5, col:10> col:10 b2 'char'
| |-CXXConstructorDecl 0x7fa736837a00 <line:42:8> col:8 implicit used C2 'void (void) noexcept' inline default trivial
| | |-CXXCtorInitializer 'struct C1'
| | | `-CXXConstructExpr 0x7fa736838448 <col:8> 'struct C1' 'void (void) noexcept'
| | `-CompoundStmt 0x7fa7368384b8 <col:8>
| |-CXXConstructorDecl 0x7fa7368380a8 <col:8> col:8 implicit constexpr C2 'void (const struct C2 &)' inline default trivial noexcept-unevaluated 0x7fa7368380a8
| | `-ParmVarDecl 0x7fa7368381d0 <col:8> col:8 'const struct C2 &'
| `-CXXConstructorDecl 0x7fa736838268 <col:8> col:8 implicit constexpr C2 'void (struct C2 &&)' inline default trivial noexcept-unevaluated 0x7fa736838268
|   `-ParmVarDecl 0x7fa736838390 <col:8> col:8 'struct C2 &&'
|-CXXRecordDecl 0x7fa736836de8 <line:46:1, line:48:1> line:46:8 struct C3 definition
| |-public 'struct C2'
| |-CXXRecordDecl 0x7fa736836f48 <col:1, col:8> col:8 implicit struct C3
| `-FieldDecl 0x7fa736836ff0 <line:47:5, col:10> col:10 b3 'char'
|-FunctionDecl 0x7fa7368370b8 <line:50:1, line:63:1> line:50:5 main 'int (void)'
| `-CompoundStmt 0x7fa73683a5c0 <line:51:1, line:63:1>
|   |-DeclStmt 0x7fa736838558 <line:52:5, col:21>
|   | `-VarDecl 0x7fa7368371f8 <col:5, col:19> col:9 used pc2 'struct C2 *' cinit
|   |   `-CXXNewExpr 0x7fa736838500 <col:15, col:19> 'struct C2 *' Function 0x7fa736837428 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fa7368384d0 <col:19> 'struct C2' 'void (void) noexcept'
|   |-DeclStmt 0x7fa7368386a0 <line:53:5, col:23>
|   | `-VarDecl 0x7fa7368385a8 <col:5, col:21> col:9 used pc1_1 'struct C1 *' cinit
|   |   `-CXXNewExpr 0x7fa736838648 <col:17, col:21> 'struct C1 *' Function 0x7fa736837428 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fa736838618 <col:21> 'struct C1' 'void (void) noexcept'
|   |-DeclStmt 0x7fa7368387e0 <line:54:5, col:23>
|   | `-VarDecl 0x7fa7368386c8 <col:5, col:21> col:9 used pc2_2 'struct C1 *' cinit
|   |   `-ImplicitCastExpr 0x7fa7368387c0 <col:17, col:21> 'struct C1 *' <DerivedToBase (C1)>
|   |     `-CXXNewExpr 0x7fa736838768 <col:17, col:21> 'struct C2 *' Function 0x7fa736837428 'operator new' 'void *(unsigned long)'
|   |       `-CXXConstructExpr 0x7fa736838738 <col:21> 'struct C2' 'void (void) noexcept'
|   |-CXXOperatorCallExpr 0x7fa73683a330 <line:56:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fa73683a318 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fa73683a038 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fa7368388e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fa736838838 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fa736838820 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fa7368387f8 <col:6> 'struct C1 *' lvalue Var 0x7fa7368385a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fa736839fe8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fa736838898 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fa736838880 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fa736838858 <col:15> 'struct C1 *' lvalue Var 0x7fa7368386c8 'pc2_2' 'struct C1 *'
|   |-BinaryOperator 0x7fa73683a400 <line:58:5, col:13> 'struct C1 *' lvalue '='
|   | |-DeclRefExpr 0x7fa73683a378 <col:5> 'struct C1 *' lvalue Var 0x7fa7368385a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fa73683a3e0 <col:13> 'struct C1 *' <DerivedToBase (C1)>
|   |   `-ImplicitCastExpr 0x7fa73683a3c8 <col:13> 'struct C2 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fa73683a3a0 <col:13> 'struct C2 *' lvalue Var 0x7fa7368371f8 'pc2' 'struct C2 *'
|   |-CXXOperatorCallExpr 0x7fa73683a540 <line:61:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fa73683a528 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fa73683a500 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fa7368388e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fa73683a468 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fa73683a450 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fa73683a428 <col:6> 'struct C1 *' lvalue Var 0x7fa7368385a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fa73683a4e8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fa73683a4c8 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fa73683a4b0 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fa73683a488 <col:15> 'struct C1 *' lvalue Var 0x7fa7368386c8 'pc2_2' 'struct C1 *'
|   `-ReturnStmt 0x7fa73683a5a8 <line:62:5, col:12>
|     `-IntegerLiteral 0x7fa73683a588 <col:12> 'int' 0
|-FunctionDecl 0x7fa736837428 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fa736837508 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fa7368374c0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fa736837570 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fa736837650 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fa736837608 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fa736837738 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fa736837818 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fa7368377d0 <<invalid sloc>> Implicit Default
`-FunctionDecl 0x7fa736837880 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
  |-ParmVarDecl 0x7fa736837960 <<invalid sloc>> <invalid sloc> implicit 'void *'
  `-VisibilityAttr 0x7fa736837918 <<invalid sloc>> Implicit Default

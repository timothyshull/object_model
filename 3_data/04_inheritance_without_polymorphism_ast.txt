TranslationUnitDecl 0x7fad9f8324d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fad9f832a60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fad9f832740 '__int128'
|-TypedefDecl 0x7fad9f832ad0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fad9f832760 'unsigned __int128'
|-TypedefDecl 0x7fad9f832e18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fad9f832bc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fad9f832b28 '__NSConstantString_tag'
|-TypedefDecl 0x7fad9f832eb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fad9f832e70 'char *'
|   `-BuiltinType 0x7fad9f832560 'char'
|-TypedefDecl 0x7fad9f865a00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fad9f833190 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fad9f832fa0 'struct __va_list_tag'
|     `-CXXRecord 0x7fad9f832f08 '__va_list_tag'
|-CXXRecordDecl 0x7fad9f865a58 <object_model_refined/3_data/04_inheritance_without_polymorphism.cpp:1:1, line:14:1> line:1:7 referenced class P2 definition
| |-CXXRecordDecl 0x7fad9f865b78 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7fad9f865c10 <line:2:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fad9f865df0 <line:3:5, col:44> col:5 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7fad9f865c50 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fad9f865cc8 <col:18, col:25> col:25 used y 'double'
| | |-CXXCtorInitializer Field 0x7fad9f866090 '_x' 'double'
| | | `-InitListExpr 0x7fad9f8661c8 <col:32, col:34> 'double'
| | |   `-ImplicitCastExpr 0x7fad9f866208 <col:33> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fad9f866158 <col:33> 'double' lvalue ParmVar 0x7fad9f865c50 'x' 'double'
| | |-CXXCtorInitializer Field 0x7fad9f8660f0 '_y' 'double'
| | | `-InitListExpr 0x7fad9f8662c0 <col:39, col:41> 'double'
| | |   `-ImplicitCastExpr 0x7fad9f866300 <col:40> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fad9f866250 <col:40> 'double' lvalue ParmVar 0x7fad9f865cc8 'y' 'double'
| | `-CompoundStmt 0x7fad9f866358 <col:43, col:44>
| |-CXXMethodDecl 0x7fad9f865fb0 <line:5:5, line:9:5> line:5:10 used operator+= 'void (const class P2 &)'
| | |-ParmVarDecl 0x7fad9f865ee8 <col:21, col:31> col:31 used rhs 'const class P2 &'
| | `-CompoundStmt 0x7fad9f866570 <line:6:5, line:9:5>
| |   |-CompoundAssignOperator 0x7fad9f866438 <line:7:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |   | |-MemberExpr 0x7fad9f866388 <col:9> 'double' lvalue ->_x 0x7fad9f866090
| |   | | `-CXXThisExpr 0x7fad9f866370 <col:9> 'class P2 *' this
| |   | `-ImplicitCastExpr 0x7fad9f866420 <col:15, col:19> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7fad9f8663e8 <col:15, col:19> 'const double' lvalue ._x 0x7fad9f866090
| |   |     `-DeclRefExpr 0x7fad9f8663c0 <col:15> 'const class P2' lvalue ParmVar 0x7fad9f865ee8 'rhs' 'const class P2 &'
| |   `-CompoundAssignOperator 0x7fad9f866538 <line:8:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fad9f866488 <col:9> 'double' lvalue ->_y 0x7fad9f8660f0
| |     | `-CXXThisExpr 0x7fad9f866470 <col:9> 'class P2 *' this
| |     `-ImplicitCastExpr 0x7fad9f866520 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fad9f8664e8 <col:15, col:19> 'const double' lvalue ._y 0x7fad9f8660f0
| |         `-DeclRefExpr 0x7fad9f8664c0 <col:15> 'const class P2' lvalue ParmVar 0x7fad9f865ee8 'rhs' 'const class P2 &'
| |-AccessSpecDecl 0x7fad9f866050 <line:11:1, col:10> col:1 protected
| |-FieldDecl 0x7fad9f866090 <line:12:5, col:12> col:12 referenced _x 'double'
| |-FieldDecl 0x7fad9f8660f0 <line:13:5, col:12> col:12 referenced _y 'double'
| |-CXXConstructorDecl 0x7fad9f8911d8 <line:1:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default trivial noexcept-unevaluated 0x7fad9f8911d8
| | `-ParmVarDecl 0x7fad9f8912c0 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7fad9f891358 <col:7> col:7 implicit constexpr P2 'void (class P2 &&)' inline default trivial noexcept-unevaluated 0x7fad9f891358
|   `-ParmVarDecl 0x7fad9f891480 <col:7> col:7 'class P2 &&'
|-CXXRecordDecl 0x7fad9f866598 <line:16:1, line:28:1> line:16:7 class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl 0x7fad9f8666f8 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7fad9f866790 <line:17:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fad9f890e00 <line:18:5, col:57> col:5 P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7fad9f8667d0 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fad9f866848 <col:18, col:25> col:25 used y 'double'
| | |-ParmVarDecl 0x7fad9f8668c0 <col:28, col:35> col:35 used z 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7fad9f891518 <col:40, col:47> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7fad9f8914e8 <col:43> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7fad9f891128 <col:43> 'double' lvalue ParmVar 0x7fad9f8667d0 'x' 'double'
| | |   `-ImplicitCastExpr 0x7fad9f891500 <col:46> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fad9f891150 <col:46> 'double' lvalue ParmVar 0x7fad9f866848 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fad9f8910a0 '_z' 'double'
| | | `-InitListExpr 0x7fad9f8915f0 <col:52, col:54> 'double'
| | |   `-ImplicitCastExpr 0x7fad9f891630 <col:53> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fad9f891580 <col:53> 'double' lvalue ParmVar 0x7fad9f8668c0 'z' 'double'
| | `-CompoundStmt 0x7fad9f891688 <col:56, col:57>
| |-CXXMethodDecl 0x7fad9f890fc0 <line:20:5, line:24:5> line:20:10 operator+= 'void (const class P3 &)'
| | |-ParmVarDecl 0x7fad9f890ef8 <col:21, col:31> col:31 used rhs 'const class P3 &'
| | `-CompoundStmt 0x7fad9f891908 <line:21:5, line:24:5>
| |   |-CXXMemberCallExpr 0x7fad9f891798 <line:22:9, col:27> 'void'
| |   | |-MemberExpr 0x7fad9f891720 <col:9, col:21> '<bound member function type>' ->operator+= 0x7fad9f865fb0
| |   | | `-ImplicitCastExpr 0x7fad9f8917c8 <col:13> 'class P2 *' <UncheckedDerivedToBase (P2)>
| |   | |   `-CXXThisExpr 0x7fad9f891708 <col:13> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7fad9f8917e8 <col:24> 'const class P2' lvalue <DerivedToBase (P2)>
| |   |   `-DeclRefExpr 0x7fad9f891770 <col:24> 'const class P3' lvalue ParmVar 0x7fad9f890ef8 'rhs' 'const class P3 &'
| |   `-CompoundAssignOperator 0x7fad9f8918d0 <line:23:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fad9f891820 <col:9> 'double' lvalue ->_z 0x7fad9f8910a0
| |     | `-CXXThisExpr 0x7fad9f891808 <col:9> 'class P3 *' this
| |     `-ImplicitCastExpr 0x7fad9f8918b8 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fad9f891880 <col:15, col:19> 'const double' lvalue ._z 0x7fad9f8910a0
| |         `-DeclRefExpr 0x7fad9f891858 <col:15> 'const class P3' lvalue ParmVar 0x7fad9f890ef8 'rhs' 'const class P3 &'
| |-AccessSpecDecl 0x7fad9f891060 <line:26:1, col:8> col:1 private
| `-FieldDecl 0x7fad9f8910a0 <line:27:5, col:17> col:12 referenced _z 'double'
|   `-FloatingLiteral 0x7fad9f891108 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7fad9f891930 <line:30:1, line:35:1> line:30:8 struct C definition
| |-CXXRecordDecl 0x7fad9f891a58 <col:1, col:8> col:8 implicit struct C
| |-FieldDecl 0x7fad9f891b08 <line:31:5, col:9> col:9 v 'int'
| |-FieldDecl 0x7fad9f891b60 <line:32:5, col:10> col:10 c1 'char'
| |-FieldDecl 0x7fad9f891bb8 <line:33:5, col:10> col:10 c2 'char'
| `-FieldDecl 0x7fad9f891c10 <line:34:5, col:10> col:10 c3 'char'
|-CXXRecordDecl 0x7fad9f891c78 <line:37:1, line:40:1> line:37:8 referenced struct C1 definition
| |-CXXRecordDecl 0x7fad9f891e00 <col:1, col:8> col:8 implicit struct C1
| |-FieldDecl 0x7fad9f891eb0 <line:38:5, col:9> col:9 referenced v 'int'
| |-FieldDecl 0x7fad9f891f08 <line:39:5, col:10> col:10 referenced b1 'char'
| |-CXXConstructorDecl 0x7fad9f893738 <line:37:8> col:8 implicit used C1 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7fad9f894030 <col:8>
| |-CXXDestructorDecl 0x7fad9f893818 <col:8> col:8 implicit ~C1 'void (void)' inline default trivial noexcept-unevaluated 0x7fad9f893818
| |-CXXConstructorDecl 0x7fad9f893958 <col:8> col:8 implicit constexpr C1 'void (const struct C1 &)' inline default trivial noexcept-unevaluated 0x7fad9f893958
| | `-ParmVarDecl 0x7fad9f893a80 <col:8> col:8 'const struct C1 &'
| |-CXXConstructorDecl 0x7fad9f893b18 <col:8> col:8 implicit constexpr C1 'void (struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fad9f893b18
| | `-ParmVarDecl 0x7fad9f893c40 <col:8> col:8 'struct C1 &&'
| |-CXXMethodDecl 0x7fad9f8944e8 <col:8> col:8 implicit used constexpr operator= 'struct C1 &(const struct C1 &) noexcept' inline default trivial
| | |-ParmVarDecl 0x7fad9f895e00 <col:8> col:8 used 'const struct C1 &'
| | `-CompoundStmt 0x7fad9f896290 <col:8>
| |   |-BinaryOperator 0x7fad9f896128 <col:8> 'int' lvalue '='
| |   | |-MemberExpr 0x7fad9f896078 <col:8> 'int' lvalue ->v 0x7fad9f891eb0
| |   | | `-CXXThisExpr 0x7fad9f896060 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fad9f896110 <col:8> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x7fad9f8960d8 <col:8> 'const int' lvalue .v 0x7fad9f891eb0
| |   |     `-DeclRefExpr 0x7fad9f8960b0 <col:8> 'const struct C1' lvalue ParmVar 0x7fad9f895e00 '' 'const struct C1 &'
| |   |-BinaryOperator 0x7fad9f896218 <col:8> 'char' lvalue '='
| |   | |-MemberExpr 0x7fad9f896168 <col:8> 'char' lvalue ->b1 0x7fad9f891f08
| |   | | `-CXXThisExpr 0x7fad9f896150 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fad9f896200 <col:8> 'char' <LValueToRValue>
| |   |   `-MemberExpr 0x7fad9f8961c8 <col:8> 'const char' lvalue .b1 0x7fad9f891f08
| |   |     `-DeclRefExpr 0x7fad9f8961a0 <col:8> 'const struct C1' lvalue ParmVar 0x7fad9f895e00 '' 'const struct C1 &'
| |   `-ReturnStmt 0x7fad9f896278 <col:8>
| |     `-UnaryOperator 0x7fad9f896258 <col:8> 'struct C1' lvalue prefix '*'
| |       `-CXXThisExpr 0x7fad9f896240 <col:8> 'struct C1 *' this
| `-CXXMethodDecl 0x7fad9f895e68 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C1 &(struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fad9f895e68
|   `-ParmVarDecl 0x7fad9f895f80 <col:8> col:8 'struct C1 &&'
|-CXXRecordDecl 0x7fad9f891f70 <line:42:1, line:44:1> line:42:8 referenced struct C2 definition
| |-public 'struct C1'
| |-CXXRecordDecl 0x7fad9f8920d8 <col:1, col:8> col:8 implicit struct C2
| |-FieldDecl 0x7fad9f892180 <line:43:5, col:10> col:10 b2 'char'
| |-CXXConstructorDecl 0x7fad9f893600 <line:42:8> col:8 implicit used C2 'void (void) noexcept' inline default trivial
| | |-CXXCtorInitializer 'struct C1'
| | | `-CXXConstructExpr 0x7fad9f894048 <col:8> 'struct C1' 'void (void) noexcept'
| | `-CompoundStmt 0x7fad9f8940b8 <col:8>
| |-CXXConstructorDecl 0x7fad9f893ca8 <col:8> col:8 implicit constexpr C2 'void (const struct C2 &)' inline default trivial noexcept-unevaluated 0x7fad9f893ca8
| | `-ParmVarDecl 0x7fad9f893dd0 <col:8> col:8 'const struct C2 &'
| `-CXXConstructorDecl 0x7fad9f893e68 <col:8> col:8 implicit constexpr C2 'void (struct C2 &&)' inline default trivial noexcept-unevaluated 0x7fad9f893e68
|   `-ParmVarDecl 0x7fad9f893f90 <col:8> col:8 'struct C2 &&'
|-CXXRecordDecl 0x7fad9f8921e8 <line:46:1, line:48:1> line:46:8 struct C3 definition
| |-public 'struct C2'
| |-CXXRecordDecl 0x7fad9f892348 <col:1, col:8> col:8 implicit struct C3
| `-FieldDecl 0x7fad9f8923f0 <line:47:5, col:10> col:10 b3 'char'
|-FunctionDecl 0x7fad9f8924b8 <line:50:1, line:63:1> line:50:5 main 'int (void)'
| `-CompoundStmt 0x7fad9f8965c0 <line:51:1, line:63:1>
|   |-DeclStmt 0x7fad9f894158 <line:52:5, col:21>
|   | `-VarDecl 0x7fad9f8925f8 <col:5, col:19> col:9 used pc2 'struct C2 *' cinit
|   |   `-CXXNewExpr 0x7fad9f894100 <col:15, col:19> 'struct C2 *' Function 0x7fad9f892808 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fad9f8940d0 <col:19> 'struct C2' 'void (void) noexcept'
|   |-DeclStmt 0x7fad9f8942a0 <line:53:5, col:23>
|   | `-VarDecl 0x7fad9f8941a8 <col:5, col:21> col:9 used pc1_1 'struct C1 *' cinit
|   |   `-CXXNewExpr 0x7fad9f894248 <col:17, col:21> 'struct C1 *' Function 0x7fad9f892808 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fad9f894218 <col:21> 'struct C1' 'void (void) noexcept'
|   |-DeclStmt 0x7fad9f8943e0 <line:54:5, col:23>
|   | `-VarDecl 0x7fad9f8942c8 <col:5, col:21> col:9 used pc2_2 'struct C1 *' cinit
|   |   `-ImplicitCastExpr 0x7fad9f8943c0 <col:17, col:21> 'struct C1 *' <DerivedToBase (C1)>
|   |     `-CXXNewExpr 0x7fad9f894368 <col:17, col:21> 'struct C2 *' Function 0x7fad9f892808 'operator new' 'void *(unsigned long)'
|   |       `-CXXConstructExpr 0x7fad9f894338 <col:21> 'struct C2' 'void (void) noexcept'
|   |-CXXOperatorCallExpr 0x7fad9f896330 <line:56:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fad9f896318 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fad9f896038 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fad9f8944e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fad9f894438 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fad9f894420 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fad9f8943f8 <col:6> 'struct C1 *' lvalue Var 0x7fad9f8941a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fad9f895fe8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fad9f894498 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fad9f894480 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fad9f894458 <col:15> 'struct C1 *' lvalue Var 0x7fad9f8942c8 'pc2_2' 'struct C1 *'
|   |-BinaryOperator 0x7fad9f896400 <line:58:5, col:13> 'struct C1 *' lvalue '='
|   | |-DeclRefExpr 0x7fad9f896378 <col:5> 'struct C1 *' lvalue Var 0x7fad9f8941a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fad9f8963e0 <col:13> 'struct C1 *' <DerivedToBase (C1)>
|   |   `-ImplicitCastExpr 0x7fad9f8963c8 <col:13> 'struct C2 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fad9f8963a0 <col:13> 'struct C2 *' lvalue Var 0x7fad9f8925f8 'pc2' 'struct C2 *'
|   |-CXXOperatorCallExpr 0x7fad9f896540 <line:61:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fad9f896528 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fad9f896500 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fad9f8944e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fad9f896468 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fad9f896450 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fad9f896428 <col:6> 'struct C1 *' lvalue Var 0x7fad9f8941a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fad9f8964e8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fad9f8964c8 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fad9f8964b0 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fad9f896488 <col:15> 'struct C1 *' lvalue Var 0x7fad9f8942c8 'pc2_2' 'struct C1 *'
|   `-ReturnStmt 0x7fad9f8965a8 <line:62:5, col:12>
|     `-IntegerLiteral 0x7fad9f896588 <col:12> 'int' 0
|-FunctionDecl 0x7fad9f892808 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fad9f8928e8 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fad9f8928a0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fad9f892950 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fad9f892a30 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fad9f8929e8 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fad9f892b18 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fad9f892bf8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fad9f892bb0 <<invalid sloc>> Implicit Default
`-FunctionDecl 0x7fad9f892c60 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
  |-ParmVarDecl 0x7fad9f892d40 <<invalid sloc>> <invalid sloc> implicit 'void *'
  `-VisibilityAttr 0x7fad9f892cf8 <<invalid sloc>> Implicit Default

TranslationUnitDecl 0x7fd1b70186d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd1b7018c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd1b7018940 '__int128'
|-TypedefDecl 0x7fd1b7018cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd1b7018960 'unsigned __int128'
|-TypedefDecl 0x7fd1b7019018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd1b7018dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fd1b7018d28 '__NSConstantString_tag'
|-TypedefDecl 0x7fd1b70190b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd1b7019070 'char *'
|   `-BuiltinType 0x7fd1b7018760 'char'
|-TypedefDecl 0x7fd1b681ac00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd1b7019390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd1b70191a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fd1b7019108 '__va_list_tag'
|-CXXRecordDecl 0x7fd1b681ac58 <object_model_refined/3_data/04_inheritance_without_polymorphism.cpp:1:1, line:14:1> line:1:7 referenced class P2 definition
| |-CXXRecordDecl 0x7fd1b681ad78 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7fd1b681ae10 <line:2:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fd1b681aff0 <line:3:5, col:44> col:5 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7fd1b681ae50 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fd1b681aec8 <col:18, col:25> col:25 used y 'double'
| | |-CXXCtorInitializer Field 0x7fd1b681b290 '_x' 'double'
| | | `-InitListExpr 0x7fd1b681b3c8 <col:32, col:34> 'double'
| | |   `-ImplicitCastExpr 0x7fd1b681b408 <col:33> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fd1b681b358 <col:33> 'double' lvalue ParmVar 0x7fd1b681ae50 'x' 'double'
| | |-CXXCtorInitializer Field 0x7fd1b681b2f0 '_y' 'double'
| | | `-InitListExpr 0x7fd1b681b4c0 <col:39, col:41> 'double'
| | |   `-ImplicitCastExpr 0x7fd1b681b500 <col:40> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fd1b681b450 <col:40> 'double' lvalue ParmVar 0x7fd1b681aec8 'y' 'double'
| | `-CompoundStmt 0x7fd1b681b558 <col:43, col:44>
| |-CXXMethodDecl 0x7fd1b681b1b0 <line:5:5, line:9:5> line:5:10 used operator+= 'void (const class P2 &)'
| | |-ParmVarDecl 0x7fd1b681b0e8 <col:21, col:31> col:31 used rhs 'const class P2 &'
| | `-CompoundStmt 0x7fd1b681b770 <line:6:5, line:9:5>
| |   |-CompoundAssignOperator 0x7fd1b681b638 <line:7:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |   | |-MemberExpr 0x7fd1b681b588 <col:9> 'double' lvalue ->_x 0x7fd1b681b290
| |   | | `-CXXThisExpr 0x7fd1b681b570 <col:9> 'class P2 *' this
| |   | `-ImplicitCastExpr 0x7fd1b681b620 <col:15, col:19> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7fd1b681b5e8 <col:15, col:19> 'const double' lvalue ._x 0x7fd1b681b290
| |   |     `-DeclRefExpr 0x7fd1b681b5c0 <col:15> 'const class P2' lvalue ParmVar 0x7fd1b681b0e8 'rhs' 'const class P2 &'
| |   `-CompoundAssignOperator 0x7fd1b681b738 <line:8:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fd1b681b688 <col:9> 'double' lvalue ->_y 0x7fd1b681b2f0
| |     | `-CXXThisExpr 0x7fd1b681b670 <col:9> 'class P2 *' this
| |     `-ImplicitCastExpr 0x7fd1b681b720 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fd1b681b6e8 <col:15, col:19> 'const double' lvalue ._y 0x7fd1b681b2f0
| |         `-DeclRefExpr 0x7fd1b681b6c0 <col:15> 'const class P2' lvalue ParmVar 0x7fd1b681b0e8 'rhs' 'const class P2 &'
| |-AccessSpecDecl 0x7fd1b681b250 <line:11:1, col:10> col:1 protected
| |-FieldDecl 0x7fd1b681b290 <line:12:5, col:12> col:12 referenced _x 'double'
| |-FieldDecl 0x7fd1b681b2f0 <line:13:5, col:12> col:12 referenced _y 'double'
| |-CXXConstructorDecl 0x7fd1b684d5d8 <line:1:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default trivial noexcept-unevaluated 0x7fd1b684d5d8
| | `-ParmVarDecl 0x7fd1b684d6c0 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7fd1b684d758 <col:7> col:7 implicit constexpr P2 'void (class P2 &&)' inline default trivial noexcept-unevaluated 0x7fd1b684d758
|   `-ParmVarDecl 0x7fd1b684d880 <col:7> col:7 'class P2 &&'
|-CXXRecordDecl 0x7fd1b681b798 <line:16:1, line:28:1> line:16:7 class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl 0x7fd1b681b8f8 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7fd1b681b990 <line:17:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fd1b684d200 <line:18:5, col:57> col:5 P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7fd1b681b9d0 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7fd1b681ba48 <col:18, col:25> col:25 used y 'double'
| | |-ParmVarDecl 0x7fd1b681bac0 <col:28, col:35> col:35 used z 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7fd1b684d918 <col:40, col:47> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7fd1b684d8e8 <col:43> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7fd1b684d528 <col:43> 'double' lvalue ParmVar 0x7fd1b681b9d0 'x' 'double'
| | |   `-ImplicitCastExpr 0x7fd1b684d900 <col:46> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fd1b684d550 <col:46> 'double' lvalue ParmVar 0x7fd1b681ba48 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fd1b684d4a0 '_z' 'double'
| | | `-InitListExpr 0x7fd1b684d9f0 <col:52, col:54> 'double'
| | |   `-ImplicitCastExpr 0x7fd1b684da30 <col:53> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fd1b684d980 <col:53> 'double' lvalue ParmVar 0x7fd1b681bac0 'z' 'double'
| | `-CompoundStmt 0x7fd1b684da88 <col:56, col:57>
| |-CXXMethodDecl 0x7fd1b684d3c0 <line:20:5, line:24:5> line:20:10 operator+= 'void (const class P3 &)'
| | |-ParmVarDecl 0x7fd1b684d2f8 <col:21, col:31> col:31 used rhs 'const class P3 &'
| | `-CompoundStmt 0x7fd1b684dd08 <line:21:5, line:24:5>
| |   |-CXXMemberCallExpr 0x7fd1b684db98 <line:22:9, col:27> 'void'
| |   | |-MemberExpr 0x7fd1b684db20 <col:9, col:21> '<bound member function type>' ->operator+= 0x7fd1b681b1b0
| |   | | `-ImplicitCastExpr 0x7fd1b684dbc8 <col:13> 'class P2 *' <UncheckedDerivedToBase (P2)>
| |   | |   `-CXXThisExpr 0x7fd1b684db08 <col:13> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7fd1b684dbe8 <col:24> 'const class P2' lvalue <DerivedToBase (P2)>
| |   |   `-DeclRefExpr 0x7fd1b684db70 <col:24> 'const class P3' lvalue ParmVar 0x7fd1b684d2f8 'rhs' 'const class P3 &'
| |   `-CompoundAssignOperator 0x7fd1b684dcd0 <line:23:9, col:19> 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fd1b684dc20 <col:9> 'double' lvalue ->_z 0x7fd1b684d4a0
| |     | `-CXXThisExpr 0x7fd1b684dc08 <col:9> 'class P3 *' this
| |     `-ImplicitCastExpr 0x7fd1b684dcb8 <col:15, col:19> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fd1b684dc80 <col:15, col:19> 'const double' lvalue ._z 0x7fd1b684d4a0
| |         `-DeclRefExpr 0x7fd1b684dc58 <col:15> 'const class P3' lvalue ParmVar 0x7fd1b684d2f8 'rhs' 'const class P3 &'
| |-AccessSpecDecl 0x7fd1b684d460 <line:26:1, col:8> col:1 private
| `-FieldDecl 0x7fd1b684d4a0 <line:27:5, col:17> col:12 referenced _z 'double'
|   `-FloatingLiteral 0x7fd1b684d508 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7fd1b684dd30 <line:30:1, line:35:1> line:30:8 struct C definition
| |-CXXRecordDecl 0x7fd1b684de58 <col:1, col:8> col:8 implicit struct C
| |-FieldDecl 0x7fd1b684df08 <line:31:5, col:9> col:9 v 'int'
| |-FieldDecl 0x7fd1b684df60 <line:32:5, col:10> col:10 c1 'char'
| |-FieldDecl 0x7fd1b684dfb8 <line:33:5, col:10> col:10 c2 'char'
| `-FieldDecl 0x7fd1b684e010 <line:34:5, col:10> col:10 c3 'char'
|-CXXRecordDecl 0x7fd1b684e078 <line:37:1, line:40:1> line:37:8 referenced struct C1 definition
| |-CXXRecordDecl 0x7fd1b684e200 <col:1, col:8> col:8 implicit struct C1
| |-FieldDecl 0x7fd1b684e2b0 <line:38:5, col:9> col:9 referenced v 'int'
| |-FieldDecl 0x7fd1b684e308 <line:39:5, col:10> col:10 referenced b1 'char'
| |-CXXConstructorDecl 0x7fd1b684fb38 <line:37:8> col:8 implicit used C1 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7fd1b6850430 <col:8>
| |-CXXDestructorDecl 0x7fd1b684fc18 <col:8> col:8 implicit ~C1 'void (void)' inline default trivial noexcept-unevaluated 0x7fd1b684fc18
| |-CXXConstructorDecl 0x7fd1b684fd58 <col:8> col:8 implicit constexpr C1 'void (const struct C1 &)' inline default trivial noexcept-unevaluated 0x7fd1b684fd58
| | `-ParmVarDecl 0x7fd1b684fe80 <col:8> col:8 'const struct C1 &'
| |-CXXConstructorDecl 0x7fd1b684ff18 <col:8> col:8 implicit constexpr C1 'void (struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fd1b684ff18
| | `-ParmVarDecl 0x7fd1b6850040 <col:8> col:8 'struct C1 &&'
| |-CXXMethodDecl 0x7fd1b68508e8 <col:8> col:8 implicit used constexpr operator= 'struct C1 &(const struct C1 &) noexcept' inline default trivial
| | |-ParmVarDecl 0x7fd1b6852200 <col:8> col:8 used 'const struct C1 &'
| | `-CompoundStmt 0x7fd1b6852690 <col:8>
| |   |-BinaryOperator 0x7fd1b6852528 <col:8> 'int' lvalue '='
| |   | |-MemberExpr 0x7fd1b6852478 <col:8> 'int' lvalue ->v 0x7fd1b684e2b0
| |   | | `-CXXThisExpr 0x7fd1b6852460 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fd1b6852510 <col:8> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x7fd1b68524d8 <col:8> 'const int' lvalue .v 0x7fd1b684e2b0
| |   |     `-DeclRefExpr 0x7fd1b68524b0 <col:8> 'const struct C1' lvalue ParmVar 0x7fd1b6852200 '' 'const struct C1 &'
| |   |-BinaryOperator 0x7fd1b6852618 <col:8> 'char' lvalue '='
| |   | |-MemberExpr 0x7fd1b6852568 <col:8> 'char' lvalue ->b1 0x7fd1b684e308
| |   | | `-CXXThisExpr 0x7fd1b6852550 <col:8> 'struct C1 *' this
| |   | `-ImplicitCastExpr 0x7fd1b6852600 <col:8> 'char' <LValueToRValue>
| |   |   `-MemberExpr 0x7fd1b68525c8 <col:8> 'const char' lvalue .b1 0x7fd1b684e308
| |   |     `-DeclRefExpr 0x7fd1b68525a0 <col:8> 'const struct C1' lvalue ParmVar 0x7fd1b6852200 '' 'const struct C1 &'
| |   `-ReturnStmt 0x7fd1b6852678 <col:8>
| |     `-UnaryOperator 0x7fd1b6852658 <col:8> 'struct C1' lvalue prefix '*'
| |       `-CXXThisExpr 0x7fd1b6852640 <col:8> 'struct C1 *' this
| `-CXXMethodDecl 0x7fd1b6852268 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct C1 &(struct C1 &&)' inline default trivial noexcept-unevaluated 0x7fd1b6852268
|   `-ParmVarDecl 0x7fd1b6852380 <col:8> col:8 'struct C1 &&'
|-CXXRecordDecl 0x7fd1b684e370 <line:42:1, line:44:1> line:42:8 referenced struct C2 definition
| |-public 'struct C1'
| |-CXXRecordDecl 0x7fd1b684e4d8 <col:1, col:8> col:8 implicit struct C2
| |-FieldDecl 0x7fd1b684e580 <line:43:5, col:10> col:10 b2 'char'
| |-CXXConstructorDecl 0x7fd1b684fa00 <line:42:8> col:8 implicit used C2 'void (void) noexcept' inline default trivial
| | |-CXXCtorInitializer 'struct C1'
| | | `-CXXConstructExpr 0x7fd1b6850448 <col:8> 'struct C1' 'void (void) noexcept'
| | `-CompoundStmt 0x7fd1b68504b8 <col:8>
| |-CXXConstructorDecl 0x7fd1b68500a8 <col:8> col:8 implicit constexpr C2 'void (const struct C2 &)' inline default trivial noexcept-unevaluated 0x7fd1b68500a8
| | `-ParmVarDecl 0x7fd1b68501d0 <col:8> col:8 'const struct C2 &'
| `-CXXConstructorDecl 0x7fd1b6850268 <col:8> col:8 implicit constexpr C2 'void (struct C2 &&)' inline default trivial noexcept-unevaluated 0x7fd1b6850268
|   `-ParmVarDecl 0x7fd1b6850390 <col:8> col:8 'struct C2 &&'
|-CXXRecordDecl 0x7fd1b684e5e8 <line:46:1, line:48:1> line:46:8 struct C3 definition
| |-public 'struct C2'
| |-CXXRecordDecl 0x7fd1b684e748 <col:1, col:8> col:8 implicit struct C3
| `-FieldDecl 0x7fd1b684e7f0 <line:47:5, col:10> col:10 b3 'char'
|-FunctionDecl 0x7fd1b684e8b8 <line:50:1, line:63:1> line:50:5 main 'int (void)'
| `-CompoundStmt 0x7fd1b68529c0 <line:51:1, line:63:1>
|   |-DeclStmt 0x7fd1b6850558 <line:52:5, col:21>
|   | `-VarDecl 0x7fd1b684e9f8 <col:5, col:19> col:9 used pc2 'struct C2 *' cinit
|   |   `-CXXNewExpr 0x7fd1b6850500 <col:15, col:19> 'struct C2 *' Function 0x7fd1b684ec28 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fd1b68504d0 <col:19> 'struct C2' 'void (void) noexcept'
|   |-DeclStmt 0x7fd1b68506a0 <line:53:5, col:23>
|   | `-VarDecl 0x7fd1b68505a8 <col:5, col:21> col:9 used pc1_1 'struct C1 *' cinit
|   |   `-CXXNewExpr 0x7fd1b6850648 <col:17, col:21> 'struct C1 *' Function 0x7fd1b684ec28 'operator new' 'void *(unsigned long)'
|   |     `-CXXConstructExpr 0x7fd1b6850618 <col:21> 'struct C1' 'void (void) noexcept'
|   |-DeclStmt 0x7fd1b68507e0 <line:54:5, col:23>
|   | `-VarDecl 0x7fd1b68506c8 <col:5, col:21> col:9 used pc2_2 'struct C1 *' cinit
|   |   `-ImplicitCastExpr 0x7fd1b68507c0 <col:17, col:21> 'struct C1 *' <DerivedToBase (C1)>
|   |     `-CXXNewExpr 0x7fd1b6850768 <col:17, col:21> 'struct C2 *' Function 0x7fd1b684ec28 'operator new' 'void *(unsigned long)'
|   |       `-CXXConstructExpr 0x7fd1b6850738 <col:21> 'struct C2' 'void (void) noexcept'
|   |-CXXOperatorCallExpr 0x7fd1b6852730 <line:56:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fd1b6852718 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fd1b6852438 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fd1b68508e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fd1b6850838 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fd1b6850820 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fd1b68507f8 <col:6> 'struct C1 *' lvalue Var 0x7fd1b68505a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fd1b68523e8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fd1b6850898 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fd1b6850880 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fd1b6850858 <col:15> 'struct C1 *' lvalue Var 0x7fd1b68506c8 'pc2_2' 'struct C1 *'
|   |-BinaryOperator 0x7fd1b6852800 <line:58:5, col:13> 'struct C1 *' lvalue '='
|   | |-DeclRefExpr 0x7fd1b6852778 <col:5> 'struct C1 *' lvalue Var 0x7fd1b68505a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fd1b68527e0 <col:13> 'struct C1 *' <DerivedToBase (C1)>
|   |   `-ImplicitCastExpr 0x7fd1b68527c8 <col:13> 'struct C2 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fd1b68527a0 <col:13> 'struct C2 *' lvalue Var 0x7fd1b684e9f8 'pc2' 'struct C2 *'
|   |-CXXOperatorCallExpr 0x7fd1b6852940 <line:61:5, col:15> 'struct C1' lvalue
|   | |-ImplicitCastExpr 0x7fd1b6852928 <col:12> 'struct C1 &(*)(const struct C1 &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fd1b6852900 <col:12> 'struct C1 &(const struct C1 &) noexcept' lvalue CXXMethod 0x7fd1b68508e8 'operator=' 'struct C1 &(const struct C1 &) noexcept'
|   | |-UnaryOperator 0x7fd1b6852868 <col:5, col:6> 'struct C1' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fd1b6852850 <col:6> 'struct C1 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fd1b6852828 <col:6> 'struct C1 *' lvalue Var 0x7fd1b68505a8 'pc1_1' 'struct C1 *'
|   | `-ImplicitCastExpr 0x7fd1b68528e8 <col:14, col:15> 'const struct C1' lvalue <NoOp>
|   |   `-UnaryOperator 0x7fd1b68528c8 <col:14, col:15> 'struct C1' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fd1b68528b0 <col:15> 'struct C1 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fd1b6852888 <col:15> 'struct C1 *' lvalue Var 0x7fd1b68506c8 'pc2_2' 'struct C1 *'
|   `-ReturnStmt 0x7fd1b68529a8 <line:62:5, col:12>
|     `-IntegerLiteral 0x7fd1b6852988 <col:12> 'int' 0
|-FunctionDecl 0x7fd1b684ec28 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fd1b684ed08 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fd1b684ecc0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fd1b684ed70 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fd1b684ee50 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fd1b684ee08 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fd1b684ef38 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fd1b684f018 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fd1b684efd0 <<invalid sloc>> Implicit Default
`-FunctionDecl 0x7fd1b684f080 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
  |-ParmVarDecl 0x7fd1b684f160 <<invalid sloc>> <invalid sloc> implicit 'void *'
  `-VisibilityAttr 0x7fd1b684f118 <<invalid sloc>> Implicit Default

TranslationUnitDecl 0x7f9de90326d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced class P2 definition
| |-CXXRecordDecl implicit referenced class P2
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P2 'void (double, double)'
| | |-ParmVarDecl used x 'double'
| | |-ParmVarDecl used y 'double'
| | |-CXXCtorInitializer Field 0x7f9de9066f30 '_x' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de9066450 'x' 'double'
| | |-CXXCtorInitializer Field 0x7f9de9066f90 '_y' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de90664c8 'y' 'double'
| | `-CompoundStmt
| |-CXXMethodDecl x 'double (void) const'
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ->_x 0x7f9de9066f30
| |         `-CXXThisExpr 'const class P2 *' this
| |-CXXMethodDecl x 'void (double)'
| | |-ParmVarDecl used x 'double'
| | `-CompoundStmt
| |   `-BinaryOperator 'double' lvalue '='
| |     |-MemberExpr 'double' lvalue ->_x 0x7f9de9066f30
| |     | `-CXXThisExpr 'class P2 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de90667e8 'x' 'double'
| |-CXXMethodDecl y 'double (void) const'
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ->_y 0x7f9de9066f90
| |         `-CXXThisExpr 'const class P2 *' this
| |-CXXMethodDecl y 'void (double)'
| | |-ParmVarDecl used y 'double'
| | `-CompoundStmt
| |   `-BinaryOperator 'double' lvalue '='
| |     |-MemberExpr 'double' lvalue ->_y 0x7f9de9066f90
| |     | `-CXXThisExpr 'class P2 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de9066a28 'y' 'double'
| |-CXXMethodDecl used z 'double (void) const' virtual
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-FloatingLiteral 'double' 0.000000e+00
| |-CXXMethodDecl used z 'void (double)' virtual
| | |-ParmVarDecl 'double'
| | `-CompoundStmt
| |-CXXMethodDecl used operator+= 'void (const class P2 &)' virtual
| | |-ParmVarDecl used rhs 'const class P2 &'
| | `-CompoundStmt
| |   |-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |   | |-MemberExpr 'double' lvalue ->_x 0x7f9de9066f30
| |   | | `-CXXThisExpr 'class P2 *' this
| |   | `-ImplicitCastExpr 'double' <LValueToRValue>
| |   |   `-MemberExpr 'const double' lvalue ._x 0x7f9de9066f30
| |   |     `-DeclRefExpr 'const class P2' lvalue ParmVar 0x7f9de9066d88 'rhs' 'const class P2 &'
| |   `-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 'double' lvalue ->_y 0x7f9de9066f90
| |     | `-CXXThisExpr 'class P2 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ._y 0x7f9de9066f90
| |         `-DeclRefExpr 'const class P2' lvalue ParmVar 0x7f9de9066d88 'rhs' 'const class P2 &'
| |-AccessSpecDecl protected
| |-FieldDecl referenced _x 'double'
| | `-FloatingLiteral 'double' 0.000000e+00
| |-FieldDecl referenced _y 'double'
| | `-FloatingLiteral 'double' 0.000000e+00
| |-CXXMethodDecl > implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7f9de9067008
| | `-ParmVarDecl 'const class P2 &'
| |-CXXMethodDecl > implicit operator= 'class P2 &(class P2 &&)' inline default noexcept-unevaluated 0x7f9de9074a00
| | `-ParmVarDecl 'class P2 &&'
| |-CXXDestructorDecl implicit ~P2 'void (void)' inline default trivial noexcept-unevaluated 0x7f9de9074ba8
| |-CXXConstructorDecl implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7f9de9092ed8
| | `-ParmVarDecl 'const class P2 &'
| `-CXXConstructorDecl implicit constexpr P2 'void (class P2 &&)' inline default noexcept-unevaluated 0x7f9de9093028
|   `-ParmVarDecl 'class P2 &&'
|-CXXRecordDecl referenced class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl implicit referenced class P3
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P3 'void (double, double, double)'
| | |-ParmVarDecl used x 'double'
| | |-ParmVarDecl used y 'double'
| | |-ParmVarDecl used z 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de90756d0 'x' 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de9075748 'y' 'double'
| | |-CXXCtorInitializer Field 0x7f9de9092950 '_z' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de90757c0 'z' 'double'
| | `-CompoundStmt
| |-CXXMethodDecl used z 'double (void) const'
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ->_z 0x7f9de9092950
| |         `-CXXThisExpr 'const class P3 *' this
| |-CXXMethodDecl used z 'void (double)'
| | |-ParmVarDecl used z 'double'
| | `-CompoundStmt
| |   `-BinaryOperator 'double' lvalue '='
| |     |-MemberExpr 'double' lvalue ->_z 0x7f9de9092950
| |     | `-CXXThisExpr 'class P3 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-DeclRefExpr 'double' lvalue ParmVar 0x7f9de90926b0 'z' 'double'
| |-CXXMethodDecl used operator+= 'void (const class P2 &)'
| | |-ParmVarDecl used rhs 'const class P2 &'
| | `-CompoundStmt
| |   |-CXXMemberCallExpr 'void'
| |   | |-MemberExpr '<bound member function type>' ->operator+= 0x7f9de9066e50
| |   | | `-ImplicitCastExpr 'class P2 *' <UncheckedDerivedToBase (P2)>
| |   | |   `-CXXThisExpr 'class P3 *' this
| |   | `-DeclRefExpr 'const class P2' lvalue ParmVar 0x7f9de90927e8 'rhs' 'const class P2 &'
| |   `-CompoundAssignOperator 'double' lvalue '+=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 'double' lvalue ->_z 0x7f9de9092950
| |     | `-CXXThisExpr 'class P3 *' this
| |     `-CXXMemberCallExpr 'double'
| |       `-MemberExpr '<bound member function type>' .z 0x7f9de9066b78
| |         `-DeclRefExpr 'const class P2' lvalue ParmVar 0x7f9de90927e8 'rhs' 'const class P2 &'
| |-AccessSpecDecl protected
| |-FieldDecl referenced _z 'double'
| |-CXXMethodDecl > implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7f9de90929f8
| | `-ParmVarDecl 'const class P3 &'
| |-CXXMethodDecl > implicit operator= 'class P3 &(class P3 &&)' inline default noexcept-unevaluated 0x7f9de9092ba8
| | `-ParmVarDecl 'class P3 &&'
| |-CXXDestructorDecl implicit ~P3 'void (void)' inline default trivial noexcept-unevaluated 0x7f9de9092d48
| |-CXXConstructorDecl implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7f9de9095970
| | `-ParmVarDecl 'const class P3 &'
| `-CXXConstructorDecl implicit constexpr P3 'void (class P3 &&)' inline default noexcept-unevaluated 0x7f9de9095b08
|   `-ParmVarDecl 'class P3 &&'
|-FunctionDecl used f 'void (class P2 &, class P2 &)'
| |-ParmVarDecl used p1 'class P2 &'
| |-ParmVarDecl used p2 'class P2 &'
| `-CompoundStmt
|   `-CXXOperatorCallExpr 'void'
|     |-ImplicitCastExpr 'void (*)(const class P2 &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 'void (const class P2 &)' lvalue CXXMethod 0x7f9de9066e50 'operator+=' 'void (const class P2 &)'
|     |-DeclRefExpr 'class P2' lvalue ParmVar 0x7f9de90943e8 'p1' 'class P2 &'
|     `-ImplicitCastExpr 'const class P2' lvalue <NoOp>
|       `-DeclRefExpr 'class P2' lvalue ParmVar 0x7f9de9094458 'p2' 'class P2 &'
|-CXXRecordDecl referenced struct C definition
| |-CXXRecordDecl implicit struct C
| |-FieldDecl d1 'int'
| |-FieldDecl d2 'int'
| |-CXXMethodDecl > implicit constexpr operator= 'struct C &(const struct C &)' inline default trivial noexcept-unevaluated 0x7f9de9094fc8
| | `-ParmVarDecl 'const struct C &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct C &(struct C &&)' inline default trivial noexcept-unevaluated 0x7f9de9095200
| | `-ParmVarDecl 'struct C &&'
| |-CXXDestructorDecl implicit ~C 'void (void)' inline default trivial noexcept-unevaluated 0x7f9de9095638
| |-CXXConstructorDecl implicit used C 'void (void) noexcept' inline default trivial
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr C 'void (const struct C &)' inline default trivial noexcept-unevaluated 0x7f9de9098658
| | `-ParmVarDecl 'const struct C &'
| `-CXXConstructorDecl implicit constexpr C 'void (struct C &&)' inline default trivial noexcept-unevaluated 0x7f9de90987e8
|   `-ParmVarDecl 'struct C &&'
|-CXXRecordDecl referenced class V definition
| |-public 'struct C'
| |-CXXRecordDecl implicit class V
| |-AccessSpecDecl public
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |-AccessSpecDecl private
| |-FieldDecl d3 'int'
| |-CXXMethodDecl > implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7f9de9094de8
| | `-ParmVarDecl 'const class V &'
| |-CXXMethodDecl > implicit operator= 'class V &(class V &&)' inline default noexcept-unevaluated 0x7f9de90953b8
| | `-ParmVarDecl 'class V &&'
| |-CXXDestructorDecl implicit ~V 'void (void)' inline default trivial noexcept-unevaluated 0x7f9de9095558
| |-CXXConstructorDecl implicit used V 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct C'
| | | `-CXXConstructExpr 'struct C' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr V 'void (const class V &)' inline default noexcept-unevaluated 0x7f9de9098978
| | `-ParmVarDecl 'const class V &'
| `-CXXConstructorDecl implicit constexpr V 'void (class V &&)' inline default noexcept-unevaluated 0x7f9de9098b08
|   `-ParmVarDecl 'class V &&'
|-FunctionDecl main 'int (void)'
| `-CompoundStmt
|   |-DeclStmt
|   | `-VarDecl used p3_1 'class P3' listinit
|   |   `-CXXConstructExpr 'class P3' 'void (double, double, double)'
|   |     |-FloatingLiteral 'double' 1.000000e+00
|   |     |-FloatingLiteral 'double' 1.000000e+00
|   |     `-FloatingLiteral 'double' 1.000000e+00
|   |-DeclStmt
|   | `-VarDecl used p3_2 'class P3' listinit
|   |   `-CXXConstructExpr 'class P3' 'void (double, double, double)'
|   |     |-FloatingLiteral 'double' 2.000000e+00
|   |     |-FloatingLiteral 'double' 2.000000e+00
|   |     `-FloatingLiteral 'double' 2.000000e+00
|   |-CallExpr 'void'
|   | |-ImplicitCastExpr 'void (*)(class P2 &, class P2 &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 'void (class P2 &, class P2 &)' lvalue Function 0x7f9de9094530 'f' 'void (class P2 &, class P2 &)'
|   | |-ImplicitCastExpr 'class P2' lvalue <DerivedToBase (P2)>
|   | | `-DeclRefExpr 'class P3' lvalue Var 0x7f9de9095858 'p3_1' 'class P3'
|   | `-ImplicitCastExpr 'class P2' lvalue <DerivedToBase (P2)>
|   |   `-DeclRefExpr 'class P3' lvalue Var 0x7f9de9095d08 'p3_2' 'class P3'
|   |-DeclStmt
|   | `-VarDecl p 'struct C *' cinit
|   |   `-ImplicitCastExpr 'struct C *' <DerivedToBase (C)>
|   |     `-CXXNewExpr 'class V *' Function 0x7f9de9097eb8 'operator new' 'void *(unsigned long)'
|   |       `-CXXConstructExpr 'class V' 'void (void) noexcept'
|   `-ReturnStmt
|     `-IntegerLiteral 'int' 0
|-FunctionDecl implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
`-FunctionDecl implicit operator delete[] 'void (void *) noexcept'
  |-ParmVarDecl implicit 'void *'
  `-VisibilityAttr Implicit Default

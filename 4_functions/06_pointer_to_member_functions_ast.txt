TranslationUnitDecl 0x7fb67682e0d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb67682e660 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb67682e340 '__int128'
|-TypedefDecl 0x7fb67682e6d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb67682e360 'unsigned __int128'
|-TypedefDecl 0x7fb67682ea18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb67682e7c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fb67682e728 '__NSConstantString_tag'
|-TypedefDecl 0x7fb67682eab0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb67682ea70 'char *'
|   `-BuiltinType 0x7fb67682e160 'char'
|-TypedefDecl 0x7fb676861c00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb67682ed90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb67682eba0 'struct __va_list_tag'
|     `-CXXRecord 0x7fb67682eb08 '__va_list_tag'
|-CXXRecordDecl 0x7fb676861c58 <object_model_refined/4_functions/06_pointer_to_member_functions.cpp:2:1, line:4:1> line:2:8 referenced struct B1 definition
| |-CXXRecordDecl 0x7fb676861d78 <col:1, col:8> col:8 implicit struct B1
| |-CXXMethodDecl 0x7fb676861e90 <line:3:5, col:15> col:10 used m 'void (void)'
| | `-CompoundStmt 0x7fb676861f48 <col:14, col:15>
| |-CXXConstructorDecl 0x7fb678007d88 <line:2:8> col:8 implicit constexpr B1 'void (void) noexcept' inline default trivial
| |-CXXDestructorDecl 0x7fb678007e68 <col:8> col:8 implicit ~B1 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678007e68
| |-CXXConstructorDecl 0x7fb678007fa8 <col:8> col:8 implicit constexpr B1 'void (const struct B1 &)' inline default trivial noexcept-unevaluated 0x7fb678007fa8
| | `-ParmVarDecl 0x7fb6780080d0 <col:8> col:8 'const struct B1 &'
| `-CXXConstructorDecl 0x7fb678008168 <col:8> col:8 implicit constexpr B1 'void (struct B1 &&)' inline default trivial noexcept-unevaluated 0x7fb678008168
|   `-ParmVarDecl 0x7fb678008290 <col:8> col:8 'struct B1 &&'
|-CXXRecordDecl 0x7fb676861f60 <line:6:1, col:17> col:8 referenced struct D1 definition
| |-public 'struct B1'
| |-CXXRecordDecl 0x7fb6768620c8 <col:1, col:8> col:8 implicit struct D1
| |-CXXConstructorDecl 0x7fb678007c80 <col:8> col:8 implicit referenced constexpr D1 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7fb6780082f8 <col:8> col:8 implicit constexpr D1 'void (const struct D1 &)' inline default trivial noexcept-unevaluated 0x7fb6780082f8
| | `-ParmVarDecl 0x7fb678009040 <col:8> col:8 'const struct D1 &'
| `-CXXConstructorDecl 0x7fb6780090d8 <col:8> col:8 implicit constexpr D1 'void (struct D1 &&)' inline default trivial noexcept-unevaluated 0x7fb6780090d8
|   `-ParmVarDecl 0x7fb678009200 <col:8> col:8 'struct D1 &&'
|-CXXRecordDecl 0x7fb676862180 <line:9:1, line:11:1> line:9:8 referenced struct B2 definition
| |-CXXRecordDecl 0x7fb6768622a8 <col:1, col:8> col:8 implicit struct B2
| |-CXXMethodDecl 0x7fb676862388 <line:10:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb6768628a8 <col:22, col:23>
| |-CXXMethodDecl 0x7fb676862478 <line:9:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7fb676862478
| | `-ParmVarDecl 0x7fb676862590 <col:8> col:8 'const struct B2 &'
| |-CXXMethodDecl 0x7fb676862628 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(struct B2 &&)' inline default noexcept-unevaluated 0x7fb676862628
| | `-ParmVarDecl 0x7fb676862740 <col:8> col:8 'struct B2 &&'
| |-CXXDestructorDecl 0x7fb6768627c8 <col:8> col:8 implicit ~B2 'void (void)' inline default trivial noexcept-unevaluated 0x7fb6768627c8
| |-CXXConstructorDecl 0x7fb678009918 <col:8> col:8 implicit used constexpr B2 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb67800b068 <col:8>
| |-CXXConstructorDecl 0x7fb6780099f8 <col:8> col:8 implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7fb6780099f8
| | `-ParmVarDecl 0x7fb678009b20 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7fb678009b88 <col:8> col:8 implicit constexpr B2 'void (struct B2 &&)' inline default noexcept-unevaluated 0x7fb678009b88
|   `-ParmVarDecl 0x7fb678009cb0 <col:8> col:8 'struct B2 &&'
|-CXXRecordDecl 0x7fb6768628c0 <line:13:1, col:17> col:8 referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl 0x7fb676862a28 <col:1, col:8> col:8 implicit struct D2
| |-CXXMethodDecl 0x7fb676862b18 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7fb676862b18
| | `-ParmVarDecl 0x7fb678001440 <col:8> col:8 'const struct D2 &'
| |-CXXMethodDecl 0x7fb6780014d8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7fb6780014d8
| | `-ParmVarDecl 0x7fb6780015f0 <col:8> col:8 'struct D2 &&'
| |-CXXDestructorDecl 0x7fb678001678 <col:8> col:8 implicit ~D2 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678001678
| |-CXXConstructorDecl 0x7fb678009810 <col:8> col:8 implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7fb67800b080 <col:8> 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb67800b0f0 <col:8>
| |-CXXConstructorDecl 0x7fb678009d18 <col:8> col:8 implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7fb678009d18
| | `-ParmVarDecl 0x7fb678009e40 <col:8> col:8 'const struct D2 &'
| `-CXXConstructorDecl 0x7fb678009ea8 <col:8> col:8 implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7fb678009ea8
|   `-ParmVarDecl 0x7fb67800b000 <col:8> col:8 'struct D2 &&'
|-CXXRecordDecl 0x7fb678001758 <line:16:1, line:18:1> line:16:8 referenced struct B3 definition
| |-CXXRecordDecl 0x7fb678001878 <col:1, col:8> col:8 implicit struct B3
| |-CXXMethodDecl 0x7fb678001958 <line:17:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb678001e78 <col:22, col:23>
| |-CXXMethodDecl 0x7fb678001a48 <line:16:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7fb678001a48
| | `-ParmVarDecl 0x7fb678001b60 <col:8> col:8 'const struct B3 &'
| |-CXXMethodDecl 0x7fb678001bf8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(struct B3 &&)' inline default noexcept-unevaluated 0x7fb678001bf8
| | `-ParmVarDecl 0x7fb678001d10 <col:8> col:8 'struct B3 &&'
| |-CXXDestructorDecl 0x7fb678001d98 <col:8> col:8 implicit ~B3 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678001d98
| |-CXXConstructorDecl 0x7fb67800b968 <col:8> col:8 implicit used constexpr B3 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb67800d2b8 <col:8>
| |-CXXConstructorDecl 0x7fb67800bb48 <col:8> col:8 implicit constexpr B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7fb67800bb48
| | `-ParmVarDecl 0x7fb67800bc70 <col:8> col:8 'const struct B3 &'
| `-CXXConstructorDecl 0x7fb67800bcd8 <col:8> col:8 implicit constexpr B3 'void (struct B3 &&)' inline default noexcept-unevaluated 0x7fb67800bcd8
|   `-ParmVarDecl 0x7fb67800be00 <col:8> col:8 'struct B3 &&'
|-CXXRecordDecl 0x7fb678001e90 <line:20:1, line:22:1> line:20:8 referenced struct B4 definition
| |-CXXRecordDecl 0x7fb678001fb8 <col:1, col:8> col:8 implicit struct B4
| |-CXXMethodDecl 0x7fb678002098 <line:21:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb6780035e8 <col:22, col:23>
| |-CXXMethodDecl 0x7fb678002188 <line:20:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(const struct B4 &)' inline default noexcept-unevaluated 0x7fb678002188
| | `-ParmVarDecl 0x7fb6780022a0 <col:8> col:8 'const struct B4 &'
| |-CXXMethodDecl 0x7fb678002338 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(struct B4 &&)' inline default noexcept-unevaluated 0x7fb678002338
| | `-ParmVarDecl 0x7fb678003480 <col:8> col:8 'struct B4 &&'
| |-CXXDestructorDecl 0x7fb678003508 <col:8> col:8 implicit ~B4 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678003508
| |-CXXConstructorDecl 0x7fb67800ba68 <col:8> col:8 implicit used constexpr B4 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb67800d338 <col:8>
| |-CXXConstructorDecl 0x7fb67800be68 <col:8> col:8 implicit constexpr B4 'void (const struct B4 &)' inline default noexcept-unevaluated 0x7fb67800be68
| | `-ParmVarDecl 0x7fb67800bf90 <col:8> col:8 'const struct B4 &'
| `-CXXConstructorDecl 0x7fb67800ce00 <col:8> col:8 implicit constexpr B4 'void (struct B4 &&)' inline default noexcept-unevaluated 0x7fb67800ce00
|   `-ParmVarDecl 0x7fb67800cf30 <col:8> col:8 'struct B4 &&'
|-CXXRecordDecl 0x7fb678003600 <line:24:1, col:21> col:8 referenced struct D3 definition
| |-public 'struct B3'
| |-public 'struct B4'
| |-CXXRecordDecl 0x7fb6780037a8 <col:1, col:8> col:8 implicit struct D3
| |-CXXMethodDecl 0x7fb678003898 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(const struct D3 &)' inline default noexcept-unevaluated 0x7fb678003898
| | `-ParmVarDecl 0x7fb6780039b0 <col:8> col:8 'const struct D3 &'
| |-CXXMethodDecl 0x7fb678003a48 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(struct D3 &&)' inline default noexcept-unevaluated 0x7fb678003a48
| | `-ParmVarDecl 0x7fb678003b60 <col:8> col:8 'struct D3 &&'
| |-CXXDestructorDecl 0x7fb678003be8 <col:8> col:8 implicit ~D3 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678003be8
| |-CXXConstructorDecl 0x7fb67800b860 <col:8> col:8 implicit used constexpr D3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 0x7fb67800d2d0 <col:8> 'struct B3' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B4'
| | | `-CXXConstructExpr 0x7fb67800d350 <col:8> 'struct B4' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb67800d3c8 <col:8>
| |-CXXConstructorDecl 0x7fb67800cf98 <col:8> col:8 implicit constexpr D3 'void (const struct D3 &)' inline default noexcept-unevaluated 0x7fb67800cf98
| | `-ParmVarDecl 0x7fb67800d0c0 <col:8> col:8 'const struct D3 &'
| `-CXXConstructorDecl 0x7fb67800d128 <col:8> col:8 implicit constexpr D3 'void (struct D3 &&)' inline default noexcept-unevaluated 0x7fb67800d128
|   `-ParmVarDecl 0x7fb67800d250 <col:8> col:8 'struct D3 &&'
|-CXXRecordDecl 0x7fb678003cc8 <line:27:1, line:29:1> line:27:8 referenced struct B5 definition
| |-CXXRecordDecl 0x7fb678003de8 <col:1, col:8> col:8 implicit struct B5
| |-CXXMethodDecl 0x7fb678003ec8 <line:28:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb6780043e8 <col:22, col:23>
| |-CXXMethodDecl 0x7fb678003fb8 <line:27:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(const struct B5 &)' inline default noexcept-unevaluated 0x7fb678003fb8
| | `-ParmVarDecl 0x7fb6780040d0 <col:8> col:8 'const struct B5 &'
| |-CXXMethodDecl 0x7fb678004168 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(struct B5 &&)' inline default noexcept-unevaluated 0x7fb678004168
| | `-ParmVarDecl 0x7fb678004280 <col:8> col:8 'struct B5 &&'
| |-CXXDestructorDecl 0x7fb678004308 <col:8> col:8 implicit ~B5 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678004308
| |-CXXConstructorDecl 0x7fb67800dd08 <col:8> col:8 implicit used constexpr B5 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb67800ef88 <col:8>
| |-CXXConstructorDecl 0x7fb67800e628 <col:8> col:8 implicit constexpr B5 'void (const struct B5 &)' inline default noexcept-unevaluated 0x7fb67800e628
| | `-ParmVarDecl 0x7fb67800e750 <col:8> col:8 'const struct B5 &'
| `-CXXConstructorDecl 0x7fb67800e7b8 <col:8> col:8 implicit constexpr B5 'void (struct B5 &&)' inline default noexcept-unevaluated 0x7fb67800e7b8
|   `-ParmVarDecl 0x7fb67800e8e0 <col:8> col:8 'struct B5 &&'
|-CXXRecordDecl 0x7fb678004c00 <line:31:1, col:30> col:7 referenced class X definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7fb678004d80 <col:1, col:7> col:7 implicit class X
| |-CXXMethodDecl 0x7fb678004e78 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(const class X &)' inline default noexcept-unevaluated 0x7fb678004e78
| | `-ParmVarDecl 0x7fb678004f90 <col:7> col:7 'const class X &'
| |-CXXMethodDecl 0x7fb678005028 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(class X &&)' inline default noexcept-unevaluated 0x7fb678005028
| | `-ParmVarDecl 0x7fb678005140 <col:7> col:7 'class X &&'
| |-CXXDestructorDecl 0x7fb6780051c8 <col:7> col:7 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7fb6780051c8
| |-CXXConstructorDecl 0x7fb67800dc08 <col:7> col:7 implicit used X 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fb67800f008 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb67800f078 <col:7>
| |-CXXConstructorDecl 0x7fb67800e498 <col:7> col:7 implicit X 'void (const class X &)' inline default noexcept-unevaluated 0x7fb67800e498
| | `-ParmVarDecl 0x7fb67800e5c0 <col:7> col:7 'const class X &'
| `-CXXConstructorDecl 0x7fb67800e948 <col:7> col:7 implicit X 'void (class X &&)' inline default noexcept-unevaluated 0x7fb67800e948
|   `-ParmVarDecl 0x7fb67800ea70 <col:7> col:7 'class X &&'
|-CXXRecordDecl 0x7fb6780052a8 <line:33:1, col:30> col:7 referenced class Y definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7fb678005420 <col:1, col:7> col:7 implicit class Y
| |-CXXMethodDecl 0x7fb678005518 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(const class Y &)' inline default noexcept-unevaluated 0x7fb678005518
| | `-ParmVarDecl 0x7fb678005630 <col:7> col:7 'const class Y &'
| |-CXXMethodDecl 0x7fb6780056c8 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(class Y &&)' inline default noexcept-unevaluated 0x7fb6780056c8
| | `-ParmVarDecl 0x7fb6780057e0 <col:7> col:7 'class Y &&'
| |-CXXDestructorDecl 0x7fb678005868 <col:7> col:7 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678005868
| |-CXXConstructorDecl 0x7fb67800e220 <col:7> col:7 implicit used Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fb67800f0f8 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb67800f168 <col:7>
| |-CXXConstructorDecl 0x7fb67800ead8 <col:7> col:7 implicit Y 'void (const class Y &)' inline default noexcept-unevaluated 0x7fb67800ead8
| | `-ParmVarDecl 0x7fb67800ec00 <col:7> col:7 'const class Y &'
| `-CXXConstructorDecl 0x7fb67800ec68 <col:7> col:7 implicit Y 'void (class Y &&)' inline default noexcept-unevaluated 0x7fb67800ec68
|   `-ParmVarDecl 0x7fb67800ed90 <col:7> col:7 'class Y &&'
|-CXXRecordDecl 0x7fb678005948 <line:35:1, col:19> col:8 referenced struct D4 definition
| |-public 'class X'
| |-public 'class Y'
| |-CXXRecordDecl 0x7fb678005b00 <col:1, col:8> col:8 implicit struct D4
| |-CXXMethodDecl 0x7fb678007400 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(const struct D4 &)' inline default noexcept-unevaluated 0x7fb678007400
| | `-ParmVarDecl 0x7fb678007520 <col:8> col:8 'const struct D4 &'
| |-CXXMethodDecl 0x7fb6780075b8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(struct D4 &&)' inline default noexcept-unevaluated 0x7fb6780075b8
| | `-ParmVarDecl 0x7fb6780076d0 <col:8> col:8 'struct D4 &&'
| |-CXXDestructorDecl 0x7fb678007758 <col:8> col:8 implicit ~D4 'void (void)' inline default trivial noexcept-unevaluated 0x7fb678007758
| |-CXXConstructorDecl 0x7fb67800db00 <col:8> col:8 implicit used D4 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fb67800efa0 <col:8> 'struct B5' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class X'
| | | `-CXXConstructExpr 0x7fb67800f090 <col:8> 'class X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Y'
| | | `-CXXConstructExpr 0x7fb67800f180 <col:8> 'class Y' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb67800fc00 <col:8>
| |-CXXConstructorDecl 0x7fb67800e308 <col:8> col:8 implicit D4 'void (const struct D4 &)' inline default noexcept-unevaluated 0x7fb67800e308
| | `-ParmVarDecl 0x7fb67800e430 <col:8> col:8 'const struct D4 &'
| `-CXXConstructorDecl 0x7fb67800edf8 <col:8> col:8 implicit D4 'void (struct D4 &&)' inline default noexcept-unevaluated 0x7fb67800edf8
|   `-ParmVarDecl 0x7fb67800ef20 <col:8> col:8 'struct D4 &&'
`-FunctionDecl 0x7fb678007898 <line:37:1, line:62:1> line:37:5 main 'int (void)'
  `-CompoundStmt 0x7fb678010070 <line:38:1, line:62:1>
    |-DeclStmt 0x7fb678007b98 <line:40:5, col:32>
    | `-VarDecl 0x7fb678007aa8 <col:5, col:31> col:17 used b1p 'void (struct B1::*)(void)' cinit
    |   `-UnaryOperator 0x7fb678007b78 <col:26, col:31> 'void (struct B1::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb678007b40 <col:27, col:31> 'void (void)' CXXMethod 0x7fb676861e90 'm' 'void (void)'
    |-DeclStmt 0x7fb678009440 <line:41:5, col:12>
    | `-VarDecl 0x7fb678007bc0 <col:5, col:11> col:8 used d1 'struct D1' listinit
    |   `-CXXConstructExpr 0x7fb6780092a0 <col:8, col:11> 'struct D1' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb678009528 <line:42:5, col:15> 'void'
    | `-ParenExpr 0x7fb678009508 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb6780094e0 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb6780094c0 <col:6> 'struct B1' lvalue <DerivedToBase (B1)>
    |     | `-DeclRefExpr 0x7fb678009458 <col:6> 'struct D1' lvalue Var 0x7fb678007bc0 'd1' 'struct D1'
    |     `-ImplicitCastExpr 0x7fb6780094a8 <col:10> 'void (struct B1::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb678009480 <col:10> 'void (struct B1::*)(void)' lvalue Var 0x7fb678007aa8 'b1p' 'void (struct B1::*)(void)'
    |-DeclStmt 0x7fb678009728 <line:45:5, col:32>
    | `-VarDecl 0x7fb678009638 <col:5, col:31> col:17 used b2p 'void (struct B2::*)(void)' cinit
    |   `-UnaryOperator 0x7fb678009708 <col:26, col:31> 'void (struct B2::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb6780096d0 <col:27, col:31> 'void (void)' CXXMethod 0x7fb676862388 'm' 'void (void)'
    |-DeclStmt 0x7fb67800b2a8 <line:46:5, col:12>
    | `-VarDecl 0x7fb678009750 <col:5, col:11> col:8 used d2 'struct D2' listinit
    |   `-CXXConstructExpr 0x7fb67800b108 <col:8, col:11> 'struct D2' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb67800b390 <line:47:5, col:15> 'void'
    | `-ParenExpr 0x7fb67800b370 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb67800b348 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb67800b328 <col:6> 'struct B2' lvalue <DerivedToBase (B2)>
    |     | `-DeclRefExpr 0x7fb67800b2c0 <col:6> 'struct D2' lvalue Var 0x7fb678009750 'd2' 'struct D2'
    |     `-ImplicitCastExpr 0x7fb67800b310 <col:10> 'void (struct B2::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb67800b2e8 <col:10> 'void (struct B2::*)(void)' lvalue Var 0x7fb678009638 'b2p' 'void (struct B2::*)(void)'
    |-DeclStmt 0x7fb67800b588 <line:50:5, col:32>
    | `-VarDecl 0x7fb67800b498 <col:5, col:31> col:17 used b3p 'void (struct B3::*)(void)' cinit
    |   `-UnaryOperator 0x7fb67800b568 <col:26, col:31> 'void (struct B3::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb67800b530 <col:27, col:31> 'void (void)' CXXMethod 0x7fb678001958 'm' 'void (void)'
    |-DeclStmt 0x7fb67800b778 <line:51:5, col:32>
    | `-VarDecl 0x7fb67800b688 <col:5, col:31> col:17 used b4p 'void (struct B4::*)(void)' cinit
    |   `-UnaryOperator 0x7fb67800b758 <col:26, col:31> 'void (struct B4::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb67800b720 <col:27, col:31> 'void (void)' CXXMethod 0x7fb678002098 'm' 'void (void)'
    |-DeclStmt 0x7fb67800d638 <line:52:5, col:12>
    | `-VarDecl 0x7fb67800b7a0 <col:5, col:11> col:8 used d3 'struct D3' listinit
    |   `-CXXConstructExpr 0x7fb67800d3e0 <col:8, col:11> 'struct D3' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb67800d720 <line:53:5, col:15> 'void'
    | `-ParenExpr 0x7fb67800d700 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb67800d6d8 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb67800d6b8 <col:6> 'struct B3' lvalue <DerivedToBase (B3)>
    |     | `-DeclRefExpr 0x7fb67800d650 <col:6> 'struct D3' lvalue Var 0x7fb67800b7a0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7fb67800d6a0 <col:10> 'void (struct B3::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb67800d678 <col:10> 'void (struct B3::*)(void)' lvalue Var 0x7fb67800b498 'b3p' 'void (struct B3::*)(void)'
    |-CXXMemberCallExpr 0x7fb67800d818 <line:54:5, col:15> 'void'
    | `-ParenExpr 0x7fb67800d7f8 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb67800d7d0 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb67800d7b0 <col:6> 'struct B4' lvalue <DerivedToBase (B4)>
    |     | `-DeclRefExpr 0x7fb67800d748 <col:6> 'struct D3' lvalue Var 0x7fb67800b7a0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7fb67800d798 <col:10> 'void (struct B4::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb67800d770 <col:10> 'void (struct B4::*)(void)' lvalue Var 0x7fb67800b688 'b4p' 'void (struct B4::*)(void)'
    |-DeclStmt 0x7fb67800da18 <line:57:5, col:32>
    | `-VarDecl 0x7fb67800d928 <col:5, col:31> col:17 used b5p 'void (struct B5::*)(void)' cinit
    |   `-UnaryOperator 0x7fb67800d9f8 <col:26, col:31> 'void (struct B5::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb67800d9c0 <col:27, col:31> 'void (void)' CXXMethod 0x7fb678003ec8 'm' 'void (void)'
    |-DeclStmt 0x7fb67800fc48 <line:58:5, col:12>
    | `-VarDecl 0x7fb67800da40 <col:5, col:11> col:8 used d4 'struct D4' listinit
    |   `-CXXConstructExpr 0x7fb67800fc18 <col:8, col:11> 'struct D4' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb67800fd30 <line:59:5, col:15> 'void'
    | `-ParenExpr 0x7fb67800fd10 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb67800fce8 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb67800fcc8 <col:6> 'struct B5' lvalue <DerivedToBase (virtual B5)>
    |     | `-DeclRefExpr 0x7fb67800fc60 <col:6> 'struct D4' lvalue Var 0x7fb67800da40 'd4' 'struct D4'
    |     `-ImplicitCastExpr 0x7fb67800fcb0 <col:10> 'void (struct B5::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb67800fc88 <col:10> 'void (struct B5::*)(void)' lvalue Var 0x7fb67800d928 'b5p' 'void (struct B5::*)(void)'
    `-ReturnStmt 0x7fb678010058 <line:61:5, col:12>
      `-IntegerLiteral 0x7fb678010038 <col:12> 'int' 0

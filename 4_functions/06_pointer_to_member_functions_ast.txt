TranslationUnitDecl 0x7ff2e1019cd0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct B1 definition
| |-CXXRecordDecl implicit struct B1
| |-CXXMethodDecl used m 'void (void)'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr B1 'void (void) noexcept' inline default trivial
| |-CXXDestructorDecl implicit ~B1 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e081c668
| |-CXXConstructorDecl implicit constexpr B1 'void (const struct B1 &)' inline default trivial noexcept-unevaluated 0x7ff2e081c7a8
| | `-ParmVarDecl 'const struct B1 &'
| `-CXXConstructorDecl implicit constexpr B1 'void (struct B1 &&)' inline default trivial noexcept-unevaluated 0x7ff2e081c968
|   `-ParmVarDecl 'struct B1 &&'
|-CXXRecordDecl referenced struct D1 definition
| |-public 'struct B1'
| |-CXXRecordDecl implicit struct D1
| |-CXXConstructorDecl implicit referenced constexpr D1 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl implicit constexpr D1 'void (const struct D1 &)' inline default trivial noexcept-unevaluated 0x7ff2e081caf8
| | `-ParmVarDecl 'const struct D1 &'
| `-CXXConstructorDecl implicit constexpr D1 'void (struct D1 &&)' inline default trivial noexcept-unevaluated 0x7ff2e081d8d8
|   `-ParmVarDecl 'struct D1 &&'
|-CXXRecordDecl referenced struct B2 definition
| |-CXXRecordDecl implicit struct B2
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit constexpr operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7ff2e104e078
| | `-ParmVarDecl 'const struct B2 &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct B2 &(struct B2 &&)' inline default noexcept-unevaluated 0x7ff2e104e228
| | `-ParmVarDecl 'struct B2 &&'
| |-CXXDestructorDecl implicit ~B2 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e104e3c8
| |-CXXConstructorDecl implicit used constexpr B2 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7ff2e081e1f8
| | `-ParmVarDecl 'const struct B2 &'
| `-CXXConstructorDecl implicit constexpr B2 'void (struct B2 &&)' inline default noexcept-unevaluated 0x7ff2e081e388
|   `-ParmVarDecl 'struct B2 &&'
|-CXXRecordDecl referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl implicit struct D2
| |-CXXMethodDecl > implicit constexpr operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7ff2e104e718
| | `-ParmVarDecl 'const struct D2 &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7ff2e1078cd8
| | `-ParmVarDecl 'struct D2 &&'
| |-CXXDestructorDecl implicit ~D2 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e1078e78
| |-CXXConstructorDecl implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7ff2e081e518
| | `-ParmVarDecl 'const struct D2 &'
| `-CXXConstructorDecl implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7ff2e081e6a8
|   `-ParmVarDecl 'struct D2 &&'
|-CXXRecordDecl referenced struct B3 definition
| |-CXXRecordDecl implicit struct B3
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit constexpr operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7ff2e1079248
| | `-ParmVarDecl 'const struct B3 &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct B3 &(struct B3 &&)' inline default noexcept-unevaluated 0x7ff2e10793f8
| | `-ParmVarDecl 'struct B3 &&'
| |-CXXDestructorDecl implicit ~B3 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e1079598
| |-CXXConstructorDecl implicit used constexpr B3 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7ff2e0820348
| | `-ParmVarDecl 'const struct B3 &'
| `-CXXConstructorDecl implicit constexpr B3 'void (struct B3 &&)' inline default noexcept-unevaluated 0x7ff2e08204d8
|   `-ParmVarDecl 'struct B3 &&'
|-CXXRecordDecl referenced struct B4 definition
| |-CXXRecordDecl implicit struct B4
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit constexpr operator= 'struct B4 &(const struct B4 &)' inline default noexcept-unevaluated 0x7ff2e1079988
| | `-ParmVarDecl 'const struct B4 &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct B4 &(struct B4 &&)' inline default noexcept-unevaluated 0x7ff2e1079b38
| | `-ParmVarDecl 'struct B4 &&'
| |-CXXDestructorDecl implicit ~B4 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e107a908
| |-CXXConstructorDecl implicit used constexpr B4 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr B4 'void (const struct B4 &)' inline default noexcept-unevaluated 0x7ff2e0820668
| | `-ParmVarDecl 'const struct B4 &'
| `-CXXConstructorDecl implicit constexpr B4 'void (struct B4 &&)' inline default noexcept-unevaluated 0x7ff2e0821600
|   `-ParmVarDecl 'struct B4 &&'
|-CXXRecordDecl referenced struct D3 definition
| |-public 'struct B3'
| |-public 'struct B4'
| |-CXXRecordDecl implicit struct D3
| |-CXXMethodDecl > implicit constexpr operator= 'struct D3 &(const struct D3 &)' inline default noexcept-unevaluated 0x7ff2e107ac98
| | `-ParmVarDecl 'const struct D3 &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct D3 &(struct D3 &&)' inline default noexcept-unevaluated 0x7ff2e107ae48
| | `-ParmVarDecl 'struct D3 &&'
| |-CXXDestructorDecl implicit ~D3 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e107afe8
| |-CXXConstructorDecl implicit used constexpr D3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 'struct B3' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B4'
| | | `-CXXConstructExpr 'struct B4' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr D3 'void (const struct D3 &)' inline default noexcept-unevaluated 0x7ff2e0821798
| | `-ParmVarDecl 'const struct D3 &'
| `-CXXConstructorDecl implicit constexpr D3 'void (struct D3 &&)' inline default noexcept-unevaluated 0x7ff2e0821928
|   `-ParmVarDecl 'struct D3 &&'
|-CXXRecordDecl referenced struct B5 definition
| |-CXXRecordDecl implicit struct B5
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit constexpr operator= 'struct B5 &(const struct B5 &)' inline default noexcept-unevaluated 0x7ff2e107b3b8
| | `-ParmVarDecl 'const struct B5 &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct B5 &(struct B5 &&)' inline default noexcept-unevaluated 0x7ff2e107b568
| | `-ParmVarDecl 'struct B5 &&'
| |-CXXDestructorDecl implicit ~B5 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e107b708
| |-CXXConstructorDecl implicit used constexpr B5 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr B5 'void (const struct B5 &)' inline default noexcept-unevaluated 0x7ff2e0822e28
| | `-ParmVarDecl 'const struct B5 &'
| `-CXXConstructorDecl implicit constexpr B5 'void (struct B5 &&)' inline default noexcept-unevaluated 0x7ff2e0822fb8
|   `-ParmVarDecl 'struct B5 &&'
|-CXXRecordDecl referenced class X definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl implicit class X
| |-CXXMethodDecl > implicit operator= 'class X &(const class X &)' inline default noexcept-unevaluated 0x7ff2e0816c78
| | `-ParmVarDecl 'const class X &'
| |-CXXMethodDecl > implicit operator= 'class X &(class X &&)' inline default noexcept-unevaluated 0x7ff2e0816e28
| | `-ParmVarDecl 'class X &&'
| |-CXXDestructorDecl implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e0816fc8
| |-CXXConstructorDecl implicit used X 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit X 'void (const class X &)' inline default noexcept-unevaluated 0x7ff2e0822c98
| | `-ParmVarDecl 'const class X &'
| `-CXXConstructorDecl implicit X 'void (class X &&)' inline default noexcept-unevaluated 0x7ff2e0823148
|   `-ParmVarDecl 'class X &&'
|-CXXRecordDecl referenced class Y definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl implicit class Y
| |-CXXMethodDecl > implicit operator= 'class Y &(const class Y &)' inline default noexcept-unevaluated 0x7ff2e0817318
| | `-ParmVarDecl 'const class Y &'
| |-CXXMethodDecl > implicit operator= 'class Y &(class Y &&)' inline default noexcept-unevaluated 0x7ff2e08174c8
| | `-ParmVarDecl 'class Y &&'
| |-CXXDestructorDecl implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e0817668
| |-CXXConstructorDecl implicit used Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit Y 'void (const class Y &)' inline default noexcept-unevaluated 0x7ff2e08232d8
| | `-ParmVarDecl 'const class Y &'
| `-CXXConstructorDecl implicit Y 'void (class Y &&)' inline default noexcept-unevaluated 0x7ff2e0823468
|   `-ParmVarDecl 'class Y &&'
|-CXXRecordDecl referenced struct D4 definition
| |-public 'class X'
| |-public 'class Y'
| |-CXXRecordDecl implicit struct D4
| |-CXXMethodDecl > implicit operator= 'struct D4 &(const struct D4 &)' inline default noexcept-unevaluated 0x7ff2e081bc00
| | `-ParmVarDecl 'const struct D4 &'
| |-CXXMethodDecl > implicit operator= 'struct D4 &(struct D4 &&)' inline default noexcept-unevaluated 0x7ff2e081bdb8
| | `-ParmVarDecl 'struct D4 &&'
| |-CXXDestructorDecl implicit ~D4 'void (void)' inline default trivial noexcept-unevaluated 0x7ff2e081bf58
| |-CXXConstructorDecl implicit used D4 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 'struct B5' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class X'
| | | `-CXXConstructExpr 'class X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Y'
| | | `-CXXConstructExpr 'class Y' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit D4 'void (const struct D4 &)' inline default noexcept-unevaluated 0x7ff2e0822b08
| | `-ParmVarDecl 'const struct D4 &'
| `-CXXConstructorDecl implicit D4 'void (struct D4 &&)' inline default noexcept-unevaluated 0x7ff2e08235f8
|   `-ParmVarDecl 'struct D4 &&'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used b1p 'void (struct B1::*)(void)' cinit
    |   `-UnaryOperator 'void (struct B1::*)(void)' prefix '&'
    |     `-DeclRefExpr 'void (void)' CXXMethod 0x7ff2e104da90 'm' 'void (void)'
    |-DeclStmt
    | `-VarDecl used d1 'struct D1' listinit
    |   `-CXXConstructExpr 'struct D1' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 'void'
    | `-ParenExpr '<bound member function type>'
    |   `-BinaryOperator '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 'struct B1' lvalue <DerivedToBase (B1)>
    |     | `-DeclRefExpr 'struct D1' lvalue Var 0x7ff2e081c3c0 'd1' 'struct D1'
    |     `-ImplicitCastExpr 'void (struct B1::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 'void (struct B1::*)(void)' lvalue Var 0x7ff2e081c2a8 'b1p' 'void (struct B1::*)(void)'
    |-DeclStmt
    | `-VarDecl used b2p 'void (struct B2::*)(void)' cinit
    |   `-UnaryOperator 'void (struct B2::*)(void)' prefix '&'
    |     `-DeclRefExpr 'void (void)' CXXMethod 0x7ff2e104df88 'm' 'void (void)'
    |-DeclStmt
    | `-VarDecl used d2 'struct D2' listinit
    |   `-CXXConstructExpr 'struct D2' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 'void'
    | `-ParenExpr '<bound member function type>'
    |   `-BinaryOperator '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 'struct B2' lvalue <DerivedToBase (B2)>
    |     | `-DeclRefExpr 'struct D2' lvalue Var 0x7ff2e081df50 'd2' 'struct D2'
    |     `-ImplicitCastExpr 'void (struct B2::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 'void (struct B2::*)(void)' lvalue Var 0x7ff2e081de38 'b2p' 'void (struct B2::*)(void)'
    |-DeclStmt
    | `-VarDecl used b3p 'void (struct B3::*)(void)' cinit
    |   `-UnaryOperator 'void (struct B3::*)(void)' prefix '&'
    |     `-DeclRefExpr 'void (void)' CXXMethod 0x7ff2e1079158 'm' 'void (void)'
    |-DeclStmt
    | `-VarDecl used b4p 'void (struct B4::*)(void)' cinit
    |   `-UnaryOperator 'void (struct B4::*)(void)' prefix '&'
    |     `-DeclRefExpr 'void (void)' CXXMethod 0x7ff2e1079898 'm' 'void (void)'
    |-DeclStmt
    | `-VarDecl used d3 'struct D3' listinit
    |   `-CXXConstructExpr 'struct D3' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 'void'
    | `-ParenExpr '<bound member function type>'
    |   `-BinaryOperator '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 'struct B3' lvalue <DerivedToBase (B3)>
    |     | `-DeclRefExpr 'struct D3' lvalue Var 0x7ff2e081ffa0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 'void (struct B3::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 'void (struct B3::*)(void)' lvalue Var 0x7ff2e081fc98 'b3p' 'void (struct B3::*)(void)'
    |-CXXMemberCallExpr 'void'
    | `-ParenExpr '<bound member function type>'
    |   `-BinaryOperator '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 'struct B4' lvalue <DerivedToBase (B4)>
    |     | `-DeclRefExpr 'struct D3' lvalue Var 0x7ff2e081ffa0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 'void (struct B4::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 'void (struct B4::*)(void)' lvalue Var 0x7ff2e081fe88 'b4p' 'void (struct B4::*)(void)'
    |-DeclStmt
    | `-VarDecl used b5p 'void (struct B5::*)(void)' cinit
    |   `-UnaryOperator 'void (struct B5::*)(void)' prefix '&'
    |     `-DeclRefExpr 'void (void)' CXXMethod 0x7ff2e107b2c8 'm' 'void (void)'
    |-DeclStmt
    | `-VarDecl used d4 'struct D4' listinit
    |   `-CXXConstructExpr 'struct D4' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 'void'
    | `-ParenExpr '<bound member function type>'
    |   `-BinaryOperator '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 'struct B5' lvalue <DerivedToBase (virtual B5)>
    |     | `-DeclRefExpr 'struct D4' lvalue Var 0x7ff2e0822240 'd4' 'struct D4'
    |     `-ImplicitCastExpr 'void (struct B5::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 'void (struct B5::*)(void)' lvalue Var 0x7ff2e0822128 'b5p' 'void (struct B5::*)(void)'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

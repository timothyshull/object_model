TranslationUnitDecl 0x7fb5d38290d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb5d3829660 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb5d3829340 '__int128'
|-TypedefDecl 0x7fb5d38296d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb5d3829360 'unsigned __int128'
|-TypedefDecl 0x7fb5d3829a18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb5d38297c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fb5d3829728 '__NSConstantString_tag'
|-TypedefDecl 0x7fb5d3829ab0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb5d3829a70 'char *'
|   `-BuiltinType 0x7fb5d3829160 'char'
|-TypedefDecl 0x7fb5d4016400 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb5d3829d90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb5d3829ba0 'struct __va_list_tag'
|     `-CXXRecord 0x7fb5d3829b08 '__va_list_tag'
|-CXXRecordDecl 0x7fb5d4016458 <object_model/4_functions/06_pointer_to_member_functions.cpp:2:1, line:4:1> line:2:8 referenced struct B1 definition
| |-CXXRecordDecl 0x7fb5d4016578 <col:1, col:8> col:8 implicit struct B1
| |-CXXMethodDecl 0x7fb5d4016690 <line:3:5, col:15> col:10 used m 'void (void)'
| | `-CompoundStmt 0x7fb5d4016748 <col:14, col:15>
| |-CXXConstructorDecl 0x7fb5d4021588 <line:2:8> col:8 implicit constexpr B1 'void (void) noexcept' inline default trivial
| |-CXXDestructorDecl 0x7fb5d4021668 <col:8> col:8 implicit ~B1 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d4021668
| |-CXXConstructorDecl 0x7fb5d40217a8 <col:8> col:8 implicit constexpr B1 'void (const struct B1 &)' inline default trivial noexcept-unevaluated 0x7fb5d40217a8
| | `-ParmVarDecl 0x7fb5d40218d0 <col:8> col:8 'const struct B1 &'
| `-CXXConstructorDecl 0x7fb5d4021968 <col:8> col:8 implicit constexpr B1 'void (struct B1 &&)' inline default trivial noexcept-unevaluated 0x7fb5d4021968
|   `-ParmVarDecl 0x7fb5d4021a90 <col:8> col:8 'struct B1 &&'
|-CXXRecordDecl 0x7fb5d4016760 <line:6:1, col:17> col:8 referenced struct D1 definition
| |-public 'struct B1'
| |-CXXRecordDecl 0x7fb5d40168c8 <col:1, col:8> col:8 implicit struct D1
| |-CXXConstructorDecl 0x7fb5d4021480 <col:8> col:8 implicit referenced constexpr D1 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7fb5d4021af8 <col:8> col:8 implicit constexpr D1 'void (const struct D1 &)' inline default trivial noexcept-unevaluated 0x7fb5d4021af8
| | `-ParmVarDecl 0x7fb5d4022440 <col:8> col:8 'const struct D1 &'
| `-CXXConstructorDecl 0x7fb5d40224d8 <col:8> col:8 implicit constexpr D1 'void (struct D1 &&)' inline default trivial noexcept-unevaluated 0x7fb5d40224d8
|   `-ParmVarDecl 0x7fb5d4022600 <col:8> col:8 'struct D1 &&'
|-CXXRecordDecl 0x7fb5d4016980 <line:9:1, line:11:1> line:9:8 referenced struct B2 definition
| |-CXXRecordDecl 0x7fb5d4016aa8 <col:1, col:8> col:8 implicit struct B2
| |-CXXMethodDecl 0x7fb5d4016b88 <line:10:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb5d40170a8 <col:22, col:23>
| |-CXXMethodDecl 0x7fb5d4016c78 <line:9:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7fb5d4016c78
| | `-ParmVarDecl 0x7fb5d4016d90 <col:8> col:8 'const struct B2 &'
| |-CXXMethodDecl 0x7fb5d4016e28 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(struct B2 &&)' inline default noexcept-unevaluated 0x7fb5d4016e28
| | `-ParmVarDecl 0x7fb5d4016f40 <col:8> col:8 'struct B2 &&'
| |-CXXDestructorDecl 0x7fb5d4016fc8 <col:8> col:8 implicit ~B2 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d4016fc8
| |-CXXConstructorDecl 0x7fb5d4022d18 <col:8> col:8 implicit used constexpr B2 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb5d4024468 <col:8>
| |-CXXConstructorDecl 0x7fb5d4022df8 <col:8> col:8 implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7fb5d4022df8
| | `-ParmVarDecl 0x7fb5d4022f20 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7fb5d4022f88 <col:8> col:8 implicit constexpr B2 'void (struct B2 &&)' inline default noexcept-unevaluated 0x7fb5d4022f88
|   `-ParmVarDecl 0x7fb5d40230b0 <col:8> col:8 'struct B2 &&'
|-CXXRecordDecl 0x7fb5d40170c0 <line:13:1, col:17> col:8 referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl 0x7fb5d4017228 <col:1, col:8> col:8 implicit struct D2
| |-CXXMethodDecl 0x7fb5d4017318 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7fb5d4017318
| | `-ParmVarDecl 0x7fb5d401b040 <col:8> col:8 'const struct D2 &'
| |-CXXMethodDecl 0x7fb5d401b0d8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7fb5d401b0d8
| | `-ParmVarDecl 0x7fb5d401b1f0 <col:8> col:8 'struct D2 &&'
| |-CXXDestructorDecl 0x7fb5d401b278 <col:8> col:8 implicit ~D2 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d401b278
| |-CXXConstructorDecl 0x7fb5d4022c10 <col:8> col:8 implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7fb5d4024480 <col:8> 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb5d40244f0 <col:8>
| |-CXXConstructorDecl 0x7fb5d4023118 <col:8> col:8 implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7fb5d4023118
| | `-ParmVarDecl 0x7fb5d4023240 <col:8> col:8 'const struct D2 &'
| `-CXXConstructorDecl 0x7fb5d40232a8 <col:8> col:8 implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7fb5d40232a8
|   `-ParmVarDecl 0x7fb5d4024400 <col:8> col:8 'struct D2 &&'
|-CXXRecordDecl 0x7fb5d401b358 <line:16:1, line:18:1> line:16:8 referenced struct B3 definition
| |-CXXRecordDecl 0x7fb5d401b478 <col:1, col:8> col:8 implicit struct B3
| |-CXXMethodDecl 0x7fb5d401b558 <line:17:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb5d401ba78 <col:22, col:23>
| |-CXXMethodDecl 0x7fb5d401b648 <line:16:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7fb5d401b648
| | `-ParmVarDecl 0x7fb5d401b760 <col:8> col:8 'const struct B3 &'
| |-CXXMethodDecl 0x7fb5d401b7f8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(struct B3 &&)' inline default noexcept-unevaluated 0x7fb5d401b7f8
| | `-ParmVarDecl 0x7fb5d401b910 <col:8> col:8 'struct B3 &&'
| |-CXXDestructorDecl 0x7fb5d401b998 <col:8> col:8 implicit ~B3 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d401b998
| |-CXXConstructorDecl 0x7fb5d4024d68 <col:8> col:8 implicit used constexpr B3 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb5d48004b8 <col:8>
| |-CXXConstructorDecl 0x7fb5d4024f48 <col:8> col:8 implicit constexpr B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7fb5d4024f48
| | `-ParmVarDecl 0x7fb5d4025070 <col:8> col:8 'const struct B3 &'
| `-CXXConstructorDecl 0x7fb5d40250d8 <col:8> col:8 implicit constexpr B3 'void (struct B3 &&)' inline default noexcept-unevaluated 0x7fb5d40250d8
|   `-ParmVarDecl 0x7fb5d4025200 <col:8> col:8 'struct B3 &&'
|-CXXRecordDecl 0x7fb5d401ba90 <line:20:1, line:22:1> line:20:8 referenced struct B4 definition
| |-CXXRecordDecl 0x7fb5d401bbb8 <col:1, col:8> col:8 implicit struct B4
| |-CXXMethodDecl 0x7fb5d401bc98 <line:21:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb5d401d1e8 <col:22, col:23>
| |-CXXMethodDecl 0x7fb5d401bd88 <line:20:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(const struct B4 &)' inline default noexcept-unevaluated 0x7fb5d401bd88
| | `-ParmVarDecl 0x7fb5d401bea0 <col:8> col:8 'const struct B4 &'
| |-CXXMethodDecl 0x7fb5d401bf38 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(struct B4 &&)' inline default noexcept-unevaluated 0x7fb5d401bf38
| | `-ParmVarDecl 0x7fb5d401d080 <col:8> col:8 'struct B4 &&'
| |-CXXDestructorDecl 0x7fb5d401d108 <col:8> col:8 implicit ~B4 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d401d108
| |-CXXConstructorDecl 0x7fb5d4024e68 <col:8> col:8 implicit used constexpr B4 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb5d4800538 <col:8>
| |-CXXConstructorDecl 0x7fb5d4025268 <col:8> col:8 implicit constexpr B4 'void (const struct B4 &)' inline default noexcept-unevaluated 0x7fb5d4025268
| | `-ParmVarDecl 0x7fb5d4025390 <col:8> col:8 'const struct B4 &'
| `-CXXConstructorDecl 0x7fb5d4800000 <col:8> col:8 implicit constexpr B4 'void (struct B4 &&)' inline default noexcept-unevaluated 0x7fb5d4800000
|   `-ParmVarDecl 0x7fb5d4800130 <col:8> col:8 'struct B4 &&'
|-CXXRecordDecl 0x7fb5d401d200 <line:24:1, col:21> col:8 referenced struct D3 definition
| |-public 'struct B3'
| |-public 'struct B4'
| |-CXXRecordDecl 0x7fb5d401d3a8 <col:1, col:8> col:8 implicit struct D3
| |-CXXMethodDecl 0x7fb5d401d498 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(const struct D3 &)' inline default noexcept-unevaluated 0x7fb5d401d498
| | `-ParmVarDecl 0x7fb5d401d5b0 <col:8> col:8 'const struct D3 &'
| |-CXXMethodDecl 0x7fb5d401d648 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(struct D3 &&)' inline default noexcept-unevaluated 0x7fb5d401d648
| | `-ParmVarDecl 0x7fb5d401d760 <col:8> col:8 'struct D3 &&'
| |-CXXDestructorDecl 0x7fb5d401d7e8 <col:8> col:8 implicit ~D3 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d401d7e8
| |-CXXConstructorDecl 0x7fb5d4024c60 <col:8> col:8 implicit used constexpr D3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 0x7fb5d48004d0 <col:8> 'struct B3' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B4'
| | | `-CXXConstructExpr 0x7fb5d4800550 <col:8> 'struct B4' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb5d48005c8 <col:8>
| |-CXXConstructorDecl 0x7fb5d4800198 <col:8> col:8 implicit constexpr D3 'void (const struct D3 &)' inline default noexcept-unevaluated 0x7fb5d4800198
| | `-ParmVarDecl 0x7fb5d48002c0 <col:8> col:8 'const struct D3 &'
| `-CXXConstructorDecl 0x7fb5d4800328 <col:8> col:8 implicit constexpr D3 'void (struct D3 &&)' inline default noexcept-unevaluated 0x7fb5d4800328
|   `-ParmVarDecl 0x7fb5d4800450 <col:8> col:8 'struct D3 &&'
|-CXXRecordDecl 0x7fb5d401d8c8 <line:27:1, line:29:1> line:27:8 referenced struct B5 definition
| |-CXXRecordDecl 0x7fb5d401d9e8 <col:1, col:8> col:8 implicit struct B5
| |-CXXMethodDecl 0x7fb5d401dac8 <line:28:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fb5d401dfe8 <col:22, col:23>
| |-CXXMethodDecl 0x7fb5d401dbb8 <line:27:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(const struct B5 &)' inline default noexcept-unevaluated 0x7fb5d401dbb8
| | `-ParmVarDecl 0x7fb5d401dcd0 <col:8> col:8 'const struct B5 &'
| |-CXXMethodDecl 0x7fb5d401dd68 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(struct B5 &&)' inline default noexcept-unevaluated 0x7fb5d401dd68
| | `-ParmVarDecl 0x7fb5d401de80 <col:8> col:8 'struct B5 &&'
| |-CXXDestructorDecl 0x7fb5d401df08 <col:8> col:8 implicit ~B5 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d401df08
| |-CXXConstructorDecl 0x7fb5d4800f08 <col:8> col:8 implicit used constexpr B5 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fb5d4801d88 <col:8>
| |-CXXConstructorDecl 0x7fb5d4801428 <col:8> col:8 implicit constexpr B5 'void (const struct B5 &)' inline default noexcept-unevaluated 0x7fb5d4801428
| | `-ParmVarDecl 0x7fb5d4801550 <col:8> col:8 'const struct B5 &'
| `-CXXConstructorDecl 0x7fb5d48015b8 <col:8> col:8 implicit constexpr B5 'void (struct B5 &&)' inline default noexcept-unevaluated 0x7fb5d48015b8
|   `-ParmVarDecl 0x7fb5d48016e0 <col:8> col:8 'struct B5 &&'
|-CXXRecordDecl 0x7fb5d401e800 <line:31:1, col:30> col:7 referenced class X definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7fb5d401e980 <col:1, col:7> col:7 implicit class X
| |-CXXMethodDecl 0x7fb5d401ea78 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(const class X &)' inline default noexcept-unevaluated 0x7fb5d401ea78
| | `-ParmVarDecl 0x7fb5d401eb90 <col:7> col:7 'const class X &'
| |-CXXMethodDecl 0x7fb5d401ec28 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(class X &&)' inline default noexcept-unevaluated 0x7fb5d401ec28
| | `-ParmVarDecl 0x7fb5d401ed40 <col:7> col:7 'class X &&'
| |-CXXDestructorDecl 0x7fb5d401edc8 <col:7> col:7 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d401edc8
| |-CXXConstructorDecl 0x7fb5d4800e08 <col:7> col:7 implicit used X 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fb5d4801e08 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb5d4801e78 <col:7>
| |-CXXConstructorDecl 0x7fb5d4801298 <col:7> col:7 implicit X 'void (const class X &)' inline default noexcept-unevaluated 0x7fb5d4801298
| | `-ParmVarDecl 0x7fb5d48013c0 <col:7> col:7 'const class X &'
| `-CXXConstructorDecl 0x7fb5d4801748 <col:7> col:7 implicit X 'void (class X &&)' inline default noexcept-unevaluated 0x7fb5d4801748
|   `-ParmVarDecl 0x7fb5d4801870 <col:7> col:7 'class X &&'
|-CXXRecordDecl 0x7fb5d401eea8 <line:33:1, col:30> col:7 referenced class Y definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7fb5d401f020 <col:1, col:7> col:7 implicit class Y
| |-CXXMethodDecl 0x7fb5d401f118 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(const class Y &)' inline default noexcept-unevaluated 0x7fb5d401f118
| | `-ParmVarDecl 0x7fb5d401f230 <col:7> col:7 'const class Y &'
| |-CXXMethodDecl 0x7fb5d401f2c8 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(class Y &&)' inline default noexcept-unevaluated 0x7fb5d401f2c8
| | `-ParmVarDecl 0x7fb5d401f3e0 <col:7> col:7 'class Y &&'
| |-CXXDestructorDecl 0x7fb5d401f468 <col:7> col:7 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d401f468
| |-CXXConstructorDecl 0x7fb5d4801020 <col:7> col:7 implicit used Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fb5d4801ef8 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb5d4801f68 <col:7>
| |-CXXConstructorDecl 0x7fb5d48018d8 <col:7> col:7 implicit Y 'void (const class Y &)' inline default noexcept-unevaluated 0x7fb5d48018d8
| | `-ParmVarDecl 0x7fb5d4801a00 <col:7> col:7 'const class Y &'
| `-CXXConstructorDecl 0x7fb5d4801a68 <col:7> col:7 implicit Y 'void (class Y &&)' inline default noexcept-unevaluated 0x7fb5d4801a68
|   `-ParmVarDecl 0x7fb5d4801b90 <col:7> col:7 'class Y &&'
|-CXXRecordDecl 0x7fb5d401f548 <line:35:1, col:19> col:8 referenced struct D4 definition
| |-public 'class X'
| |-public 'class Y'
| |-CXXRecordDecl 0x7fb5d401f700 <col:1, col:8> col:8 implicit struct D4
| |-CXXMethodDecl 0x7fb5d4020c00 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(const struct D4 &)' inline default noexcept-unevaluated 0x7fb5d4020c00
| | `-ParmVarDecl 0x7fb5d4020d20 <col:8> col:8 'const struct D4 &'
| |-CXXMethodDecl 0x7fb5d4020db8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(struct D4 &&)' inline default noexcept-unevaluated 0x7fb5d4020db8
| | `-ParmVarDecl 0x7fb5d4020ed0 <col:8> col:8 'struct D4 &&'
| |-CXXDestructorDecl 0x7fb5d4020f58 <col:8> col:8 implicit ~D4 'void (void)' inline default trivial noexcept-unevaluated 0x7fb5d4020f58
| |-CXXConstructorDecl 0x7fb5d4800d00 <col:8> col:8 implicit used D4 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fb5d4801da0 <col:8> 'struct B5' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class X'
| | | `-CXXConstructExpr 0x7fb5d4801e90 <col:8> 'class X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Y'
| | | `-CXXConstructExpr 0x7fb5d4801f80 <col:8> 'class Y' 'void (void) noexcept'
| | `-CompoundStmt 0x7fb5d3007c00 <col:8>
| |-CXXConstructorDecl 0x7fb5d4801108 <col:8> col:8 implicit D4 'void (const struct D4 &)' inline default noexcept-unevaluated 0x7fb5d4801108
| | `-ParmVarDecl 0x7fb5d4801230 <col:8> col:8 'const struct D4 &'
| `-CXXConstructorDecl 0x7fb5d4801bf8 <col:8> col:8 implicit D4 'void (struct D4 &&)' inline default noexcept-unevaluated 0x7fb5d4801bf8
|   `-ParmVarDecl 0x7fb5d4801d20 <col:8> col:8 'struct D4 &&'
`-FunctionDecl 0x7fb5d4021098 <line:37:1, line:62:1> line:37:5 main 'int (void)'
  `-CompoundStmt 0x7fb5d3008070 <line:38:1, line:62:1>
    |-DeclStmt 0x7fb5d4021398 <line:40:5, col:32>
    | `-VarDecl 0x7fb5d40212a8 <col:5, col:31> col:17 used b1p 'void (struct B1::*)(void)' cinit
    |   `-UnaryOperator 0x7fb5d4021378 <col:26, col:31> 'void (struct B1::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb5d4021340 <col:27, col:31> 'void (void)' CXXMethod 0x7fb5d4016690 'm' 'void (void)'
    |-DeclStmt 0x7fb5d4022840 <line:41:5, col:12>
    | `-VarDecl 0x7fb5d40213c0 <col:5, col:11> col:8 used d1 'struct D1' listinit
    |   `-CXXConstructExpr 0x7fb5d40226a0 <col:8, col:11> 'struct D1' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb5d4022928 <line:42:5, col:15> 'void'
    | `-ParenExpr 0x7fb5d4022908 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb5d40228e0 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb5d40228c0 <col:6> 'struct B1' lvalue <DerivedToBase (B1)>
    |     | `-DeclRefExpr 0x7fb5d4022858 <col:6> 'struct D1' lvalue Var 0x7fb5d40213c0 'd1' 'struct D1'
    |     `-ImplicitCastExpr 0x7fb5d40228a8 <col:10> 'void (struct B1::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb5d4022880 <col:10> 'void (struct B1::*)(void)' lvalue Var 0x7fb5d40212a8 'b1p' 'void (struct B1::*)(void)'
    |-DeclStmt 0x7fb5d4022b28 <line:45:5, col:32>
    | `-VarDecl 0x7fb5d4022a38 <col:5, col:31> col:17 used b2p 'void (struct B2::*)(void)' cinit
    |   `-UnaryOperator 0x7fb5d4022b08 <col:26, col:31> 'void (struct B2::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb5d4022ad0 <col:27, col:31> 'void (void)' CXXMethod 0x7fb5d4016b88 'm' 'void (void)'
    |-DeclStmt 0x7fb5d40246a8 <line:46:5, col:12>
    | `-VarDecl 0x7fb5d4022b50 <col:5, col:11> col:8 used d2 'struct D2' listinit
    |   `-CXXConstructExpr 0x7fb5d4024508 <col:8, col:11> 'struct D2' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb5d4024790 <line:47:5, col:15> 'void'
    | `-ParenExpr 0x7fb5d4024770 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb5d4024748 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb5d4024728 <col:6> 'struct B2' lvalue <DerivedToBase (B2)>
    |     | `-DeclRefExpr 0x7fb5d40246c0 <col:6> 'struct D2' lvalue Var 0x7fb5d4022b50 'd2' 'struct D2'
    |     `-ImplicitCastExpr 0x7fb5d4024710 <col:10> 'void (struct B2::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb5d40246e8 <col:10> 'void (struct B2::*)(void)' lvalue Var 0x7fb5d4022a38 'b2p' 'void (struct B2::*)(void)'
    |-DeclStmt 0x7fb5d4024988 <line:50:5, col:32>
    | `-VarDecl 0x7fb5d4024898 <col:5, col:31> col:17 used b3p 'void (struct B3::*)(void)' cinit
    |   `-UnaryOperator 0x7fb5d4024968 <col:26, col:31> 'void (struct B3::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb5d4024930 <col:27, col:31> 'void (void)' CXXMethod 0x7fb5d401b558 'm' 'void (void)'
    |-DeclStmt 0x7fb5d4024b78 <line:51:5, col:32>
    | `-VarDecl 0x7fb5d4024a88 <col:5, col:31> col:17 used b4p 'void (struct B4::*)(void)' cinit
    |   `-UnaryOperator 0x7fb5d4024b58 <col:26, col:31> 'void (struct B4::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb5d4024b20 <col:27, col:31> 'void (void)' CXXMethod 0x7fb5d401bc98 'm' 'void (void)'
    |-DeclStmt 0x7fb5d4800838 <line:52:5, col:12>
    | `-VarDecl 0x7fb5d4024ba0 <col:5, col:11> col:8 used d3 'struct D3' listinit
    |   `-CXXConstructExpr 0x7fb5d48005e0 <col:8, col:11> 'struct D3' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb5d4800920 <line:53:5, col:15> 'void'
    | `-ParenExpr 0x7fb5d4800900 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb5d48008d8 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb5d48008b8 <col:6> 'struct B3' lvalue <DerivedToBase (B3)>
    |     | `-DeclRefExpr 0x7fb5d4800850 <col:6> 'struct D3' lvalue Var 0x7fb5d4024ba0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7fb5d48008a0 <col:10> 'void (struct B3::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb5d4800878 <col:10> 'void (struct B3::*)(void)' lvalue Var 0x7fb5d4024898 'b3p' 'void (struct B3::*)(void)'
    |-CXXMemberCallExpr 0x7fb5d4800a18 <line:54:5, col:15> 'void'
    | `-ParenExpr 0x7fb5d48009f8 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb5d48009d0 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb5d48009b0 <col:6> 'struct B4' lvalue <DerivedToBase (B4)>
    |     | `-DeclRefExpr 0x7fb5d4800948 <col:6> 'struct D3' lvalue Var 0x7fb5d4024ba0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7fb5d4800998 <col:10> 'void (struct B4::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb5d4800970 <col:10> 'void (struct B4::*)(void)' lvalue Var 0x7fb5d4024a88 'b4p' 'void (struct B4::*)(void)'
    |-DeclStmt 0x7fb5d4800c18 <line:57:5, col:32>
    | `-VarDecl 0x7fb5d4800b28 <col:5, col:31> col:17 used b5p 'void (struct B5::*)(void)' cinit
    |   `-UnaryOperator 0x7fb5d4800bf8 <col:26, col:31> 'void (struct B5::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fb5d4800bc0 <col:27, col:31> 'void (void)' CXXMethod 0x7fb5d401dac8 'm' 'void (void)'
    |-DeclStmt 0x7fb5d3007c48 <line:58:5, col:12>
    | `-VarDecl 0x7fb5d4800c40 <col:5, col:11> col:8 used d4 'struct D4' listinit
    |   `-CXXConstructExpr 0x7fb5d3007c18 <col:8, col:11> 'struct D4' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fb5d3007d30 <line:59:5, col:15> 'void'
    | `-ParenExpr 0x7fb5d3007d10 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fb5d3007ce8 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fb5d3007cc8 <col:6> 'struct B5' lvalue <DerivedToBase (virtual B5)>
    |     | `-DeclRefExpr 0x7fb5d3007c60 <col:6> 'struct D4' lvalue Var 0x7fb5d4800c40 'd4' 'struct D4'
    |     `-ImplicitCastExpr 0x7fb5d3007cb0 <col:10> 'void (struct B5::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fb5d3007c88 <col:10> 'void (struct B5::*)(void)' lvalue Var 0x7fb5d4800b28 'b5p' 'void (struct B5::*)(void)'
    `-ReturnStmt 0x7fb5d3008058 <line:61:5, col:12>
      `-IntegerLiteral 0x7fb5d3008038 <col:12> 'int' 0

TranslationUnitDecl 0x7fc8210182d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc821018860 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc821018540 '__int128'
|-TypedefDecl 0x7fc8210188d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc821018560 'unsigned __int128'
|-TypedefDecl 0x7fc821018c18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc8210189c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fc821018928 '__NSConstantString_tag'
|-TypedefDecl 0x7fc821018cb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc821018c70 'char *'
|   `-BuiltinType 0x7fc821018360 'char'
|-TypedefDecl 0x7fc82104b000 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc821018f90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc821018da0 'struct __va_list_tag'
|     `-CXXRecord 0x7fc821018d08 '__va_list_tag'
|-CXXRecordDecl 0x7fc82104b058 <object_model_refined/4_functions/06_pointer_to_member_functions.cpp:2:1, line:4:1> line:2:8 referenced struct B1 definition
| |-CXXRecordDecl 0x7fc82104b178 <col:1, col:8> col:8 implicit struct B1
| |-CXXMethodDecl 0x7fc82104b290 <line:3:5, col:15> col:10 used m 'void (void)'
| | `-CompoundStmt 0x7fc82104b348 <col:14, col:15>
| |-CXXConstructorDecl 0x7fc82107a588 <line:2:8> col:8 implicit constexpr B1 'void (void) noexcept' inline default trivial
| |-CXXDestructorDecl 0x7fc82107a668 <col:8> col:8 implicit ~B1 'void (void)' inline default trivial noexcept-unevaluated 0x7fc82107a668
| |-CXXConstructorDecl 0x7fc82107a7a8 <col:8> col:8 implicit constexpr B1 'void (const struct B1 &)' inline default trivial noexcept-unevaluated 0x7fc82107a7a8
| | `-ParmVarDecl 0x7fc82107a8d0 <col:8> col:8 'const struct B1 &'
| `-CXXConstructorDecl 0x7fc82107a968 <col:8> col:8 implicit constexpr B1 'void (struct B1 &&)' inline default trivial noexcept-unevaluated 0x7fc82107a968
|   `-ParmVarDecl 0x7fc82107aa90 <col:8> col:8 'struct B1 &&'
|-CXXRecordDecl 0x7fc82104b360 <line:6:1, col:17> col:8 referenced struct D1 definition
| |-public 'struct B1'
| |-CXXRecordDecl 0x7fc82104b4c8 <col:1, col:8> col:8 implicit struct D1
| |-CXXConstructorDecl 0x7fc82107a480 <col:8> col:8 implicit referenced constexpr D1 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7fc82107aaf8 <col:8> col:8 implicit constexpr D1 'void (const struct D1 &)' inline default trivial noexcept-unevaluated 0x7fc82107aaf8
| | `-ParmVarDecl 0x7fc820001040 <col:8> col:8 'const struct D1 &'
| `-CXXConstructorDecl 0x7fc8200010d8 <col:8> col:8 implicit constexpr D1 'void (struct D1 &&)' inline default trivial noexcept-unevaluated 0x7fc8200010d8
|   `-ParmVarDecl 0x7fc820001200 <col:8> col:8 'struct D1 &&'
|-CXXRecordDecl 0x7fc82104b580 <line:9:1, line:11:1> line:9:8 referenced struct B2 definition
| |-CXXRecordDecl 0x7fc82104b6a8 <col:1, col:8> col:8 implicit struct B2
| |-CXXMethodDecl 0x7fc82104b788 <line:10:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fc82104bca8 <col:22, col:23>
| |-CXXMethodDecl 0x7fc82104b878 <line:9:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7fc82104b878
| | `-ParmVarDecl 0x7fc82104b990 <col:8> col:8 'const struct B2 &'
| |-CXXMethodDecl 0x7fc82104ba28 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(struct B2 &&)' inline default noexcept-unevaluated 0x7fc82104ba28
| | `-ParmVarDecl 0x7fc82104bb40 <col:8> col:8 'struct B2 &&'
| |-CXXDestructorDecl 0x7fc82104bbc8 <col:8> col:8 implicit ~B2 'void (void)' inline default trivial noexcept-unevaluated 0x7fc82104bbc8
| |-CXXConstructorDecl 0x7fc8200017a8 <col:8> col:8 implicit used constexpr B2 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fc820001ec8 <col:8>
| |-CXXConstructorDecl 0x7fc820001888 <col:8> col:8 implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7fc820001888
| | `-ParmVarDecl 0x7fc8200019b0 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7fc820001a18 <col:8> col:8 implicit constexpr B2 'void (struct B2 &&)' inline default noexcept-unevaluated 0x7fc820001a18
|   `-ParmVarDecl 0x7fc820001b40 <col:8> col:8 'struct B2 &&'
|-CXXRecordDecl 0x7fc82104bcc0 <line:13:1, col:17> col:8 referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl 0x7fc82104be28 <col:1, col:8> col:8 implicit struct D2
| |-CXXMethodDecl 0x7fc82104bf18 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7fc82104bf18
| | `-ParmVarDecl 0x7fc821074440 <col:8> col:8 'const struct D2 &'
| |-CXXMethodDecl 0x7fc8210744d8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7fc8210744d8
| | `-ParmVarDecl 0x7fc8210745f0 <col:8> col:8 'struct D2 &&'
| |-CXXDestructorDecl 0x7fc821074678 <col:8> col:8 implicit ~D2 'void (void)' inline default trivial noexcept-unevaluated 0x7fc821074678
| |-CXXConstructorDecl 0x7fc8200016a0 <col:8> col:8 implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7fc820001ee0 <col:8> 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt 0x7fc820001f50 <col:8>
| |-CXXConstructorDecl 0x7fc820001ba8 <col:8> col:8 implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7fc820001ba8
| | `-ParmVarDecl 0x7fc820001cd0 <col:8> col:8 'const struct D2 &'
| `-CXXConstructorDecl 0x7fc820001d38 <col:8> col:8 implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7fc820001d38
|   `-ParmVarDecl 0x7fc820001e60 <col:8> col:8 'struct D2 &&'
|-CXXRecordDecl 0x7fc821074758 <line:16:1, line:18:1> line:16:8 referenced struct B3 definition
| |-CXXRecordDecl 0x7fc821074878 <col:1, col:8> col:8 implicit struct B3
| |-CXXMethodDecl 0x7fc821074958 <line:17:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fc821074e78 <col:22, col:23>
| |-CXXMethodDecl 0x7fc821074a48 <line:16:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7fc821074a48
| | `-ParmVarDecl 0x7fc821074b60 <col:8> col:8 'const struct B3 &'
| |-CXXMethodDecl 0x7fc821074bf8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(struct B3 &&)' inline default noexcept-unevaluated 0x7fc821074bf8
| | `-ParmVarDecl 0x7fc821074d10 <col:8> col:8 'struct B3 &&'
| |-CXXDestructorDecl 0x7fc821074d98 <col:8> col:8 implicit ~B3 'void (void)' inline default trivial noexcept-unevaluated 0x7fc821074d98
| |-CXXConstructorDecl 0x7fc820004658 <col:8> col:8 implicit used constexpr B3 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fc820005198 <col:8>
| |-CXXConstructorDecl 0x7fc820004838 <col:8> col:8 implicit constexpr B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7fc820004838
| | `-ParmVarDecl 0x7fc820004960 <col:8> col:8 'const struct B3 &'
| `-CXXConstructorDecl 0x7fc8200049c8 <col:8> col:8 implicit constexpr B3 'void (struct B3 &&)' inline default noexcept-unevaluated 0x7fc8200049c8
|   `-ParmVarDecl 0x7fc820004af0 <col:8> col:8 'struct B3 &&'
|-CXXRecordDecl 0x7fc821074e90 <line:20:1, line:22:1> line:20:8 referenced struct B4 definition
| |-CXXRecordDecl 0x7fc821074fb8 <col:1, col:8> col:8 implicit struct B4
| |-CXXMethodDecl 0x7fc821075098 <line:21:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fc8210761e8 <col:22, col:23>
| |-CXXMethodDecl 0x7fc821075188 <line:20:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(const struct B4 &)' inline default noexcept-unevaluated 0x7fc821075188
| | `-ParmVarDecl 0x7fc8210752a0 <col:8> col:8 'const struct B4 &'
| |-CXXMethodDecl 0x7fc821075338 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(struct B4 &&)' inline default noexcept-unevaluated 0x7fc821075338
| | `-ParmVarDecl 0x7fc821076080 <col:8> col:8 'struct B4 &&'
| |-CXXDestructorDecl 0x7fc821076108 <col:8> col:8 implicit ~B4 'void (void)' inline default trivial noexcept-unevaluated 0x7fc821076108
| |-CXXConstructorDecl 0x7fc820004758 <col:8> col:8 implicit used constexpr B4 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fc820005218 <col:8>
| |-CXXConstructorDecl 0x7fc820004b58 <col:8> col:8 implicit constexpr B4 'void (const struct B4 &)' inline default noexcept-unevaluated 0x7fc820004b58
| | `-ParmVarDecl 0x7fc820004c80 <col:8> col:8 'const struct B4 &'
| `-CXXConstructorDecl 0x7fc820004ce8 <col:8> col:8 implicit constexpr B4 'void (struct B4 &&)' inline default noexcept-unevaluated 0x7fc820004ce8
|   `-ParmVarDecl 0x7fc820004e10 <col:8> col:8 'struct B4 &&'
|-CXXRecordDecl 0x7fc821076200 <line:24:1, col:21> col:8 referenced struct D3 definition
| |-public 'struct B3'
| |-public 'struct B4'
| |-CXXRecordDecl 0x7fc8210763a8 <col:1, col:8> col:8 implicit struct D3
| |-CXXMethodDecl 0x7fc821076498 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(const struct D3 &)' inline default noexcept-unevaluated 0x7fc821076498
| | `-ParmVarDecl 0x7fc8210765b0 <col:8> col:8 'const struct D3 &'
| |-CXXMethodDecl 0x7fc821076648 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(struct D3 &&)' inline default noexcept-unevaluated 0x7fc821076648
| | `-ParmVarDecl 0x7fc821076760 <col:8> col:8 'struct D3 &&'
| |-CXXDestructorDecl 0x7fc8210767e8 <col:8> col:8 implicit ~D3 'void (void)' inline default trivial noexcept-unevaluated 0x7fc8210767e8
| |-CXXConstructorDecl 0x7fc820004550 <col:8> col:8 implicit used constexpr D3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 0x7fc8200051b0 <col:8> 'struct B3' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B4'
| | | `-CXXConstructExpr 0x7fc820005230 <col:8> 'struct B4' 'void (void) noexcept'
| | `-CompoundStmt 0x7fc8200052a8 <col:8>
| |-CXXConstructorDecl 0x7fc820004e78 <col:8> col:8 implicit constexpr D3 'void (const struct D3 &)' inline default noexcept-unevaluated 0x7fc820004e78
| | `-ParmVarDecl 0x7fc820004fa0 <col:8> col:8 'const struct D3 &'
| `-CXXConstructorDecl 0x7fc820005008 <col:8> col:8 implicit constexpr D3 'void (struct D3 &&)' inline default noexcept-unevaluated 0x7fc820005008
|   `-ParmVarDecl 0x7fc820005130 <col:8> col:8 'struct D3 &&'
|-CXXRecordDecl 0x7fc8210768c8 <line:27:1, line:29:1> line:27:8 referenced struct B5 definition
| |-CXXRecordDecl 0x7fc8210769e8 <col:1, col:8> col:8 implicit struct B5
| |-CXXMethodDecl 0x7fc821076ac8 <line:28:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fc821076fe8 <col:22, col:23>
| |-CXXMethodDecl 0x7fc821076bb8 <line:27:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(const struct B5 &)' inline default noexcept-unevaluated 0x7fc821076bb8
| | `-ParmVarDecl 0x7fc821076cd0 <col:8> col:8 'const struct B5 &'
| |-CXXMethodDecl 0x7fc821076d68 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(struct B5 &&)' inline default noexcept-unevaluated 0x7fc821076d68
| | `-ParmVarDecl 0x7fc821076e80 <col:8> col:8 'struct B5 &&'
| |-CXXDestructorDecl 0x7fc821076f08 <col:8> col:8 implicit ~B5 'void (void)' inline default trivial noexcept-unevaluated 0x7fc821076f08
| |-CXXConstructorDecl 0x7fc8200059b8 <col:8> col:8 implicit used constexpr B5 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fc820006838 <col:8>
| |-CXXConstructorDecl 0x7fc820005eb8 <col:8> col:8 implicit constexpr B5 'void (const struct B5 &)' inline default noexcept-unevaluated 0x7fc820005eb8
| | `-ParmVarDecl 0x7fc820006000 <col:8> col:8 'const struct B5 &'
| `-CXXConstructorDecl 0x7fc820006068 <col:8> col:8 implicit constexpr B5 'void (struct B5 &&)' inline default noexcept-unevaluated 0x7fc820006068
|   `-ParmVarDecl 0x7fc820006190 <col:8> col:8 'struct B5 &&'
|-CXXRecordDecl 0x7fc821077800 <line:31:1, col:30> col:7 referenced class X definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7fc821077980 <col:1, col:7> col:7 implicit class X
| |-CXXMethodDecl 0x7fc821077a78 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(const class X &)' inline default noexcept-unevaluated 0x7fc821077a78
| | `-ParmVarDecl 0x7fc821077b90 <col:7> col:7 'const class X &'
| |-CXXMethodDecl 0x7fc821077c28 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(class X &&)' inline default noexcept-unevaluated 0x7fc821077c28
| | `-ParmVarDecl 0x7fc821077d40 <col:7> col:7 'class X &&'
| |-CXXDestructorDecl 0x7fc821077dc8 <col:7> col:7 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7fc821077dc8
| |-CXXConstructorDecl 0x7fc8200058b8 <col:7> col:7 implicit used X 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fc8200068b8 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7fc820006928 <col:7>
| |-CXXConstructorDecl 0x7fc820005d28 <col:7> col:7 implicit X 'void (const class X &)' inline default noexcept-unevaluated 0x7fc820005d28
| | `-ParmVarDecl 0x7fc820005e50 <col:7> col:7 'const class X &'
| `-CXXConstructorDecl 0x7fc8200061f8 <col:7> col:7 implicit X 'void (class X &&)' inline default noexcept-unevaluated 0x7fc8200061f8
|   `-ParmVarDecl 0x7fc820006320 <col:7> col:7 'class X &&'
|-CXXRecordDecl 0x7fc821077ea8 <line:33:1, col:30> col:7 referenced class Y definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7fc821078020 <col:1, col:7> col:7 implicit class Y
| |-CXXMethodDecl 0x7fc821078118 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(const class Y &)' inline default noexcept-unevaluated 0x7fc821078118
| | `-ParmVarDecl 0x7fc821078230 <col:7> col:7 'const class Y &'
| |-CXXMethodDecl 0x7fc8210782c8 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(class Y &&)' inline default noexcept-unevaluated 0x7fc8210782c8
| | `-ParmVarDecl 0x7fc8210783e0 <col:7> col:7 'class Y &&'
| |-CXXDestructorDecl 0x7fc821078468 <col:7> col:7 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7fc821078468
| |-CXXConstructorDecl 0x7fc820005ab8 <col:7> col:7 implicit used Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fc8200069a8 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7fc820006a18 <col:7>
| |-CXXConstructorDecl 0x7fc820006388 <col:7> col:7 implicit Y 'void (const class Y &)' inline default noexcept-unevaluated 0x7fc820006388
| | `-ParmVarDecl 0x7fc8200064b0 <col:7> col:7 'const class Y &'
| `-CXXConstructorDecl 0x7fc820006518 <col:7> col:7 implicit Y 'void (class Y &&)' inline default noexcept-unevaluated 0x7fc820006518
|   `-ParmVarDecl 0x7fc820006640 <col:7> col:7 'class Y &&'
|-CXXRecordDecl 0x7fc821078548 <line:35:1, col:19> col:8 referenced struct D4 definition
| |-public 'class X'
| |-public 'class Y'
| |-CXXRecordDecl 0x7fc821078700 <col:1, col:8> col:8 implicit struct D4
| |-CXXMethodDecl 0x7fc821079c00 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(const struct D4 &)' inline default noexcept-unevaluated 0x7fc821079c00
| | `-ParmVarDecl 0x7fc821079d20 <col:8> col:8 'const struct D4 &'
| |-CXXMethodDecl 0x7fc821079db8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(struct D4 &&)' inline default noexcept-unevaluated 0x7fc821079db8
| | `-ParmVarDecl 0x7fc821079ed0 <col:8> col:8 'struct D4 &&'
| |-CXXDestructorDecl 0x7fc821079f58 <col:8> col:8 implicit ~D4 'void (void)' inline default trivial noexcept-unevaluated 0x7fc821079f58
| |-CXXConstructorDecl 0x7fc8200057b0 <col:8> col:8 implicit used D4 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7fc820006850 <col:8> 'struct B5' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class X'
| | | `-CXXConstructExpr 0x7fc820006940 <col:8> 'class X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Y'
| | | `-CXXConstructExpr 0x7fc820006a30 <col:8> 'class Y' 'void (void) noexcept'
| | `-CompoundStmt 0x7fc820006ab0 <col:8>
| |-CXXConstructorDecl 0x7fc820005b98 <col:8> col:8 implicit D4 'void (const struct D4 &)' inline default noexcept-unevaluated 0x7fc820005b98
| | `-ParmVarDecl 0x7fc820005cc0 <col:8> col:8 'const struct D4 &'
| `-CXXConstructorDecl 0x7fc8200066a8 <col:8> col:8 implicit D4 'void (struct D4 &&)' inline default noexcept-unevaluated 0x7fc8200066a8
|   `-ParmVarDecl 0x7fc8200067d0 <col:8> col:8 'struct D4 &&'
`-FunctionDecl 0x7fc82107a098 <line:37:1, line:62:1> line:37:5 main 'int (void)'
  `-CompoundStmt 0x7fc820006c40 <line:38:1, line:62:1>
    |-DeclStmt 0x7fc82107a398 <line:40:5, col:32>
    | `-VarDecl 0x7fc82107a2a8 <col:5, col:31> col:17 used b1p 'void (struct B1::*)(void)' cinit
    |   `-UnaryOperator 0x7fc82107a378 <col:26, col:31> 'void (struct B1::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fc82107a340 <col:27, col:31> 'void (void)' CXXMethod 0x7fc82104b290 'm' 'void (void)'
    |-DeclStmt 0x7fc8200012d0 <line:41:5, col:12>
    | `-VarDecl 0x7fc82107a3c0 <col:5, col:11> col:8 used d1 'struct D1' listinit
    |   `-CXXConstructExpr 0x7fc8200012a0 <col:8, col:11> 'struct D1' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fc8200013b8 <line:42:5, col:15> 'void'
    | `-ParenExpr 0x7fc820001398 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fc820001370 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fc820001350 <col:6> 'struct B1' lvalue <DerivedToBase (B1)>
    |     | `-DeclRefExpr 0x7fc8200012e8 <col:6> 'struct D1' lvalue Var 0x7fc82107a3c0 'd1' 'struct D1'
    |     `-ImplicitCastExpr 0x7fc820001338 <col:10> 'void (struct B1::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fc820001310 <col:10> 'void (struct B1::*)(void)' lvalue Var 0x7fc82107a2a8 'b1p' 'void (struct B1::*)(void)'
    |-DeclStmt 0x7fc8200015b8 <line:45:5, col:32>
    | `-VarDecl 0x7fc8200014c8 <col:5, col:31> col:17 used b2p 'void (struct B2::*)(void)' cinit
    |   `-UnaryOperator 0x7fc820001598 <col:26, col:31> 'void (struct B2::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fc820001560 <col:27, col:31> 'void (void)' CXXMethod 0x7fc82104b788 'm' 'void (void)'
    |-DeclStmt 0x7fc820001f98 <line:46:5, col:12>
    | `-VarDecl 0x7fc8200015e0 <col:5, col:11> col:8 used d2 'struct D2' listinit
    |   `-CXXConstructExpr 0x7fc820001f68 <col:8, col:11> 'struct D2' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fc820004080 <line:47:5, col:15> 'void'
    | `-ParenExpr 0x7fc820004060 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fc820004038 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fc820004018 <col:6> 'struct B2' lvalue <DerivedToBase (B2)>
    |     | `-DeclRefExpr 0x7fc820001fb0 <col:6> 'struct D2' lvalue Var 0x7fc8200015e0 'd2' 'struct D2'
    |     `-ImplicitCastExpr 0x7fc820004000 <col:10> 'void (struct B2::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fc820001fd8 <col:10> 'void (struct B2::*)(void)' lvalue Var 0x7fc8200014c8 'b2p' 'void (struct B2::*)(void)'
    |-DeclStmt 0x7fc820004278 <line:50:5, col:32>
    | `-VarDecl 0x7fc820004188 <col:5, col:31> col:17 used b3p 'void (struct B3::*)(void)' cinit
    |   `-UnaryOperator 0x7fc820004258 <col:26, col:31> 'void (struct B3::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fc820004220 <col:27, col:31> 'void (void)' CXXMethod 0x7fc821074958 'm' 'void (void)'
    |-DeclStmt 0x7fc820004468 <line:51:5, col:32>
    | `-VarDecl 0x7fc820004378 <col:5, col:31> col:17 used b4p 'void (struct B4::*)(void)' cinit
    |   `-UnaryOperator 0x7fc820004448 <col:26, col:31> 'void (struct B4::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fc820004410 <col:27, col:31> 'void (void)' CXXMethod 0x7fc821075098 'm' 'void (void)'
    |-DeclStmt 0x7fc8200052f0 <line:52:5, col:12>
    | `-VarDecl 0x7fc820004490 <col:5, col:11> col:8 used d3 'struct D3' listinit
    |   `-CXXConstructExpr 0x7fc8200052c0 <col:8, col:11> 'struct D3' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fc8200053d8 <line:53:5, col:15> 'void'
    | `-ParenExpr 0x7fc8200053b8 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fc820005390 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fc820005370 <col:6> 'struct B3' lvalue <DerivedToBase (B3)>
    |     | `-DeclRefExpr 0x7fc820005308 <col:6> 'struct D3' lvalue Var 0x7fc820004490 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7fc820005358 <col:10> 'void (struct B3::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fc820005330 <col:10> 'void (struct B3::*)(void)' lvalue Var 0x7fc820004188 'b3p' 'void (struct B3::*)(void)'
    |-CXXMemberCallExpr 0x7fc8200054d0 <line:54:5, col:15> 'void'
    | `-ParenExpr 0x7fc8200054b0 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fc820005488 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fc820005468 <col:6> 'struct B4' lvalue <DerivedToBase (B4)>
    |     | `-DeclRefExpr 0x7fc820005400 <col:6> 'struct D3' lvalue Var 0x7fc820004490 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7fc820005450 <col:10> 'void (struct B4::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fc820005428 <col:10> 'void (struct B4::*)(void)' lvalue Var 0x7fc820004378 'b4p' 'void (struct B4::*)(void)'
    |-DeclStmt 0x7fc8200056c8 <line:57:5, col:32>
    | `-VarDecl 0x7fc8200055d8 <col:5, col:31> col:17 used b5p 'void (struct B5::*)(void)' cinit
    |   `-UnaryOperator 0x7fc8200056a8 <col:26, col:31> 'void (struct B5::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7fc820005670 <col:27, col:31> 'void (void)' CXXMethod 0x7fc821076ac8 'm' 'void (void)'
    |-DeclStmt 0x7fc820006af8 <line:58:5, col:12>
    | `-VarDecl 0x7fc8200056f0 <col:5, col:11> col:8 used d4 'struct D4' listinit
    |   `-CXXConstructExpr 0x7fc820006ac8 <col:8, col:11> 'struct D4' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fc820006be0 <line:59:5, col:15> 'void'
    | `-ParenExpr 0x7fc820006bc0 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7fc820006b98 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7fc820006b78 <col:6> 'struct B5' lvalue <DerivedToBase (virtual B5)>
    |     | `-DeclRefExpr 0x7fc820006b10 <col:6> 'struct D4' lvalue Var 0x7fc8200056f0 'd4' 'struct D4'
    |     `-ImplicitCastExpr 0x7fc820006b60 <col:10> 'void (struct B5::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7fc820006b38 <col:10> 'void (struct B5::*)(void)' lvalue Var 0x7fc8200055d8 'b5p' 'void (struct B5::*)(void)'
    `-ReturnStmt 0x7fc820006c28 <line:61:5, col:12>
      `-IntegerLiteral 0x7fc820006c08 <col:12> 'int' 0

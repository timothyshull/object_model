TranslationUnitDecl 0x7f903f8326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f903f832c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f903f832940 '__int128'
|-TypedefDecl 0x7f903f832cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f903f832960 'unsigned __int128'
|-TypedefDecl 0x7f903f833018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f903f832dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f903f832d28 '__NSConstantString_tag'
|-TypedefDecl 0x7f903f8330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f903f833070 'char *'
|   `-BuiltinType 0x7f903f832760 'char'
|-TypedefDecl 0x7f903f866200 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f903f833390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f903f8331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f903f833108 '__va_list_tag'
|-CXXRecordDecl 0x7f903f866258 <object_model/4_functions/06_pointer_to_member_functions.cpp:2:1, line:4:1> line:2:8 referenced struct B1 definition
| |-CXXRecordDecl 0x7f903f866378 <col:1, col:8> col:8 implicit struct B1
| |-CXXMethodDecl 0x7f903f866490 <line:3:5, col:15> col:10 used m 'void (void)'
| | `-CompoundStmt 0x7f903f866548 <col:14, col:15>
| |-CXXConstructorDecl 0x7f903f896788 <line:2:8> col:8 implicit constexpr B1 'void (void) noexcept' inline default trivial
| |-CXXDestructorDecl 0x7f903f896868 <col:8> col:8 implicit ~B1 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f896868
| |-CXXConstructorDecl 0x7f903f8969a8 <col:8> col:8 implicit constexpr B1 'void (const struct B1 &)' inline default trivial noexcept-unevaluated 0x7f903f8969a8
| | `-ParmVarDecl 0x7f903f896ad0 <col:8> col:8 'const struct B1 &'
| `-CXXConstructorDecl 0x7f903f896b68 <col:8> col:8 implicit constexpr B1 'void (struct B1 &&)' inline default trivial noexcept-unevaluated 0x7f903f896b68
|   `-ParmVarDecl 0x7f903f896c90 <col:8> col:8 'struct B1 &&'
|-CXXRecordDecl 0x7f903f866560 <line:6:1, col:17> col:8 referenced struct D1 definition
| |-public 'struct B1'
| |-CXXRecordDecl 0x7f903f8666c8 <col:1, col:8> col:8 implicit struct D1
| |-CXXConstructorDecl 0x7f903f896680 <col:8> col:8 implicit referenced constexpr D1 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7f903f896cf8 <col:8> col:8 implicit constexpr D1 'void (const struct D1 &)' inline default trivial noexcept-unevaluated 0x7f903f896cf8
| | `-ParmVarDecl 0x7f903f897640 <col:8> col:8 'const struct D1 &'
| `-CXXConstructorDecl 0x7f903f8976d8 <col:8> col:8 implicit constexpr D1 'void (struct D1 &&)' inline default trivial noexcept-unevaluated 0x7f903f8976d8
|   `-ParmVarDecl 0x7f903f897800 <col:8> col:8 'struct D1 &&'
|-CXXRecordDecl 0x7f903f866780 <line:9:1, line:11:1> line:9:8 referenced struct B2 definition
| |-CXXRecordDecl 0x7f903f8668a8 <col:1, col:8> col:8 implicit struct B2
| |-CXXMethodDecl 0x7f903f866988 <line:10:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7f903f866ea8 <col:22, col:23>
| |-CXXMethodDecl 0x7f903f866a78 <line:9:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7f903f866a78
| | `-ParmVarDecl 0x7f903f866b90 <col:8> col:8 'const struct B2 &'
| |-CXXMethodDecl 0x7f903f866c28 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B2 &(struct B2 &&)' inline default noexcept-unevaluated 0x7f903f866c28
| | `-ParmVarDecl 0x7f903f866d40 <col:8> col:8 'struct B2 &&'
| |-CXXDestructorDecl 0x7f903f866dc8 <col:8> col:8 implicit ~B2 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f866dc8
| |-CXXConstructorDecl 0x7f903f897f18 <col:8> col:8 implicit used constexpr B2 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7f903f899668 <col:8>
| |-CXXConstructorDecl 0x7f903f897ff8 <col:8> col:8 implicit constexpr B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7f903f897ff8
| | `-ParmVarDecl 0x7f903f898120 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7f903f898188 <col:8> col:8 implicit constexpr B2 'void (struct B2 &&)' inline default noexcept-unevaluated 0x7f903f898188
|   `-ParmVarDecl 0x7f903f8982b0 <col:8> col:8 'struct B2 &&'
|-CXXRecordDecl 0x7f903f866ec0 <line:13:1, col:17> col:8 referenced struct D2 definition
| |-public 'struct B2'
| |-CXXRecordDecl 0x7f903f867028 <col:1, col:8> col:8 implicit struct D2
| |-CXXMethodDecl 0x7f903f867118 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7f903f867118
| | `-ParmVarDecl 0x7f903f891640 <col:8> col:8 'const struct D2 &'
| |-CXXMethodDecl 0x7f903f8916d8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D2 &(struct D2 &&)' inline default noexcept-unevaluated 0x7f903f8916d8
| | `-ParmVarDecl 0x7f903f8917f0 <col:8> col:8 'struct D2 &&'
| |-CXXDestructorDecl 0x7f903f891878 <col:8> col:8 implicit ~D2 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f891878
| |-CXXConstructorDecl 0x7f903f897e10 <col:8> col:8 implicit used constexpr D2 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7f903f899680 <col:8> 'struct B2' 'void (void) noexcept'
| | `-CompoundStmt 0x7f903f8996f0 <col:8>
| |-CXXConstructorDecl 0x7f903f898318 <col:8> col:8 implicit constexpr D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7f903f898318
| | `-ParmVarDecl 0x7f903f898440 <col:8> col:8 'const struct D2 &'
| `-CXXConstructorDecl 0x7f903f8984a8 <col:8> col:8 implicit constexpr D2 'void (struct D2 &&)' inline default noexcept-unevaluated 0x7f903f8984a8
|   `-ParmVarDecl 0x7f903f899600 <col:8> col:8 'struct D2 &&'
|-CXXRecordDecl 0x7f903f891958 <line:16:1, line:18:1> line:16:8 referenced struct B3 definition
| |-CXXRecordDecl 0x7f903f891a78 <col:1, col:8> col:8 implicit struct B3
| |-CXXMethodDecl 0x7f903f891b58 <line:17:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7f903f892078 <col:22, col:23>
| |-CXXMethodDecl 0x7f903f891c48 <line:16:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7f903f891c48
| | `-ParmVarDecl 0x7f903f891d60 <col:8> col:8 'const struct B3 &'
| |-CXXMethodDecl 0x7f903f891df8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B3 &(struct B3 &&)' inline default noexcept-unevaluated 0x7f903f891df8
| | `-ParmVarDecl 0x7f903f891f10 <col:8> col:8 'struct B3 &&'
| |-CXXDestructorDecl 0x7f903f891f98 <col:8> col:8 implicit ~B3 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f891f98
| |-CXXConstructorDecl 0x7f903f899f68 <col:8> col:8 implicit used constexpr B3 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7f903f89b8b8 <col:8>
| |-CXXConstructorDecl 0x7f903f89a148 <col:8> col:8 implicit constexpr B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7f903f89a148
| | `-ParmVarDecl 0x7f903f89a270 <col:8> col:8 'const struct B3 &'
| `-CXXConstructorDecl 0x7f903f89a2d8 <col:8> col:8 implicit constexpr B3 'void (struct B3 &&)' inline default noexcept-unevaluated 0x7f903f89a2d8
|   `-ParmVarDecl 0x7f903f89a400 <col:8> col:8 'struct B3 &&'
|-CXXRecordDecl 0x7f903f892090 <line:20:1, line:22:1> line:20:8 referenced struct B4 definition
| |-CXXRecordDecl 0x7f903f8921b8 <col:1, col:8> col:8 implicit struct B4
| |-CXXMethodDecl 0x7f903f892298 <line:21:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7f903f8933e8 <col:22, col:23>
| |-CXXMethodDecl 0x7f903f892388 <line:20:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(const struct B4 &)' inline default noexcept-unevaluated 0x7f903f892388
| | `-ParmVarDecl 0x7f903f8924a0 <col:8> col:8 'const struct B4 &'
| |-CXXMethodDecl 0x7f903f892538 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B4 &(struct B4 &&)' inline default noexcept-unevaluated 0x7f903f892538
| | `-ParmVarDecl 0x7f903f893280 <col:8> col:8 'struct B4 &&'
| |-CXXDestructorDecl 0x7f903f893308 <col:8> col:8 implicit ~B4 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f893308
| |-CXXConstructorDecl 0x7f903f89a068 <col:8> col:8 implicit used constexpr B4 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7f903f89b938 <col:8>
| |-CXXConstructorDecl 0x7f903f89a468 <col:8> col:8 implicit constexpr B4 'void (const struct B4 &)' inline default noexcept-unevaluated 0x7f903f89a468
| | `-ParmVarDecl 0x7f903f89a590 <col:8> col:8 'const struct B4 &'
| `-CXXConstructorDecl 0x7f903f89b400 <col:8> col:8 implicit constexpr B4 'void (struct B4 &&)' inline default noexcept-unevaluated 0x7f903f89b400
|   `-ParmVarDecl 0x7f903f89b530 <col:8> col:8 'struct B4 &&'
|-CXXRecordDecl 0x7f903f893400 <line:24:1, col:21> col:8 referenced struct D3 definition
| |-public 'struct B3'
| |-public 'struct B4'
| |-CXXRecordDecl 0x7f903f8935a8 <col:1, col:8> col:8 implicit struct D3
| |-CXXMethodDecl 0x7f903f893698 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(const struct D3 &)' inline default noexcept-unevaluated 0x7f903f893698
| | `-ParmVarDecl 0x7f903f8937b0 <col:8> col:8 'const struct D3 &'
| |-CXXMethodDecl 0x7f903f893848 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct D3 &(struct D3 &&)' inline default noexcept-unevaluated 0x7f903f893848
| | `-ParmVarDecl 0x7f903f893960 <col:8> col:8 'struct D3 &&'
| |-CXXDestructorDecl 0x7f903f8939e8 <col:8> col:8 implicit ~D3 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f8939e8
| |-CXXConstructorDecl 0x7f903f899e60 <col:8> col:8 implicit used constexpr D3 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 0x7f903f89b8d0 <col:8> 'struct B3' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B4'
| | | `-CXXConstructExpr 0x7f903f89b950 <col:8> 'struct B4' 'void (void) noexcept'
| | `-CompoundStmt 0x7f903f89b9c8 <col:8>
| |-CXXConstructorDecl 0x7f903f89b598 <col:8> col:8 implicit constexpr D3 'void (const struct D3 &)' inline default noexcept-unevaluated 0x7f903f89b598
| | `-ParmVarDecl 0x7f903f89b6c0 <col:8> col:8 'const struct D3 &'
| `-CXXConstructorDecl 0x7f903f89b728 <col:8> col:8 implicit constexpr D3 'void (struct D3 &&)' inline default noexcept-unevaluated 0x7f903f89b728
|   `-ParmVarDecl 0x7f903f89b850 <col:8> col:8 'struct D3 &&'
|-CXXRecordDecl 0x7f903f893ac8 <line:27:1, line:29:1> line:27:8 referenced struct B5 definition
| |-CXXRecordDecl 0x7f903f893be8 <col:1, col:8> col:8 implicit struct B5
| |-CXXMethodDecl 0x7f903f893cc8 <line:28:5, col:23> col:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7f903f8941e8 <col:22, col:23>
| |-CXXMethodDecl 0x7f903f893db8 <line:27:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(const struct B5 &)' inline default noexcept-unevaluated 0x7f903f893db8
| | `-ParmVarDecl 0x7f903f893ed0 <col:8> col:8 'const struct B5 &'
| |-CXXMethodDecl 0x7f903f893f68 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct B5 &(struct B5 &&)' inline default noexcept-unevaluated 0x7f903f893f68
| | `-ParmVarDecl 0x7f903f894080 <col:8> col:8 'struct B5 &&'
| |-CXXDestructorDecl 0x7f903f894108 <col:8> col:8 implicit ~B5 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f894108
| |-CXXConstructorDecl 0x7f903f89c308 <col:8> col:8 implicit used constexpr B5 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7f903f89d588 <col:8>
| |-CXXConstructorDecl 0x7f903f89cc28 <col:8> col:8 implicit constexpr B5 'void (const struct B5 &)' inline default noexcept-unevaluated 0x7f903f89cc28
| | `-ParmVarDecl 0x7f903f89cd50 <col:8> col:8 'const struct B5 &'
| `-CXXConstructorDecl 0x7f903f89cdb8 <col:8> col:8 implicit constexpr B5 'void (struct B5 &&)' inline default noexcept-unevaluated 0x7f903f89cdb8
|   `-ParmVarDecl 0x7f903f89cee0 <col:8> col:8 'struct B5 &&'
|-CXXRecordDecl 0x7f9040000000 <line:31:1, col:30> col:7 referenced class X definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7f9040000180 <col:1, col:7> col:7 implicit class X
| |-CXXMethodDecl 0x7f9040000278 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(const class X &)' inline default noexcept-unevaluated 0x7f9040000278
| | `-ParmVarDecl 0x7f9040000390 <col:7> col:7 'const class X &'
| |-CXXMethodDecl 0x7f9040000428 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(class X &&)' inline default noexcept-unevaluated 0x7f9040000428
| | `-ParmVarDecl 0x7f9040000540 <col:7> col:7 'class X &&'
| |-CXXDestructorDecl 0x7f90400005c8 <col:7> col:7 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7f90400005c8
| |-CXXConstructorDecl 0x7f903f89c208 <col:7> col:7 implicit used X 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7f903f89d608 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7f903f89d678 <col:7>
| |-CXXConstructorDecl 0x7f903f89ca98 <col:7> col:7 implicit X 'void (const class X &)' inline default noexcept-unevaluated 0x7f903f89ca98
| | `-ParmVarDecl 0x7f903f89cbc0 <col:7> col:7 'const class X &'
| `-CXXConstructorDecl 0x7f903f89cf48 <col:7> col:7 implicit X 'void (class X &&)' inline default noexcept-unevaluated 0x7f903f89cf48
|   `-ParmVarDecl 0x7f903f89d070 <col:7> col:7 'class X &&'
|-CXXRecordDecl 0x7f90400006a8 <line:33:1, col:30> col:7 referenced class Y definition
| |-virtual public 'struct B5'
| |-CXXRecordDecl 0x7f9040000820 <col:1, col:7> col:7 implicit class Y
| |-CXXMethodDecl 0x7f9040000918 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(const class Y &)' inline default noexcept-unevaluated 0x7f9040000918
| | `-ParmVarDecl 0x7f9040000a30 <col:7> col:7 'const class Y &'
| |-CXXMethodDecl 0x7f9040000ac8 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(class Y &&)' inline default noexcept-unevaluated 0x7f9040000ac8
| | `-ParmVarDecl 0x7f9040000be0 <col:7> col:7 'class Y &&'
| |-CXXDestructorDecl 0x7f9040000c68 <col:7> col:7 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7f9040000c68
| |-CXXConstructorDecl 0x7f903f89c820 <col:7> col:7 implicit used Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7f903f89d6f8 <col:7> 'struct B5' 'void (void) noexcept'
| | `-CompoundStmt 0x7f903f89d768 <col:7>
| |-CXXConstructorDecl 0x7f903f89d0d8 <col:7> col:7 implicit Y 'void (const class Y &)' inline default noexcept-unevaluated 0x7f903f89d0d8
| | `-ParmVarDecl 0x7f903f89d200 <col:7> col:7 'const class Y &'
| `-CXXConstructorDecl 0x7f903f89d268 <col:7> col:7 implicit Y 'void (class Y &&)' inline default noexcept-unevaluated 0x7f903f89d268
|   `-ParmVarDecl 0x7f903f89d390 <col:7> col:7 'class Y &&'
|-CXXRecordDecl 0x7f9040000d48 <line:35:1, col:19> col:8 referenced struct D4 definition
| |-public 'class X'
| |-public 'class Y'
| |-CXXRecordDecl 0x7f9040000f00 <col:1, col:8> col:8 implicit struct D4
| |-CXXMethodDecl 0x7f903f895e00 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(const struct D4 &)' inline default noexcept-unevaluated 0x7f903f895e00
| | `-ParmVarDecl 0x7f903f895f20 <col:8> col:8 'const struct D4 &'
| |-CXXMethodDecl 0x7f903f895fb8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct D4 &(struct D4 &&)' inline default noexcept-unevaluated 0x7f903f895fb8
| | `-ParmVarDecl 0x7f903f8960d0 <col:8> col:8 'struct D4 &&'
| |-CXXDestructorDecl 0x7f903f896158 <col:8> col:8 implicit ~D4 'void (void)' inline default trivial noexcept-unevaluated 0x7f903f896158
| |-CXXConstructorDecl 0x7f903f89c100 <col:8> col:8 implicit used D4 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B5'
| | | `-CXXConstructExpr 0x7f903f89d5a0 <col:8> 'struct B5' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class X'
| | | `-CXXConstructExpr 0x7f903f89d690 <col:8> 'class X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Y'
| | | `-CXXConstructExpr 0x7f903f89d780 <col:8> 'class Y' 'void (void) noexcept'
| | `-CompoundStmt 0x7f903f89e200 <col:8>
| |-CXXConstructorDecl 0x7f903f89c908 <col:8> col:8 implicit D4 'void (const struct D4 &)' inline default noexcept-unevaluated 0x7f903f89c908
| | `-ParmVarDecl 0x7f903f89ca30 <col:8> col:8 'const struct D4 &'
| `-CXXConstructorDecl 0x7f903f89d3f8 <col:8> col:8 implicit D4 'void (struct D4 &&)' inline default noexcept-unevaluated 0x7f903f89d3f8
|   `-ParmVarDecl 0x7f903f89d520 <col:8> col:8 'struct D4 &&'
`-FunctionDecl 0x7f903f896298 <line:37:1, line:62:1> line:37:5 main 'int (void)'
  `-CompoundStmt 0x7f903f89e670 <line:38:1, line:62:1>
    |-DeclStmt 0x7f903f896598 <line:40:5, col:32>
    | `-VarDecl 0x7f903f8964a8 <col:5, col:31> col:17 used b1p 'void (struct B1::*)(void)' cinit
    |   `-UnaryOperator 0x7f903f896578 <col:26, col:31> 'void (struct B1::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7f903f896540 <col:27, col:31> 'void (void)' CXXMethod 0x7f903f866490 'm' 'void (void)'
    |-DeclStmt 0x7f903f897a40 <line:41:5, col:12>
    | `-VarDecl 0x7f903f8965c0 <col:5, col:11> col:8 used d1 'struct D1' listinit
    |   `-CXXConstructExpr 0x7f903f8978a0 <col:8, col:11> 'struct D1' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7f903f897b28 <line:42:5, col:15> 'void'
    | `-ParenExpr 0x7f903f897b08 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7f903f897ae0 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7f903f897ac0 <col:6> 'struct B1' lvalue <DerivedToBase (B1)>
    |     | `-DeclRefExpr 0x7f903f897a58 <col:6> 'struct D1' lvalue Var 0x7f903f8965c0 'd1' 'struct D1'
    |     `-ImplicitCastExpr 0x7f903f897aa8 <col:10> 'void (struct B1::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7f903f897a80 <col:10> 'void (struct B1::*)(void)' lvalue Var 0x7f903f8964a8 'b1p' 'void (struct B1::*)(void)'
    |-DeclStmt 0x7f903f897d28 <line:45:5, col:32>
    | `-VarDecl 0x7f903f897c38 <col:5, col:31> col:17 used b2p 'void (struct B2::*)(void)' cinit
    |   `-UnaryOperator 0x7f903f897d08 <col:26, col:31> 'void (struct B2::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7f903f897cd0 <col:27, col:31> 'void (void)' CXXMethod 0x7f903f866988 'm' 'void (void)'
    |-DeclStmt 0x7f903f8998a8 <line:46:5, col:12>
    | `-VarDecl 0x7f903f897d50 <col:5, col:11> col:8 used d2 'struct D2' listinit
    |   `-CXXConstructExpr 0x7f903f899708 <col:8, col:11> 'struct D2' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7f903f899990 <line:47:5, col:15> 'void'
    | `-ParenExpr 0x7f903f899970 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7f903f899948 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7f903f899928 <col:6> 'struct B2' lvalue <DerivedToBase (B2)>
    |     | `-DeclRefExpr 0x7f903f8998c0 <col:6> 'struct D2' lvalue Var 0x7f903f897d50 'd2' 'struct D2'
    |     `-ImplicitCastExpr 0x7f903f899910 <col:10> 'void (struct B2::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7f903f8998e8 <col:10> 'void (struct B2::*)(void)' lvalue Var 0x7f903f897c38 'b2p' 'void (struct B2::*)(void)'
    |-DeclStmt 0x7f903f899b88 <line:50:5, col:32>
    | `-VarDecl 0x7f903f899a98 <col:5, col:31> col:17 used b3p 'void (struct B3::*)(void)' cinit
    |   `-UnaryOperator 0x7f903f899b68 <col:26, col:31> 'void (struct B3::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7f903f899b30 <col:27, col:31> 'void (void)' CXXMethod 0x7f903f891b58 'm' 'void (void)'
    |-DeclStmt 0x7f903f899d78 <line:51:5, col:32>
    | `-VarDecl 0x7f903f899c88 <col:5, col:31> col:17 used b4p 'void (struct B4::*)(void)' cinit
    |   `-UnaryOperator 0x7f903f899d58 <col:26, col:31> 'void (struct B4::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7f903f899d20 <col:27, col:31> 'void (void)' CXXMethod 0x7f903f892298 'm' 'void (void)'
    |-DeclStmt 0x7f903f89bc38 <line:52:5, col:12>
    | `-VarDecl 0x7f903f899da0 <col:5, col:11> col:8 used d3 'struct D3' listinit
    |   `-CXXConstructExpr 0x7f903f89b9e0 <col:8, col:11> 'struct D3' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7f903f89bd20 <line:53:5, col:15> 'void'
    | `-ParenExpr 0x7f903f89bd00 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7f903f89bcd8 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7f903f89bcb8 <col:6> 'struct B3' lvalue <DerivedToBase (B3)>
    |     | `-DeclRefExpr 0x7f903f89bc50 <col:6> 'struct D3' lvalue Var 0x7f903f899da0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7f903f89bca0 <col:10> 'void (struct B3::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7f903f89bc78 <col:10> 'void (struct B3::*)(void)' lvalue Var 0x7f903f899a98 'b3p' 'void (struct B3::*)(void)'
    |-CXXMemberCallExpr 0x7f903f89be18 <line:54:5, col:15> 'void'
    | `-ParenExpr 0x7f903f89bdf8 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7f903f89bdd0 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7f903f89bdb0 <col:6> 'struct B4' lvalue <DerivedToBase (B4)>
    |     | `-DeclRefExpr 0x7f903f89bd48 <col:6> 'struct D3' lvalue Var 0x7f903f899da0 'd3' 'struct D3'
    |     `-ImplicitCastExpr 0x7f903f89bd98 <col:10> 'void (struct B4::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7f903f89bd70 <col:10> 'void (struct B4::*)(void)' lvalue Var 0x7f903f899c88 'b4p' 'void (struct B4::*)(void)'
    |-DeclStmt 0x7f903f89c018 <line:57:5, col:32>
    | `-VarDecl 0x7f903f89bf28 <col:5, col:31> col:17 used b5p 'void (struct B5::*)(void)' cinit
    |   `-UnaryOperator 0x7f903f89bff8 <col:26, col:31> 'void (struct B5::*)(void)' prefix '&'
    |     `-DeclRefExpr 0x7f903f89bfc0 <col:27, col:31> 'void (void)' CXXMethod 0x7f903f893cc8 'm' 'void (void)'
    |-DeclStmt 0x7f903f89e248 <line:58:5, col:12>
    | `-VarDecl 0x7f903f89c040 <col:5, col:11> col:8 used d4 'struct D4' listinit
    |   `-CXXConstructExpr 0x7f903f89e218 <col:8, col:11> 'struct D4' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7f903f89e330 <line:59:5, col:15> 'void'
    | `-ParenExpr 0x7f903f89e310 <col:5, col:13> '<bound member function type>'
    |   `-BinaryOperator 0x7f903f89e2e8 <col:6, col:10> '<bound member function type>' '.*'
    |     |-ImplicitCastExpr 0x7f903f89e2c8 <col:6> 'struct B5' lvalue <DerivedToBase (virtual B5)>
    |     | `-DeclRefExpr 0x7f903f89e260 <col:6> 'struct D4' lvalue Var 0x7f903f89c040 'd4' 'struct D4'
    |     `-ImplicitCastExpr 0x7f903f89e2b0 <col:10> 'void (struct B5::*)(void)' <LValueToRValue>
    |       `-DeclRefExpr 0x7f903f89e288 <col:10> 'void (struct B5::*)(void)' lvalue Var 0x7f903f89bf28 'b5p' 'void (struct B5::*)(void)'
    `-ReturnStmt 0x7f903f89e658 <line:61:5, col:12>
      `-IntegerLiteral 0x7f903f89e638 <col:12> 'int' 0

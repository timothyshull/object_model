TranslationUnitDecl 0x7fdba18326d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced class P1 definition
| |-CXXRecordDecl implicit referenced class P1
| |-AccessSpecDecl public
| |-CXXDestructorDecl used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt
| |-CXXMethodDecl used x 'double (void) const'
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ->_x 0x7fdba2011618
| |         `-CXXThisExpr 'const class P1 *' this
| |-CXXMethodDecl used y 'double (void) const' virtual
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <IntegralToFloating>
| |       `-IntegerLiteral 'int' 0
| |-CXXMethodDecl used z 'double (void) const' virtual
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <IntegralToFloating>
| |       `-IntegerLiteral 'int' 0
| |-AccessSpecDecl protected
| |-CXXConstructorDecl used P1 'void (double)'
| | |-ParmVarDecl used x 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7fdba2011618 '_x' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fdba2011470 'x' 'double'
| | `-CompoundStmt
| |-FieldDecl referenced _x 'double'
| |-CXXMethodDecl > implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7fdba20116f8
| | `-ParmVarDecl 'const class P1 &'
| `-CXXConstructorDecl implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7fdba20413b8
|   `-ParmVarDecl 'const class P1 &'
|-FunctionDecl implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-CXXRecordDecl referenced class P2 definition
| |-public 'class P1'
| |-CXXRecordDecl implicit referenced class P2
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P2 'void (double, double)'
| | |-ParmVarDecl used x 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-ParmVarDecl used y 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 'class P1' 'void (double)'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fdba2040b90 'x' 'double'
| | |-CXXCtorInitializer Field 0x7fdba2041090 '_y' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fdba2040c08 'y' 'double'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~P2 'void (void) noexcept' default
| | |-CompoundStmt
| | `-OverrideAttr
| |-CXXMethodDecl used y 'double (void) const'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue ->_y 0x7fdba2041090
| | |       `-CXXThisExpr 'const class P2 *' this
| | `-OverrideAttr
| |-AccessSpecDecl protected
| |-FieldDecl referenced _y 'double'
| |-CXXMethodDecl > implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7fdba2041178
| | `-ParmVarDecl 'const class P2 &'
| `-CXXConstructorDecl implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7fdba20432f8
|   `-ParmVarDecl 'const class P2 &'
|-CXXRecordDecl referenced class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl implicit referenced class P3
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P3 'void (double, double, double)'
| | |-ParmVarDecl used x 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-ParmVarDecl used y 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-ParmVarDecl used z 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 'double' lvalue ParmVar 0x7fdba20429f0 'x' 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fdba2042a68 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fdba2042f80 '_z' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fdba2042ae0 'z' 'double'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~P3 'void (void) noexcept' default
| | |-CompoundStmt
| | `-OverrideAttr
| |-CXXMethodDecl used z 'double (void) const'
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue ->_z 0x7fdba2042f80
| | |       `-CXXThisExpr 'const class P3 *' this
| | `-OverrideAttr
| |-AccessSpecDecl protected
| |-FieldDecl referenced _z 'double'
| |-CXXMethodDecl > implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7fdba2043068
| | `-ParmVarDecl 'const class P3 &'
| `-CXXConstructorDecl implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7fdba2800b90
|   `-ParmVarDecl 'const class P3 &'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used p3 'class P3' listinit
    |   `-CXXConstructExpr 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 'double' 1.000000e+00
    |     |-FloatingLiteral 'double' 2.000000e+00
    |     `-FloatingLiteral 'double' 3.000000e+00
    |-DeclStmt
    | `-VarDecl x 'double':'double' cinit
    |   `-CXXMemberCallExpr 'double'
    |     `-MemberExpr '<bound member function type>' .x 0x7fdba2011218
    |       `-ImplicitCastExpr 'const class P1' lvalue <UncheckedDerivedToBase (P2 -> P1)>
    |         `-DeclRefExpr 'class P3' lvalue Var 0x7fdba2800a78 'p3' 'class P3'
    |-DeclStmt
    | `-VarDecl y 'double':'double' cinit
    |   `-CXXMemberCallExpr 'double'
    |     `-MemberExpr '<bound member function type>' .y 0x7fdba2040f70
    |       `-ImplicitCastExpr 'const class P2' lvalue <UncheckedDerivedToBase (P2)>
    |         `-DeclRefExpr 'class P3' lvalue Var 0x7fdba2800a78 'p3' 'class P3'
    |-DeclStmt
    | `-VarDecl z 'double':'double' cinit
    |   `-CXXMemberCallExpr 'double'
    |     `-MemberExpr '<bound member function type>' .z 0x7fdba2042e60
    |       `-ImplicitCastExpr 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 'class P3' lvalue Var 0x7fdba2800a78 'p3' 'class P3'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

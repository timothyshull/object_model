TranslationUnitDecl 0x7fdba18326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fdba1832c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fdba1832940 '__int128'
|-TypedefDecl 0x7fdba1832cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fdba1832960 'unsigned __int128'
|-TypedefDecl 0x7fdba1833018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fdba1832dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fdba1832d28 '__NSConstantString_tag'
|-TypedefDecl 0x7fdba18330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fdba1833070 'char *'
|   `-BuiltinType 0x7fdba1832760 'char'
|-TypedefDecl 0x7fdba2010e00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fdba1833390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fdba18331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fdba1833108 '__va_list_tag'
|-CXXRecordDecl 0x7fdba2010e58 <object_model/4_functions/02_virtual_member_functions.cpp:1:1, line:15:1> line:1:7 referenced class P1 definition
| |-CXXRecordDecl 0x7fdba2010f78 <col:1, col:7> col:7 implicit referenced class P1
| |-AccessSpecDecl 0x7fdba2011010 <line:2:1, col:7> col:1 public
| |-CXXDestructorDecl 0x7fdba20110f0 <line:3:5, col:27> col:13 used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7fdba20426e0 <col:27>
| |-CXXMethodDecl 0x7fdba2011218 <line:5:5, col:35> col:12 used x 'double (void) const'
| | `-CompoundStmt 0x7fdba2040740 <col:22, col:35>
| |   `-ReturnStmt 0x7fdba2040728 <col:24, col:31>
| |     `-ImplicitCastExpr 0x7fdba2040710 <col:31> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fdba20406d8 <col:31> 'const double' lvalue ->_x 0x7fdba2011618
| |         `-CXXThisExpr 0x7fdba20406c0 <col:31> 'const class P1 *' this
| |-CXXMethodDecl 0x7fdba20112d8 <line:7:5, col:42> col:20 used y 'double (void) const' virtual
| | `-CompoundStmt 0x7fdba20407b0 <col:30, col:42>
| |   `-ReturnStmt 0x7fdba2040798 <col:32, col:39>
| |     `-ImplicitCastExpr 0x7fdba2040780 <col:39> 'double' <IntegralToFloating>
| |       `-IntegerLiteral 0x7fdba2040760 <col:39> 'int' 0
| |-CXXMethodDecl 0x7fdba2011398 <line:9:5, col:42> col:20 used z 'double (void) const' virtual
| | `-CompoundStmt 0x7fdba2040820 <col:30, col:42>
| |   `-ReturnStmt 0x7fdba2040808 <col:32, col:39>
| |     `-ImplicitCastExpr 0x7fdba20407f0 <col:39> 'double' <IntegralToFloating>
| |       `-IntegerLiteral 0x7fdba20407d0 <col:39> 'int' 0
| |-AccessSpecDecl 0x7fdba2011430 <line:11:1, col:10> col:1 protected
| |-CXXConstructorDecl 0x7fdba2011550 <line:12:5, col:42> col:14 used P1 'void (double)'
| | |-ParmVarDecl 0x7fdba2011470 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7fdba2040668 <col:28> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7fdba2011618 '_x' 'double'
| | | `-InitListExpr 0x7fdba20408b0 <col:37, col:39> 'double'
| | |   `-ImplicitCastExpr 0x7fdba20408f0 <col:38> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fdba2040840 <col:38> 'double' lvalue ParmVar 0x7fdba2011470 'x' 'double'
| | `-CompoundStmt 0x7fdba2040940 <col:41, col:42>
| |-FieldDecl 0x7fdba2011618 <line:14:5, col:12> col:12 referenced _x 'double'
| |-CXXMethodDecl 0x7fdba20116f8 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7fdba20116f8
| | `-ParmVarDecl 0x7fdba2011810 <col:7> col:7 'const class P1 &'
| `-CXXConstructorDecl 0x7fdba20413b8 <col:7> col:7 implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7fdba20413b8
|   `-ParmVarDecl 0x7fdba20414e0 <col:7> col:7 'const class P1 &'
|-FunctionDecl 0x7fdba20118b8 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fdba2011998 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fdba2011950 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fdba2011a00 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fdba2011ae0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fdba2011a98 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fdba2011bc8 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fdba2011ca8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fdba2011c60 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fdba2011d10 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7fdba2040600 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fdba2011da8 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7fdba2040958 <line:17:1, line:27:1> line:17:7 referenced class P2 definition
| |-public 'class P1'
| |-CXXRecordDecl 0x7fdba2040ab8 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7fdba2040b50 <line:18:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fdba2040d30 <line:19:5, col:65> col:14 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7fdba2040b90 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7fdba20412f8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7fdba2040c08 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7fdba2041318 <col:44> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 0x7fdba2041560 <col:51, col:55> 'class P1' 'void (double)'
| | |   `-ImplicitCastExpr 0x7fdba2041548 <col:54> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fdba2041338 <col:54> 'double' lvalue ParmVar 0x7fdba2040b90 'x' 'double'
| | |-CXXCtorInitializer Field 0x7fdba2041090 '_y' 'double'
| | | `-InitListExpr 0x7fdba2042648 <col:60, col:62> 'double'
| | |   `-ImplicitCastExpr 0x7fdba2042688 <col:61> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fdba20415c0 <col:61> 'double' lvalue ParmVar 0x7fdba2040c08 'y' 'double'
| | `-CompoundStmt 0x7fdba20426f8 <col:64, col:65>
| |-CXXDestructorDecl 0x7fdba2040e38 <line:21:5, col:28> col:5 used ~P2 'void (void) noexcept' default
| | |-CompoundStmt 0x7fdba2800838 <col:28>
| | `-OverrideAttr 0x7fdba2040ed8 <col:11>
| |-CXXMethodDecl 0x7fdba2040f70 <line:23:5, col:44> col:12 used y 'double (void) const'
| | |-CompoundStmt 0x7fdba2042790 <col:31, col:44>
| | | `-ReturnStmt 0x7fdba2042778 <col:33, col:40>
| | |   `-ImplicitCastExpr 0x7fdba2042760 <col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7fdba2042728 <col:40> 'const double' lvalue ->_y 0x7fdba2041090
| | |       `-CXXThisExpr 0x7fdba2042710 <col:40> 'const class P2 *' this
| | `-OverrideAttr 0x7fdba2041008 <col:22>
| |-AccessSpecDecl 0x7fdba2041050 <line:25:1, col:10> col:1 protected
| |-FieldDecl 0x7fdba2041090 <line:26:5, col:12> col:12 referenced _y 'double'
| |-CXXMethodDecl 0x7fdba2041178 <line:17:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7fdba2041178
| | `-ParmVarDecl 0x7fdba2041290 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7fdba20432f8 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7fdba20432f8
|   `-ParmVarDecl 0x7fdba2043420 <col:7> col:7 'const class P2 &'
|-CXXRecordDecl 0x7fdba20427b0 <line:29:1, line:39:1> line:29:7 referenced class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl 0x7fdba2042918 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7fdba20429b0 <line:30:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fdba2042c10 <line:31:5, col:84> col:14 used P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7fdba20429f0 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7fdba20431e8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7fdba2042a68 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7fdba2043208 <col:44> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7fdba2042ae0 <col:49, col:60> col:56 used z 'double' cinit
| | | `-FloatingLiteral 0x7fdba2043228 <col:60> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7fdba20434b8 <col:67, col:74> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7fdba2043488 <col:70> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7fdba2043248 <col:70> 'double' lvalue ParmVar 0x7fdba20429f0 'x' 'double'
| | |   `-ImplicitCastExpr 0x7fdba20434a0 <col:73> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fdba2043270 <col:73> 'double' lvalue ParmVar 0x7fdba2042a68 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fdba2042f80 '_z' 'double'
| | | `-InitListExpr 0x7fdba2043590 <col:79, col:81> 'double'
| | |   `-ImplicitCastExpr 0x7fdba20435d0 <col:80> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fdba2043520 <col:80> 'double' lvalue ParmVar 0x7fdba2042ae0 'z' 'double'
| | `-CompoundStmt 0x7fdba2800850 <col:83, col:84>
| |-CXXDestructorDecl 0x7fdba2042d20 <line:33:5, col:28> col:5 used ~P3 'void (void) noexcept' default
| | |-CompoundStmt 0x7fdba2800d70 <col:28>
| | `-OverrideAttr 0x7fdba2042dc0 <col:11>
| |-CXXMethodDecl 0x7fdba2042e60 <line:35:5, col:44> col:12 used z 'double (void) const'
| | |-CompoundStmt 0x7fdba28008e8 <col:31, col:44>
| | | `-ReturnStmt 0x7fdba28008d0 <col:33, col:40>
| | |   `-ImplicitCastExpr 0x7fdba28008b8 <col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7fdba2800880 <col:40> 'const double' lvalue ->_z 0x7fdba2042f80
| | |       `-CXXThisExpr 0x7fdba2800868 <col:40> 'const class P3 *' this
| | `-OverrideAttr 0x7fdba2042ef8 <col:22>
| |-AccessSpecDecl 0x7fdba2042f40 <line:37:1, col:10> col:1 protected
| |-FieldDecl 0x7fdba2042f80 <line:38:5, col:12> col:12 referenced _z 'double'
| |-CXXMethodDecl 0x7fdba2043068 <line:29:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7fdba2043068
| | `-ParmVarDecl 0x7fdba2043180 <col:7> col:7 'const class P3 &'
| `-CXXConstructorDecl 0x7fdba2800b90 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7fdba2800b90
|   `-ParmVarDecl 0x7fdba2800cc0 <col:7> col:7 'const class P3 &'
`-FunctionDecl 0x7fdba2800968 <line:41:1, line:48:1> line:41:5 main 'int (void)'
  `-CompoundStmt 0x7fdba2801558 <line:42:1, line:48:1>
    |-DeclStmt 0x7fdba2800d88 <line:43:5, col:25>
    | `-VarDecl 0x7fdba2800a78 <col:5, col:24> col:8 used p3 'class P3' listinit
    |   `-CXXConstructExpr 0x7fdba2800d28 <col:8, col:24> 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 0x7fdba2800ad8 <col:11> 'double' 1.000000e+00
    |     |-FloatingLiteral 0x7fdba2800af8 <col:16> 'double' 2.000000e+00
    |     `-FloatingLiteral 0x7fdba2800b18 <col:21> 'double' 3.000000e+00
    |-DeclStmt 0x7fdba28011e0 <line:44:5, col:20>
    | `-VarDecl 0x7fdba2800dd0 <col:5, col:19> col:10 x 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7fdba2800e90 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7fdba2800e58 <col:14, col:17> '<bound member function type>' .x 0x7fdba2011218
    |       `-ImplicitCastExpr 0x7fdba2800eb8 <col:14> 'const class P1' lvalue <UncheckedDerivedToBase (P2 -> P1)>
    |         `-DeclRefExpr 0x7fdba2800e30 <col:14> 'class P3' lvalue Var 0x7fdba2800a78 'p3' 'class P3'
    |-DeclStmt 0x7fdba2801378 <line:45:5, col:20>
    | `-VarDecl 0x7fdba2801208 <col:5, col:19> col:10 y 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7fdba28012c8 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7fdba2801290 <col:14, col:17> '<bound member function type>' .y 0x7fdba2040f70
    |       `-ImplicitCastExpr 0x7fdba28012f0 <col:14> 'const class P2' lvalue <UncheckedDerivedToBase (P2)>
    |         `-DeclRefExpr 0x7fdba2801268 <col:14> 'class P3' lvalue Var 0x7fdba2800a78 'p3' 'class P3'
    |-DeclStmt 0x7fdba2801508 <line:46:5, col:20>
    | `-VarDecl 0x7fdba28013a0 <col:5, col:19> col:10 z 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7fdba2801460 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7fdba2801428 <col:14, col:17> '<bound member function type>' .z 0x7fdba2042e60
    |       `-ImplicitCastExpr 0x7fdba2801488 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7fdba2801400 <col:14> 'class P3' lvalue Var 0x7fdba2800a78 'p3' 'class P3'
    `-ReturnStmt 0x7fdba2801540 <line:47:5, col:12>
      `-IntegerLiteral 0x7fdba2801520 <col:12> 'int' 0

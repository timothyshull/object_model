TranslationUnitDecl 0x7f8dae0324d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8dae032a60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8dae032740 '__int128'
|-TypedefDecl 0x7f8dae032ad0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8dae032760 'unsigned __int128'
|-TypedefDecl 0x7f8dae032e18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8dae032bc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f8dae032b28 '__NSConstantString_tag'
|-TypedefDecl 0x7f8dae032eb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8dae032e70 'char *'
|   `-BuiltinType 0x7f8dae032560 'char'
|-TypedefDecl 0x7f8dae065600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8dae033190 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8dae032fa0 'struct __va_list_tag'
|     `-CXXRecord 0x7f8dae032f08 '__va_list_tag'
|-CXXRecordDecl 0x7f8dae065658 <object_model_refined/4_functions/02_virtual_member_functions.cpp:1:1, line:15:1> line:1:7 referenced class P1 definition
| |-CXXRecordDecl 0x7f8dae065778 <col:1, col:7> col:7 implicit referenced class P1
| |-AccessSpecDecl 0x7f8dae065810 <line:2:1, col:7> col:1 public
| |-CXXDestructorDecl 0x7f8dae0658f0 <line:3:5, col:27> col:13 used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7f8dae092ae0 <col:27>
| |-CXXMethodDecl 0x7f8dae065a18 <line:5:5, col:35> col:12 used x 'double (void) const'
| | `-CompoundStmt 0x7f8dae090b40 <col:22, col:35>
| |   `-ReturnStmt 0x7f8dae090b28 <col:24, col:31>
| |     `-ImplicitCastExpr 0x7f8dae090b10 <col:31> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7f8dae090ad8 <col:31> 'const double' lvalue ->_x 0x7f8dae065e18
| |         `-CXXThisExpr 0x7f8dae090ac0 <col:31> 'const class P1 *' this
| |-CXXMethodDecl 0x7f8dae065ad8 <line:7:5, col:42> col:20 used y 'double (void) const' virtual
| | `-CompoundStmt 0x7f8dae090bb0 <col:30, col:42>
| |   `-ReturnStmt 0x7f8dae090b98 <col:32, col:39>
| |     `-ImplicitCastExpr 0x7f8dae090b80 <col:39> 'double' <IntegralToFloating>
| |       `-IntegerLiteral 0x7f8dae090b60 <col:39> 'int' 0
| |-CXXMethodDecl 0x7f8dae065b98 <line:9:5, col:42> col:20 used z 'double (void) const' virtual
| | `-CompoundStmt 0x7f8dae090c20 <col:30, col:42>
| |   `-ReturnStmt 0x7f8dae090c08 <col:32, col:39>
| |     `-ImplicitCastExpr 0x7f8dae090bf0 <col:39> 'double' <IntegralToFloating>
| |       `-IntegerLiteral 0x7f8dae090bd0 <col:39> 'int' 0
| |-AccessSpecDecl 0x7f8dae065c30 <line:11:1, col:10> col:1 protected
| |-CXXConstructorDecl 0x7f8dae065d50 <line:12:5, col:42> col:14 used P1 'void (double)'
| | |-ParmVarDecl 0x7f8dae065c70 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7f8dae090a68 <col:28> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7f8dae065e18 '_x' 'double'
| | | `-InitListExpr 0x7f8dae090cb0 <col:37, col:39> 'double'
| | |   `-ImplicitCastExpr 0x7f8dae090cf0 <col:38> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8dae090c40 <col:38> 'double' lvalue ParmVar 0x7f8dae065c70 'x' 'double'
| | `-CompoundStmt 0x7f8dae090d40 <col:41, col:42>
| |-FieldDecl 0x7f8dae065e18 <line:14:5, col:12> col:12 referenced _x 'double'
| |-CXXMethodDecl 0x7f8dae065ef8 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7f8dae065ef8
| | `-ParmVarDecl 0x7f8dae066010 <col:7> col:7 'const class P1 &'
| `-CXXConstructorDecl 0x7f8dae0917b8 <col:7> col:7 implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7f8dae0917b8
|   `-ParmVarDecl 0x7f8dae0918e0 <col:7> col:7 'const class P1 &'
|-FunctionDecl 0x7f8dae0660b8 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7f8dae066198 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f8dae066150 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f8dae066200 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7f8dae0662e0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f8dae066298 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f8dae0663c8 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7f8dae0664a8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f8dae066460 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f8dae066510 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7f8dae090a00 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f8dae0665a8 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7f8dae090d58 <line:17:1, line:27:1> line:17:7 referenced class P2 definition
| |-public 'class P1'
| |-CXXRecordDecl 0x7f8dae090eb8 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7f8dae090f50 <line:18:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f8dae091130 <line:19:5, col:65> col:14 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7f8dae090f90 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7f8dae0916f8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7f8dae091008 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7f8dae091718 <col:44> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 0x7f8dae091960 <col:51, col:55> 'class P1' 'void (double)'
| | |   `-ImplicitCastExpr 0x7f8dae091948 <col:54> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8dae091738 <col:54> 'double' lvalue ParmVar 0x7f8dae090f90 'x' 'double'
| | |-CXXCtorInitializer Field 0x7f8dae091490 '_y' 'double'
| | | `-InitListExpr 0x7f8dae092a48 <col:60, col:62> 'double'
| | |   `-ImplicitCastExpr 0x7f8dae092a88 <col:61> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8dae0919c0 <col:61> 'double' lvalue ParmVar 0x7f8dae091008 'y' 'double'
| | `-CompoundStmt 0x7f8dae092af8 <col:64, col:65>
| |-CXXDestructorDecl 0x7f8dae091238 <line:21:5, col:28> col:5 used ~P2 'void (void) noexcept' default
| | |-CompoundStmt 0x7f8dae093e38 <col:28>
| | `-OverrideAttr 0x7f8dae0912d8 <col:11>
| |-CXXMethodDecl 0x7f8dae091370 <line:23:5, col:44> col:12 used y 'double (void) const'
| | |-CompoundStmt 0x7f8dae092b90 <col:31, col:44>
| | | `-ReturnStmt 0x7f8dae092b78 <col:33, col:40>
| | |   `-ImplicitCastExpr 0x7f8dae092b60 <col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f8dae092b28 <col:40> 'const double' lvalue ->_y 0x7f8dae091490
| | |       `-CXXThisExpr 0x7f8dae092b10 <col:40> 'const class P2 *' this
| | `-OverrideAttr 0x7f8dae091408 <col:22>
| |-AccessSpecDecl 0x7f8dae091450 <line:25:1, col:10> col:1 protected
| |-FieldDecl 0x7f8dae091490 <line:26:5, col:12> col:12 referenced _y 'double'
| |-CXXMethodDecl 0x7f8dae091578 <line:17:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7f8dae091578
| | `-ParmVarDecl 0x7f8dae091690 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7f8dae0936f8 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7f8dae0936f8
|   `-ParmVarDecl 0x7f8dae093820 <col:7> col:7 'const class P2 &'
|-CXXRecordDecl 0x7f8dae092bb0 <line:29:1, line:39:1> line:29:7 referenced class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl 0x7f8dae092d18 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7f8dae092db0 <line:30:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f8dae093010 <line:31:5, col:84> col:14 used P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7f8dae092df0 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7f8dae0935e8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7f8dae092e68 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7f8dae093608 <col:44> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7f8dae092ee0 <col:49, col:60> col:56 used z 'double' cinit
| | | `-FloatingLiteral 0x7f8dae093628 <col:60> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7f8dae0938b8 <col:67, col:74> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7f8dae093888 <col:70> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7f8dae093648 <col:70> 'double' lvalue ParmVar 0x7f8dae092df0 'x' 'double'
| | |   `-ImplicitCastExpr 0x7f8dae0938a0 <col:73> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8dae093670 <col:73> 'double' lvalue ParmVar 0x7f8dae092e68 'y' 'double'
| | |-CXXCtorInitializer Field 0x7f8dae093380 '_z' 'double'
| | | `-InitListExpr 0x7f8dae093990 <col:79, col:81> 'double'
| | |   `-ImplicitCastExpr 0x7f8dae0939d0 <col:80> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8dae093920 <col:80> 'double' lvalue ParmVar 0x7f8dae092ee0 'z' 'double'
| | `-CompoundStmt 0x7f8dae093e50 <col:83, col:84>
| |-CXXDestructorDecl 0x7f8dae093120 <line:33:5, col:28> col:5 used ~P3 'void (void) noexcept' default
| | |-CompoundStmt 0x7f8dae094370 <col:28>
| | `-OverrideAttr 0x7f8dae0931c0 <col:11>
| |-CXXMethodDecl 0x7f8dae093260 <line:35:5, col:44> col:12 used z 'double (void) const'
| | |-CompoundStmt 0x7f8dae093ee8 <col:31, col:44>
| | | `-ReturnStmt 0x7f8dae093ed0 <col:33, col:40>
| | |   `-ImplicitCastExpr 0x7f8dae093eb8 <col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f8dae093e80 <col:40> 'const double' lvalue ->_z 0x7f8dae093380
| | |       `-CXXThisExpr 0x7f8dae093e68 <col:40> 'const class P3 *' this
| | `-OverrideAttr 0x7f8dae0932f8 <col:22>
| |-AccessSpecDecl 0x7f8dae093340 <line:37:1, col:10> col:1 protected
| |-FieldDecl 0x7f8dae093380 <line:38:5, col:12> col:12 referenced _z 'double'
| |-CXXMethodDecl 0x7f8dae093468 <line:29:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7f8dae093468
| | `-ParmVarDecl 0x7f8dae093580 <col:7> col:7 'const class P3 &'
| `-CXXConstructorDecl 0x7f8dae094190 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7f8dae094190
|   `-ParmVarDecl 0x7f8dae0942c0 <col:7> col:7 'const class P3 &'
`-FunctionDecl 0x7f8dae093f68 <line:41:1, line:48:1> line:41:5 main 'int (void)'
  `-CompoundStmt 0x7f8dae094b28 <line:42:1, line:48:1>
    |-DeclStmt 0x7f8dae094388 <line:43:5, col:25>
    | `-VarDecl 0x7f8dae094078 <col:5, col:24> col:8 used p3 'class P3' listinit
    |   `-CXXConstructExpr 0x7f8dae094328 <col:8, col:24> 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 0x7f8dae0940d8 <col:11> 'double' 1.000000e+00
    |     |-FloatingLiteral 0x7f8dae0940f8 <col:16> 'double' 2.000000e+00
    |     `-FloatingLiteral 0x7f8dae094118 <col:21> 'double' 3.000000e+00
    |-DeclStmt 0x7f8dae0947b0 <line:44:5, col:20>
    | `-VarDecl 0x7f8dae0943d0 <col:5, col:19> col:10 x 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7f8dae094490 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7f8dae094458 <col:14, col:17> '<bound member function type>' .x 0x7f8dae065a18
    |       `-ImplicitCastExpr 0x7f8dae0944b8 <col:14> 'const class P1' lvalue <UncheckedDerivedToBase (P2 -> P1)>
    |         `-DeclRefExpr 0x7f8dae094430 <col:14> 'class P3' lvalue Var 0x7f8dae094078 'p3' 'class P3'
    |-DeclStmt 0x7f8dae094948 <line:45:5, col:20>
    | `-VarDecl 0x7f8dae0947d8 <col:5, col:19> col:10 y 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7f8dae094898 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7f8dae094860 <col:14, col:17> '<bound member function type>' .y 0x7f8dae091370
    |       `-ImplicitCastExpr 0x7f8dae0948c0 <col:14> 'const class P2' lvalue <UncheckedDerivedToBase (P2)>
    |         `-DeclRefExpr 0x7f8dae094838 <col:14> 'class P3' lvalue Var 0x7f8dae094078 'p3' 'class P3'
    |-DeclStmt 0x7f8dae094ad8 <line:46:5, col:20>
    | `-VarDecl 0x7f8dae094970 <col:5, col:19> col:10 z 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7f8dae094a30 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7f8dae0949f8 <col:14, col:17> '<bound member function type>' .z 0x7f8dae093260
    |       `-ImplicitCastExpr 0x7f8dae094a58 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7f8dae0949d0 <col:14> 'class P3' lvalue Var 0x7f8dae094078 'p3' 'class P3'
    `-ReturnStmt 0x7f8dae094b10 <line:47:5, col:12>
      `-IntegerLiteral 0x7f8dae094af0 <col:12> 'int' 0

TranslationUnitDecl 0x7ffcb00186d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ffcb0018c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ffcb0018940 '__int128'
|-TypedefDecl 0x7ffcb0018cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ffcb0018960 'unsigned __int128'
|-TypedefDecl 0x7ffcb0019018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ffcb0018dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7ffcb0018d28 '__NSConstantString_tag'
|-TypedefDecl 0x7ffcb00190b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ffcb0019070 'char *'
|   `-BuiltinType 0x7ffcb0018760 'char'
|-TypedefDecl 0x7ffcb004ae00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ffcb0019390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ffcb00191a0 'struct __va_list_tag'
|     `-CXXRecord 0x7ffcb0019108 '__va_list_tag'
|-CXXRecordDecl 0x7ffcb004ae58 <object_model_refined/4_functions/02_virtual_member_functions.cpp:1:1, line:15:1> line:1:7 referenced class P1 definition
| |-CXXRecordDecl 0x7ffcb004af78 <col:1, col:7> col:7 implicit referenced class P1
| |-AccessSpecDecl 0x7ffcb004b010 <line:2:1, col:7> col:1 public
| |-CXXDestructorDecl 0x7ffcb004b0f0 <line:3:5, col:27> col:13 used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7ffcb00586e0 <col:27>
| |-CXXMethodDecl 0x7ffcb004b218 <line:5:5, col:35> col:12 used x 'double (void) const'
| | `-CompoundStmt 0x7ffcb005c740 <col:22, col:35>
| |   `-ReturnStmt 0x7ffcb005c728 <col:24, col:31>
| |     `-ImplicitCastExpr 0x7ffcb005c710 <col:31> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7ffcb005c6d8 <col:31> 'const double' lvalue ->_x 0x7ffcb004b618
| |         `-CXXThisExpr 0x7ffcb005c6c0 <col:31> 'const class P1 *' this
| |-CXXMethodDecl 0x7ffcb004b2d8 <line:7:5, col:42> col:20 used y 'double (void) const' virtual
| | `-CompoundStmt 0x7ffcb005c7b0 <col:30, col:42>
| |   `-ReturnStmt 0x7ffcb005c798 <col:32, col:39>
| |     `-ImplicitCastExpr 0x7ffcb005c780 <col:39> 'double' <IntegralToFloating>
| |       `-IntegerLiteral 0x7ffcb005c760 <col:39> 'int' 0
| |-CXXMethodDecl 0x7ffcb004b398 <line:9:5, col:42> col:20 used z 'double (void) const' virtual
| | `-CompoundStmt 0x7ffcb005c820 <col:30, col:42>
| |   `-ReturnStmt 0x7ffcb005c808 <col:32, col:39>
| |     `-ImplicitCastExpr 0x7ffcb005c7f0 <col:39> 'double' <IntegralToFloating>
| |       `-IntegerLiteral 0x7ffcb005c7d0 <col:39> 'int' 0
| |-AccessSpecDecl 0x7ffcb004b430 <line:11:1, col:10> col:1 protected
| |-CXXConstructorDecl 0x7ffcb004b550 <line:12:5, col:42> col:14 used P1 'void (double)'
| | |-ParmVarDecl 0x7ffcb004b470 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7ffcb005c668 <col:28> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7ffcb004b618 '_x' 'double'
| | | `-InitListExpr 0x7ffcb005c8b0 <col:37, col:39> 'double'
| | |   `-ImplicitCastExpr 0x7ffcb005c8f0 <col:38> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ffcb005c840 <col:38> 'double' lvalue ParmVar 0x7ffcb004b470 'x' 'double'
| | `-CompoundStmt 0x7ffcb005c940 <col:41, col:42>
| |-FieldDecl 0x7ffcb004b618 <line:14:5, col:12> col:12 referenced _x 'double'
| |-CXXMethodDecl 0x7ffcb004b6f8 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7ffcb004b6f8
| | `-ParmVarDecl 0x7ffcb004b810 <col:7> col:7 'const class P1 &'
| `-CXXConstructorDecl 0x7ffcb005d3b8 <col:7> col:7 implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7ffcb005d3b8
|   `-ParmVarDecl 0x7ffcb005d4e0 <col:7> col:7 'const class P1 &'
|-FunctionDecl 0x7ffcb004b8b8 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7ffcb004b998 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7ffcb004b950 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ffcb004ba00 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7ffcb004bae0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7ffcb004ba98 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ffcb004bbc8 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7ffcb004bca8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7ffcb004bc60 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ffcb004bd10 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7ffcb005c600 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7ffcb004bda8 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7ffcb005c958 <line:17:1, line:27:1> line:17:7 referenced class P2 definition
| |-public 'class P1'
| |-CXXRecordDecl 0x7ffcb005cab8 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7ffcb005cb50 <line:18:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7ffcb005cd30 <line:19:5, col:65> col:14 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7ffcb005cb90 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7ffcb005d2f8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ffcb005cc08 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7ffcb005d318 <col:44> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 0x7ffcb005d560 <col:51, col:55> 'class P1' 'void (double)'
| | |   `-ImplicitCastExpr 0x7ffcb005d548 <col:54> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ffcb005d338 <col:54> 'double' lvalue ParmVar 0x7ffcb005cb90 'x' 'double'
| | |-CXXCtorInitializer Field 0x7ffcb005d090 '_y' 'double'
| | | `-InitListExpr 0x7ffcb0058648 <col:60, col:62> 'double'
| | |   `-ImplicitCastExpr 0x7ffcb0058688 <col:61> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ffcb005d5c0 <col:61> 'double' lvalue ParmVar 0x7ffcb005cc08 'y' 'double'
| | `-CompoundStmt 0x7ffcb00586f8 <col:64, col:65>
| |-CXXDestructorDecl 0x7ffcb005ce38 <line:21:5, col:28> col:5 used ~P2 'void (void) noexcept' default
| | |-CompoundStmt 0x7ffcb0059638 <col:28>
| | `-OverrideAttr 0x7ffcb005ced8 <col:11>
| |-CXXMethodDecl 0x7ffcb005cf70 <line:23:5, col:44> col:12 used y 'double (void) const'
| | |-CompoundStmt 0x7ffcb0058790 <col:31, col:44>
| | | `-ReturnStmt 0x7ffcb0058778 <col:33, col:40>
| | |   `-ImplicitCastExpr 0x7ffcb0058760 <col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7ffcb0058728 <col:40> 'const double' lvalue ->_y 0x7ffcb005d090
| | |       `-CXXThisExpr 0x7ffcb0058710 <col:40> 'const class P2 *' this
| | `-OverrideAttr 0x7ffcb005d008 <col:22>
| |-AccessSpecDecl 0x7ffcb005d050 <line:25:1, col:10> col:1 protected
| |-FieldDecl 0x7ffcb005d090 <line:26:5, col:12> col:12 referenced _y 'double'
| |-CXXMethodDecl 0x7ffcb005d178 <line:17:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7ffcb005d178
| | `-ParmVarDecl 0x7ffcb005d290 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7ffcb00592f8 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7ffcb00592f8
|   `-ParmVarDecl 0x7ffcb0059420 <col:7> col:7 'const class P2 &'
|-CXXRecordDecl 0x7ffcb00587b0 <line:29:1, line:39:1> line:29:7 referenced class P3 definition
| |-public 'class P2'
| |-CXXRecordDecl 0x7ffcb0058918 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7ffcb00589b0 <line:30:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7ffcb0058c10 <line:31:5, col:84> col:14 used P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7ffcb00589f0 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7ffcb00591e8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ffcb0058a68 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7ffcb0059208 <col:44> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ffcb0058ae0 <col:49, col:60> col:56 used z 'double' cinit
| | | `-FloatingLiteral 0x7ffcb0059228 <col:60> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7ffcb00594b8 <col:67, col:74> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7ffcb0059488 <col:70> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7ffcb0059248 <col:70> 'double' lvalue ParmVar 0x7ffcb00589f0 'x' 'double'
| | |   `-ImplicitCastExpr 0x7ffcb00594a0 <col:73> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ffcb0059270 <col:73> 'double' lvalue ParmVar 0x7ffcb0058a68 'y' 'double'
| | |-CXXCtorInitializer Field 0x7ffcb0058f80 '_z' 'double'
| | | `-InitListExpr 0x7ffcb0059590 <col:79, col:81> 'double'
| | |   `-ImplicitCastExpr 0x7ffcb00595d0 <col:80> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ffcb0059520 <col:80> 'double' lvalue ParmVar 0x7ffcb0058ae0 'z' 'double'
| | `-CompoundStmt 0x7ffcb0059650 <col:83, col:84>
| |-CXXDestructorDecl 0x7ffcb0058d20 <line:33:5, col:28> col:5 used ~P3 'void (void) noexcept' default
| | |-CompoundStmt 0x7ffcb0059b70 <col:28>
| | `-OverrideAttr 0x7ffcb0058dc0 <col:11>
| |-CXXMethodDecl 0x7ffcb0058e60 <line:35:5, col:44> col:12 used z 'double (void) const'
| | |-CompoundStmt 0x7ffcb00596e8 <col:31, col:44>
| | | `-ReturnStmt 0x7ffcb00596d0 <col:33, col:40>
| | |   `-ImplicitCastExpr 0x7ffcb00596b8 <col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7ffcb0059680 <col:40> 'const double' lvalue ->_z 0x7ffcb0058f80
| | |       `-CXXThisExpr 0x7ffcb0059668 <col:40> 'const class P3 *' this
| | `-OverrideAttr 0x7ffcb0058ef8 <col:22>
| |-AccessSpecDecl 0x7ffcb0058f40 <line:37:1, col:10> col:1 protected
| |-FieldDecl 0x7ffcb0058f80 <line:38:5, col:12> col:12 referenced _z 'double'
| |-CXXMethodDecl 0x7ffcb0059068 <line:29:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7ffcb0059068
| | `-ParmVarDecl 0x7ffcb0059180 <col:7> col:7 'const class P3 &'
| `-CXXConstructorDecl 0x7ffcb0059990 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7ffcb0059990
|   `-ParmVarDecl 0x7ffcb0059ac0 <col:7> col:7 'const class P3 &'
`-FunctionDecl 0x7ffcb0059768 <line:41:1, line:48:1> line:41:5 main 'int (void)'
  `-CompoundStmt 0x7ffcb005a118 <line:42:1, line:48:1>
    |-DeclStmt 0x7ffcb0059b88 <line:43:5, col:25>
    | `-VarDecl 0x7ffcb0059878 <col:5, col:24> col:8 used p3 'class P3' listinit
    |   `-CXXConstructExpr 0x7ffcb0059b28 <col:8, col:24> 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 0x7ffcb00598d8 <col:11> 'double' 1.000000e+00
    |     |-FloatingLiteral 0x7ffcb00598f8 <col:16> 'double' 2.000000e+00
    |     `-FloatingLiteral 0x7ffcb0059918 <col:21> 'double' 3.000000e+00
    |-DeclStmt 0x7ffcb0059da0 <line:44:5, col:20>
    | `-VarDecl 0x7ffcb0059bd0 <col:5, col:19> col:10 x 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ffcb0059c90 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ffcb0059c58 <col:14, col:17> '<bound member function type>' .x 0x7ffcb004b218
    |       `-ImplicitCastExpr 0x7ffcb0059cb8 <col:14> 'const class P1' lvalue <UncheckedDerivedToBase (P2 -> P1)>
    |         `-DeclRefExpr 0x7ffcb0059c30 <col:14> 'class P3' lvalue Var 0x7ffcb0059878 'p3' 'class P3'
    |-DeclStmt 0x7ffcb0059f38 <line:45:5, col:20>
    | `-VarDecl 0x7ffcb0059dc8 <col:5, col:19> col:10 y 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ffcb0059e88 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ffcb0059e50 <col:14, col:17> '<bound member function type>' .y 0x7ffcb005cf70
    |       `-ImplicitCastExpr 0x7ffcb0059eb0 <col:14> 'const class P2' lvalue <UncheckedDerivedToBase (P2)>
    |         `-DeclRefExpr 0x7ffcb0059e28 <col:14> 'class P3' lvalue Var 0x7ffcb0059878 'p3' 'class P3'
    |-DeclStmt 0x7ffcb005a0c8 <line:46:5, col:20>
    | `-VarDecl 0x7ffcb0059f60 <col:5, col:19> col:10 z 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ffcb005a020 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ffcb0059fe8 <col:14, col:17> '<bound member function type>' .z 0x7ffcb0058e60
    |       `-ImplicitCastExpr 0x7ffcb005a048 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7ffcb0059fc0 <col:14> 'class P3' lvalue Var 0x7ffcb0059878 'p3' 'class P3'
    `-ReturnStmt 0x7ffcb005a100 <line:47:5, col:12>
      `-IntegerLiteral 0x7ffcb005a0e0 <col:12> 'int' 0

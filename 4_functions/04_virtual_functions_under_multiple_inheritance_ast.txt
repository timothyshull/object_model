TranslationUnitDecl 0x7fb6f90326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb6f9032c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb6f9032940 '__int128'
|-TypedefDecl 0x7fb6f9032cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb6f9032960 'unsigned __int128'
|-TypedefDecl 0x7fb6f9033018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb6f9032dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fb6f9032d28 '__NSConstantString_tag'
|-TypedefDecl 0x7fb6f90330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb6f9033070 'char *'
|   `-BuiltinType 0x7fb6f9032760 'char'
|-TypedefDecl 0x7fb6f9066200 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb6f9033390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb6f90331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fb6f9033108 '__va_list_tag'
|-CXXRecordDecl 0x7fb6f9066258 <object_model_refined/4_functions/04_virtual_functions_under_multiple_inheritance.cpp:1:1, line:16:1> line:1:7 referenced class P1 definition
| |-CXXRecordDecl 0x7fb6f9066378 <col:1, col:7> col:7 implicit referenced class P1
| |-AccessSpecDecl 0x7fb6f9066410 <line:2:1, col:7> col:1 public
| |-CXXDestructorDecl 0x7fb6f90664f0 <line:3:5, col:27> col:13 used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7fb6f9095110 <col:27>
| |-CXXMethodDecl 0x7fb6f9066618 <line:5:5, col:32> col:20 x 'double (void) const' virtual pure
| |-CXXMethodDecl 0x7fb6f9066790 <line:7:5, line:10:5> line:7:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7fb6f90666c8 <col:21, col:28> col:28 used v 'double'
| | `-CompoundStmt 0x7fb6f9091788 <line:8:5, line:10:5>
| |   `-CompoundAssignOperator 0x7fb6f9091750 <line:9:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fb6f90916d8 <col:9> 'double' lvalue ->_x 0x7fb6f90669e0
| |     | `-CXXThisExpr 0x7fb6f90916c0 <col:9> 'class P1 *' this
| |     `-ImplicitCastExpr 0x7fb6f9091738 <col:15> 'double' <LValueToRValue>
| |       `-DeclRefExpr 0x7fb6f9091710 <col:15> 'double' lvalue ParmVar 0x7fb6f90666c8 'v' 'double'
| |-AccessSpecDecl 0x7fb6f9066830 <line:12:1, col:10> col:1 protected
| |-CXXConstructorDecl 0x7fb6f9066918 <line:13:5, col:42> col:14 used P1 'void (double)'
| | |-ParmVarDecl 0x7fb6f9066870 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7fb6f9091668 <col:28> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7fb6f90669e0 '_x' 'double'
| | | `-InitListExpr 0x7fb6f9091818 <col:37, col:39> 'double'
| | |   `-ImplicitCastExpr 0x7fb6f9091858 <col:38> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6f90917a8 <col:38> 'double' lvalue ParmVar 0x7fb6f9066870 'x' 'double'
| | `-CompoundStmt 0x7fb6f90918a8 <col:41, col:42>
| |-FieldDecl 0x7fb6f90669e0 <line:15:5, col:12> col:12 referenced _x 'double'
| |-CXXMethodDecl 0x7fb6f9066ac8 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7fb6f9066ac8
| | `-ParmVarDecl 0x7fb6f9066be0 <col:7> col:7 'const class P1 &'
| `-CXXConstructorDecl 0x7fb6f9094ed0 <col:7> col:7 implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7fb6f9094ed0
|   `-ParmVarDecl 0x7fb6f9095000 <col:7> col:7 'const class P1 &'
|-FunctionDecl 0x7fb6f9066c88 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fb6f9066d68 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fb6f9066d20 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb6f9066dd0 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fb6f9066eb0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fb6f9066e68 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb6f9066f98 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fb6f9067078 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fb6f9067030 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fb6f90670e0 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7fb6f9091600 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fb6f9067178 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7fb6f90918c0 <line:18:1, line:33:1> line:18:7 referenced class P2 definition
| |-CXXRecordDecl 0x7fb6f90919e8 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7fb6f9091a80 <line:19:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fb6f9091c60 <line:20:5, col:58> col:14 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7fb6f9091ac0 <col:17, col:28> col:24 x 'double' cinit
| | | `-FloatingLiteral 0x7fb6f90922d8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7fb6f9091b38 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7fb6f90922f8 <col:44> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7fb6f9092078 '_y' 'double'
| | | `-ImplicitCastExpr 0x7fb6f9092370 <col:54> 'double' <LValueToRValue>
| | |   `-DeclRefExpr 0x7fb6f9092318 <col:54> 'double' lvalue ParmVar 0x7fb6f9091b38 'y' 'double'
| | `-CompoundStmt 0x7fb6f90923b8 <col:57, col:58>
| |-CXXDestructorDecl 0x7fb6f9091d68 <line:22:5, col:27> col:13 used ~P2 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7fb6f9095128 <col:27>
| |-CXXMethodDecl 0x7fb6f9091e60 <line:24:5, col:32> col:20 y 'double (void) const' virtual pure
| |-CXXMethodDecl 0x7fb6f9091f98 <line:26:5, line:29:5> line:26:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7fb6f9091f10 <col:21, col:28> col:28 used v 'double'
| | `-CompoundStmt 0x7fb6f9092498 <line:27:5, line:29:5>
| |   `-CompoundAssignOperator 0x7fb6f9092460 <line:28:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7fb6f90923e8 <col:9> 'double' lvalue ->_y 0x7fb6f9092078
| |     | `-CXXThisExpr 0x7fb6f90923d0 <col:9> 'class P2 *' this
| |     `-ImplicitCastExpr 0x7fb6f9092448 <col:15> 'double' <LValueToRValue>
| |       `-DeclRefExpr 0x7fb6f9092420 <col:15> 'double' lvalue ParmVar 0x7fb6f9091f10 'v' 'double'
| |-AccessSpecDecl 0x7fb6f9092038 <line:31:1, col:10> col:1 protected
| |-FieldDecl 0x7fb6f9092078 <line:32:5, col:12> col:12 referenced _y 'double'
| |-CXXMethodDecl 0x7fb6f9092158 <line:18:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7fb6f9092158
| | `-ParmVarDecl 0x7fb6f9092270 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7fb6f9093f88 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7fb6f9093f88
|   `-ParmVarDecl 0x7fb6f90940b0 <col:7> col:7 'const class P2 &'
|-CXXRecordDecl 0x7fb6f90924b8 <line:35:1, line:63:1> line:35:7 referenced class P3 definition
| |-public 'class P1'
| |-public 'class P2'
| |-CXXRecordDecl 0x7fb6f9093258 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7fb6f90932f0 <line:36:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7fb6f9093550 <line:37:5, col:84> col:14 used P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7fb6f9093330 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7fb6f9093e78 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7fb6f90933a8 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7fb6f9093e98 <col:44> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7fb6f9093420 <col:49, col:60> col:56 used z 'double' cinit
| | | `-FloatingLiteral 0x7fb6f9093eb8 <col:60> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 0x7fb6f9095088 <col:14> 'class P1' 'void (double)'
| | |   `-CXXDefaultArgExpr 0x7fb6f9095068 <<invalid sloc>> 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7fb6f9094148 <col:67, col:74> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7fb6f9094118 <col:70> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7fb6f9093ed8 <col:70> 'double' lvalue ParmVar 0x7fb6f9093330 'x' 'double'
| | |   `-ImplicitCastExpr 0x7fb6f9094130 <col:73> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6f9093f00 <col:73> 'double' lvalue ParmVar 0x7fb6f90933a8 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fb6f9093c10 '_z' 'double'
| | | `-InitListExpr 0x7fb6f9094e48 <col:79, col:81> 'double'
| | |   `-ImplicitCastExpr 0x7fb6f9094e88 <col:80> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6f90941b0 <col:80> 'double' lvalue ParmVar 0x7fb6f9093420 'z' 'double'
| | `-CompoundStmt 0x7fb6f9095140 <col:83, col:84>
| |-CXXDestructorDecl 0x7fb6f9093660 <line:39:5, col:28> col:5 used ~P3 'void (void) noexcept' default
| | |-CompoundStmt 0x7fb6f90958c0 <col:28>
| | `-OverrideAttr 0x7fb6f9093700 <col:11>
| |-CXXMethodDecl 0x7fb6f90937a0 <line:41:5, line:44:5> line:41:20 used x 'double (void) const' virtual
| | |-CompoundStmt 0x7fb6f90951f8 <line:42:5, line:44:5>
| | | `-ReturnStmt 0x7fb6f90951e0 <line:43:9, col:16>
| | |   `-ImplicitCastExpr 0x7fb6f90951c8 <col:16> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7fb6f9095190 <col:16> 'const double' lvalue ->_x 0x7fb6f90669e0
| | |       `-ImplicitCastExpr 0x7fb6f9095170 <col:16> 'class P1 *' <UncheckedDerivedToBase (P1)>
| | |         `-CXXThisExpr 0x7fb6f9095158 <col:16> 'const class P3 *' this
| | `-OverrideAttr 0x7fb6f9093838 <line:41:30>
| |-CXXMethodDecl 0x7fb6f90938a8 <line:46:5, line:49:5> line:46:20 used y 'double (void) const' virtual
| | |-CompoundStmt 0x7fb6f90952b8 <line:47:5, line:49:5>
| | | `-ReturnStmt 0x7fb6f90952a0 <line:48:9, col:16>
| | |   `-ImplicitCastExpr 0x7fb6f9095288 <col:16> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7fb6f9095250 <col:16> 'const double' lvalue ->_y 0x7fb6f9092078
| | |       `-ImplicitCastExpr 0x7fb6f9095230 <col:16> 'class P2 *' <UncheckedDerivedToBase (P2)>
| | |         `-CXXThisExpr 0x7fb6f9095218 <col:16> 'const class P3 *' this
| | `-OverrideAttr 0x7fb6f9093940 <line:46:30>
| |-CXXMethodDecl 0x7fb6f90939b0 <line:51:5, line:54:5> line:51:12 used z 'double (void) const'
| | `-CompoundStmt 0x7fb6f9095358 <line:52:5, line:54:5>
| |   `-ReturnStmt 0x7fb6f9095340 <line:53:9, col:16>
| |     `-ImplicitCastExpr 0x7fb6f9095328 <col:16> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7fb6f90952f0 <col:16> 'const double' lvalue ->_z 0x7fb6f9093c10
| |         `-CXXThisExpr 0x7fb6f90952d8 <col:16> 'const class P3 *' this
| |-CXXMethodDecl 0x7fb6f9093ae8 <line:56:5, line:59:5> line:56:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7fb6f9093a60 <col:21, col:28> col:28 used v 'double'
| | |-CompoundStmt 0x7fb6f9095440 <line:57:5, line:59:5>
| | | `-CompoundAssignOperator 0x7fb6f9095408 <line:58:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| | |   |-MemberExpr 0x7fb6f9095390 <col:9> 'double' lvalue ->_z 0x7fb6f9093c10
| | |   | `-CXXThisExpr 0x7fb6f9095378 <col:9> 'class P3 *' this
| | |   `-ImplicitCastExpr 0x7fb6f90953f0 <col:15> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fb6f90953c8 <col:15> 'double' lvalue ParmVar 0x7fb6f9093a60 'v' 'double'
| | `-OverrideAttr 0x7fb6f9093b88 <line:56:31>
| |-AccessSpecDecl 0x7fb6f9093bd0 <line:61:1, col:10> col:1 protected
| |-FieldDecl 0x7fb6f9093c10 <line:62:5, col:12> col:12 referenced _z 'double'
| |-CXXMethodDecl 0x7fb6f9093cf8 <line:35:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7fb6f9093cf8
| | `-ParmVarDecl 0x7fb6f9093e10 <col:7> col:7 'const class P3 &'
| `-CXXConstructorDecl 0x7fb6f90956e0 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7fb6f90956e0
|   `-ParmVarDecl 0x7fb6f9095810 <col:7> col:7 'const class P3 &'
`-FunctionDecl 0x7fb6f90954b8 <line:65:1, line:72:1> line:65:5 main 'int (void)'
  `-CompoundStmt 0x7fb6f9096478 <line:66:1, line:72:1>
    |-DeclStmt 0x7fb6f90958d8 <line:67:5, col:25>
    | `-VarDecl 0x7fb6f90955c8 <col:5, col:24> col:8 used p3 'class P3' listinit
    |   `-CXXConstructExpr 0x7fb6f9095878 <col:8, col:24> 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 0x7fb6f9095628 <col:11> 'double' 1.000000e+00
    |     |-FloatingLiteral 0x7fb6f9095648 <col:16> 'double' 2.000000e+00
    |     `-FloatingLiteral 0x7fb6f9095668 <col:21> 'double' 3.000000e+00
    |-DeclStmt 0x7fb6f9095ae0 <line:68:5, col:20>
    | `-VarDecl 0x7fb6f9095920 <col:5, col:19> col:10 x 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7fb6f90959e0 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7fb6f90959a8 <col:14, col:17> '<bound member function type>' .x 0x7fb6f90937a0
    |       `-ImplicitCastExpr 0x7fb6f9095a08 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7fb6f9095980 <col:14> 'class P3' lvalue Var 0x7fb6f90955c8 'p3' 'class P3'
    |-DeclStmt 0x7fb6f9095c78 <line:69:5, col:20>
    | `-VarDecl 0x7fb6f9095b08 <col:5, col:19> col:10 y 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7fb6f9095bc8 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7fb6f9095b90 <col:14, col:17> '<bound member function type>' .y 0x7fb6f90938a8
    |       `-ImplicitCastExpr 0x7fb6f9095bf0 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7fb6f9095b68 <col:14> 'class P3' lvalue Var 0x7fb6f90955c8 'p3' 'class P3'
    |-DeclStmt 0x7fb6f9096428 <line:70:5, col:20>
    | `-VarDecl 0x7fb6f9095ca0 <col:5, col:19> col:10 z 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7fb6f9095d60 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7fb6f9095d28 <col:14, col:17> '<bound member function type>' .z 0x7fb6f90939b0
    |       `-ImplicitCastExpr 0x7fb6f9095d88 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7fb6f9095d00 <col:14> 'class P3' lvalue Var 0x7fb6f90955c8 'p3' 'class P3'
    `-ReturnStmt 0x7fb6f9096460 <line:71:5, col:12>
      `-IntegerLiteral 0x7fb6f9096440 <col:12> 'int' 0

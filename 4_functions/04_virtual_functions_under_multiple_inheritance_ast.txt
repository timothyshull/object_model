TranslationUnitDecl 0x7ff4d9018cd0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff4d9019260 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff4d9018f40 '__int128'
|-TypedefDecl 0x7ff4d90192d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff4d9018f60 'unsigned __int128'
|-TypedefDecl 0x7ff4d9019618 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff4d90193c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7ff4d9019328 '__NSConstantString_tag'
|-TypedefDecl 0x7ff4d90196b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff4d9019670 'char *'
|   `-BuiltinType 0x7ff4d9018d60 'char'
|-TypedefDecl 0x7ff4d904c800 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff4d9019990 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff4d90197a0 'struct __va_list_tag'
|     `-CXXRecord 0x7ff4d9019708 '__va_list_tag'
|-CXXRecordDecl 0x7ff4d904c858 </Users/tskull/Documents/Programming/Cpp/object_model_refined/4_functions/04_virtual_functions_under_multiple_inheritance.cpp:1:1, line:16:1> line:1:7 referenced class P1 definition
| |-CXXRecordDecl 0x7ff4d904c978 <col:1, col:7> col:7 implicit referenced class P1
| |-AccessSpecDecl 0x7ff4d904ca10 <line:2:1, col:7> col:1 public
| |-CXXDestructorDecl 0x7ff4d904caf0 <line:3:5, col:27> col:13 used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7ff4d907b710 <col:27>
| |-CXXMethodDecl 0x7ff4d904cc18 <line:5:5, col:32> col:20 x 'double (void) const' virtual pure
| |-CXXMethodDecl 0x7ff4d904cd90 <line:7:5, line:10:5> line:7:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7ff4d904ccc8 <col:21, col:28> col:28 used v 'double'
| | `-CompoundStmt 0x7ff4d9077d88 <line:8:5, line:10:5>
| |   `-CompoundAssignOperator 0x7ff4d9077d50 <line:9:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7ff4d9077cd8 <col:9> 'double' lvalue ->_x 0x7ff4d904cfe0
| |     | `-CXXThisExpr 0x7ff4d9077cc0 <col:9> 'class P1 *' this
| |     `-ImplicitCastExpr 0x7ff4d9077d38 <col:15> 'double' <LValueToRValue>
| |       `-DeclRefExpr 0x7ff4d9077d10 <col:15> 'double' lvalue ParmVar 0x7ff4d904ccc8 'v' 'double'
| |-AccessSpecDecl 0x7ff4d904ce30 <line:12:1, col:10> col:1 protected
| |-CXXConstructorDecl 0x7ff4d904cf18 <line:13:5, col:42> col:14 used P1 'void (double)'
| | |-ParmVarDecl 0x7ff4d904ce70 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7ff4d9077c68 <col:28> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7ff4d904cfe0 '_x' 'double'
| | | `-InitListExpr 0x7ff4d9077e18 <col:37, col:39> 'double'
| | |   `-ImplicitCastExpr 0x7ff4d9077e58 <col:38> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff4d9077da8 <col:38> 'double' lvalue ParmVar 0x7ff4d904ce70 'x' 'double'
| | `-CompoundStmt 0x7ff4d9077ea8 <col:41, col:42>
| |-FieldDecl 0x7ff4d904cfe0 <line:15:5, col:12> col:12 referenced _x 'double'
| |-CXXMethodDecl 0x7ff4d904d0c8 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7ff4d904d0c8
| | `-ParmVarDecl 0x7ff4d904d1e0 <col:7> col:7 'const class P1 &'
| `-CXXConstructorDecl 0x7ff4d907b4d0 <col:7> col:7 implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7ff4d907b4d0
|   `-ParmVarDecl 0x7ff4d907b600 <col:7> col:7 'const class P1 &'
|-FunctionDecl 0x7ff4d904d288 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7ff4d904d368 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7ff4d904d320 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ff4d904d3d0 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7ff4d904d4b0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7ff4d904d468 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ff4d904d598 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7ff4d904d678 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7ff4d904d630 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ff4d904d6e0 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7ff4d9077c00 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7ff4d904d778 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7ff4d9077ec0 <line:18:1, line:33:1> line:18:7 referenced class P2 definition
| |-CXXRecordDecl 0x7ff4d9077fe8 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7ff4d9078080 <line:19:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7ff4d9078260 <line:20:5, col:58> col:14 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7ff4d90780c0 <col:17, col:28> col:24 x 'double' cinit
| | | `-FloatingLiteral 0x7ff4d90788d8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ff4d9078138 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7ff4d90788f8 <col:44> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7ff4d9078678 '_y' 'double'
| | | `-ImplicitCastExpr 0x7ff4d9078970 <col:54> 'double' <LValueToRValue>
| | |   `-DeclRefExpr 0x7ff4d9078918 <col:54> 'double' lvalue ParmVar 0x7ff4d9078138 'y' 'double'
| | `-CompoundStmt 0x7ff4d90789b8 <col:57, col:58>
| |-CXXDestructorDecl 0x7ff4d9078368 <line:22:5, col:27> col:13 used ~P2 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7ff4d907b728 <col:27>
| |-CXXMethodDecl 0x7ff4d9078460 <line:24:5, col:32> col:20 y 'double (void) const' virtual pure
| |-CXXMethodDecl 0x7ff4d9078598 <line:26:5, line:29:5> line:26:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7ff4d9078510 <col:21, col:28> col:28 used v 'double'
| | `-CompoundStmt 0x7ff4d9078a98 <line:27:5, line:29:5>
| |   `-CompoundAssignOperator 0x7ff4d9078a60 <line:28:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7ff4d90789e8 <col:9> 'double' lvalue ->_y 0x7ff4d9078678
| |     | `-CXXThisExpr 0x7ff4d90789d0 <col:9> 'class P2 *' this
| |     `-ImplicitCastExpr 0x7ff4d9078a48 <col:15> 'double' <LValueToRValue>
| |       `-DeclRefExpr 0x7ff4d9078a20 <col:15> 'double' lvalue ParmVar 0x7ff4d9078510 'v' 'double'
| |-AccessSpecDecl 0x7ff4d9078638 <line:31:1, col:10> col:1 protected
| |-FieldDecl 0x7ff4d9078678 <line:32:5, col:12> col:12 referenced _y 'double'
| |-CXXMethodDecl 0x7ff4d9078758 <line:18:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7ff4d9078758
| | `-ParmVarDecl 0x7ff4d9078870 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7ff4d907a588 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7ff4d907a588
|   `-ParmVarDecl 0x7ff4d907a6b0 <col:7> col:7 'const class P2 &'
|-CXXRecordDecl 0x7ff4d9078ab8 <line:35:1, line:63:1> line:35:7 referenced class P3 definition
| |-public 'class P1'
| |-public 'class P2'
| |-CXXRecordDecl 0x7ff4d9079858 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7ff4d90798f0 <line:36:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7ff4d9079b50 <line:37:5, col:84> col:14 used P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7ff4d9079930 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7ff4d907a478 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ff4d90799a8 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7ff4d907a498 <col:44> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ff4d9079a20 <col:49, col:60> col:56 used z 'double' cinit
| | | `-FloatingLiteral 0x7ff4d907a4b8 <col:60> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 0x7ff4d907b688 <col:14> 'class P1' 'void (double)'
| | |   `-CXXDefaultArgExpr 0x7ff4d907b668 <<invalid sloc>> 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7ff4d907a748 <col:67, col:74> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7ff4d907a718 <col:70> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7ff4d907a4d8 <col:70> 'double' lvalue ParmVar 0x7ff4d9079930 'x' 'double'
| | |   `-ImplicitCastExpr 0x7ff4d907a730 <col:73> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff4d907a500 <col:73> 'double' lvalue ParmVar 0x7ff4d90799a8 'y' 'double'
| | |-CXXCtorInitializer Field 0x7ff4d907a210 '_z' 'double'
| | | `-InitListExpr 0x7ff4d907b448 <col:79, col:81> 'double'
| | |   `-ImplicitCastExpr 0x7ff4d907b488 <col:80> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff4d907a7b0 <col:80> 'double' lvalue ParmVar 0x7ff4d9079a20 'z' 'double'
| | `-CompoundStmt 0x7ff4d907b740 <col:83, col:84>
| |-CXXDestructorDecl 0x7ff4d9079c60 <line:39:5, col:28> col:5 used ~P3 'void (void) noexcept' default
| | |-CompoundStmt 0x7ff4d907bec0 <col:28>
| | `-OverrideAttr 0x7ff4d9079d00 <col:11>
| |-CXXMethodDecl 0x7ff4d9079da0 <line:41:5, line:44:5> line:41:20 used x 'double (void) const' virtual
| | |-CompoundStmt 0x7ff4d907b7f8 <line:42:5, line:44:5>
| | | `-ReturnStmt 0x7ff4d907b7e0 <line:43:9, col:16>
| | |   `-ImplicitCastExpr 0x7ff4d907b7c8 <col:16> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7ff4d907b790 <col:16> 'const double' lvalue ->_x 0x7ff4d904cfe0
| | |       `-ImplicitCastExpr 0x7ff4d907b770 <col:16> 'class P1 *' <UncheckedDerivedToBase (P1)>
| | |         `-CXXThisExpr 0x7ff4d907b758 <col:16> 'const class P3 *' this
| | `-OverrideAttr 0x7ff4d9079e38 <line:41:30>
| |-CXXMethodDecl 0x7ff4d9079ea8 <line:46:5, line:49:5> line:46:20 used y 'double (void) const' virtual
| | |-CompoundStmt 0x7ff4d907b8b8 <line:47:5, line:49:5>
| | | `-ReturnStmt 0x7ff4d907b8a0 <line:48:9, col:16>
| | |   `-ImplicitCastExpr 0x7ff4d907b888 <col:16> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7ff4d907b850 <col:16> 'const double' lvalue ->_y 0x7ff4d9078678
| | |       `-ImplicitCastExpr 0x7ff4d907b830 <col:16> 'class P2 *' <UncheckedDerivedToBase (P2)>
| | |         `-CXXThisExpr 0x7ff4d907b818 <col:16> 'const class P3 *' this
| | `-OverrideAttr 0x7ff4d9079f40 <line:46:30>
| |-CXXMethodDecl 0x7ff4d9079fb0 <line:51:5, line:54:5> line:51:12 used z 'double (void) const'
| | `-CompoundStmt 0x7ff4d907b958 <line:52:5, line:54:5>
| |   `-ReturnStmt 0x7ff4d907b940 <line:53:9, col:16>
| |     `-ImplicitCastExpr 0x7ff4d907b928 <col:16> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7ff4d907b8f0 <col:16> 'const double' lvalue ->_z 0x7ff4d907a210
| |         `-CXXThisExpr 0x7ff4d907b8d8 <col:16> 'const class P3 *' this
| |-CXXMethodDecl 0x7ff4d907a0e8 <line:56:5, line:59:5> line:56:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7ff4d907a060 <col:21, col:28> col:28 used v 'double'
| | |-CompoundStmt 0x7ff4d907ba40 <line:57:5, line:59:5>
| | | `-CompoundAssignOperator 0x7ff4d907ba08 <line:58:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| | |   |-MemberExpr 0x7ff4d907b990 <col:9> 'double' lvalue ->_z 0x7ff4d907a210
| | |   | `-CXXThisExpr 0x7ff4d907b978 <col:9> 'class P3 *' this
| | |   `-ImplicitCastExpr 0x7ff4d907b9f0 <col:15> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff4d907b9c8 <col:15> 'double' lvalue ParmVar 0x7ff4d907a060 'v' 'double'
| | `-OverrideAttr 0x7ff4d907a188 <line:56:31>
| |-AccessSpecDecl 0x7ff4d907a1d0 <line:61:1, col:10> col:1 protected
| |-FieldDecl 0x7ff4d907a210 <line:62:5, col:12> col:12 referenced _z 'double'
| |-CXXMethodDecl 0x7ff4d907a2f8 <line:35:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7ff4d907a2f8
| | `-ParmVarDecl 0x7ff4d907a410 <col:7> col:7 'const class P3 &'
| `-CXXConstructorDecl 0x7ff4d907bce0 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7ff4d907bce0
|   `-ParmVarDecl 0x7ff4d907be10 <col:7> col:7 'const class P3 &'
`-FunctionDecl 0x7ff4d907bab8 <line:65:1, line:72:1> line:65:5 main 'int (void)'
  `-CompoundStmt 0x7ff4d907ca78 <line:66:1, line:72:1>
    |-DeclStmt 0x7ff4d907bed8 <line:67:5, col:25>
    | `-VarDecl 0x7ff4d907bbc8 <col:5, col:24> col:8 used p3 'class P3' listinit
    |   `-CXXConstructExpr 0x7ff4d907be78 <col:8, col:24> 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 0x7ff4d907bc28 <col:11> 'double' 1.000000e+00
    |     |-FloatingLiteral 0x7ff4d907bc48 <col:16> 'double' 2.000000e+00
    |     `-FloatingLiteral 0x7ff4d907bc68 <col:21> 'double' 3.000000e+00
    |-DeclStmt 0x7ff4d907c0e0 <line:68:5, col:20>
    | `-VarDecl 0x7ff4d907bf20 <col:5, col:19> col:10 x 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ff4d907bfe0 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ff4d907bfa8 <col:14, col:17> '<bound member function type>' .x 0x7ff4d9079da0
    |       `-ImplicitCastExpr 0x7ff4d907c008 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7ff4d907bf80 <col:14> 'class P3' lvalue Var 0x7ff4d907bbc8 'p3' 'class P3'
    |-DeclStmt 0x7ff4d907c278 <line:69:5, col:20>
    | `-VarDecl 0x7ff4d907c108 <col:5, col:19> col:10 y 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ff4d907c1c8 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ff4d907c190 <col:14, col:17> '<bound member function type>' .y 0x7ff4d9079ea8
    |       `-ImplicitCastExpr 0x7ff4d907c1f0 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7ff4d907c168 <col:14> 'class P3' lvalue Var 0x7ff4d907bbc8 'p3' 'class P3'
    |-DeclStmt 0x7ff4d907ca28 <line:70:5, col:20>
    | `-VarDecl 0x7ff4d907c2a0 <col:5, col:19> col:10 z 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ff4d907c360 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ff4d907c328 <col:14, col:17> '<bound member function type>' .z 0x7ff4d9079fb0
    |       `-ImplicitCastExpr 0x7ff4d907c388 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7ff4d907c300 <col:14> 'class P3' lvalue Var 0x7ff4d907bbc8 'p3' 'class P3'
    `-ReturnStmt 0x7ff4d907ca60 <line:71:5, col:12>
      `-IntegerLiteral 0x7ff4d907ca40 <col:12> 'int' 0

TranslationUnitDecl 0x7ff8a70326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff8a7032c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff8a7032940 '__int128'
|-TypedefDecl 0x7ff8a7032cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff8a7032960 'unsigned __int128'
|-TypedefDecl 0x7ff8a7033018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff8a7032dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7ff8a7032d28 '__NSConstantString_tag'
|-TypedefDecl 0x7ff8a70330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff8a7033070 'char *'
|   `-BuiltinType 0x7ff8a7032760 'char'
|-TypedefDecl 0x7ff8a7066200 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff8a7033390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff8a70331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7ff8a7033108 '__va_list_tag'
|-CXXRecordDecl 0x7ff8a7066258 <object_model/4_functions/04_virtual_functions_under_multiple_inheritance.cpp:1:1, line:16:1> line:1:7 referenced class P1 definition
| |-CXXRecordDecl 0x7ff8a7066378 <col:1, col:7> col:7 implicit referenced class P1
| |-AccessSpecDecl 0x7ff8a7066410 <line:2:1, col:7> col:1 public
| |-CXXDestructorDecl 0x7ff8a70664f0 <line:3:5, col:27> col:13 used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7ff8a7802710 <col:27>
| |-CXXMethodDecl 0x7ff8a7066618 <line:5:5, col:32> col:20 x 'double (void) const' virtual pure
| |-CXXMethodDecl 0x7ff8a7066790 <line:7:5, line:10:5> line:7:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7ff8a70666c8 <col:21, col:28> col:28 used v 'double'
| | `-CompoundStmt 0x7ff8a7091788 <line:8:5, line:10:5>
| |   `-CompoundAssignOperator 0x7ff8a7091750 <line:9:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7ff8a70916d8 <col:9> 'double' lvalue ->_x 0x7ff8a70669e0
| |     | `-CXXThisExpr 0x7ff8a70916c0 <col:9> 'class P1 *' this
| |     `-ImplicitCastExpr 0x7ff8a7091738 <col:15> 'double' <LValueToRValue>
| |       `-DeclRefExpr 0x7ff8a7091710 <col:15> 'double' lvalue ParmVar 0x7ff8a70666c8 'v' 'double'
| |-AccessSpecDecl 0x7ff8a7066830 <line:12:1, col:10> col:1 protected
| |-CXXConstructorDecl 0x7ff8a7066918 <line:13:5, col:42> col:14 used P1 'void (double)'
| | |-ParmVarDecl 0x7ff8a7066870 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7ff8a7091668 <col:28> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7ff8a70669e0 '_x' 'double'
| | | `-InitListExpr 0x7ff8a7091818 <col:37, col:39> 'double'
| | |   `-ImplicitCastExpr 0x7ff8a7091858 <col:38> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff8a70917a8 <col:38> 'double' lvalue ParmVar 0x7ff8a7066870 'x' 'double'
| | `-CompoundStmt 0x7ff8a70918a8 <col:41, col:42>
| |-FieldDecl 0x7ff8a70669e0 <line:15:5, col:12> col:12 referenced _x 'double'
| |-CXXMethodDecl 0x7ff8a7066ac8 <line:1:7, <invalid sloc>> col:7 implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7ff8a7066ac8
| | `-ParmVarDecl 0x7ff8a7066be0 <col:7> col:7 'const class P1 &'
| `-CXXConstructorDecl 0x7ff8a78024d0 <col:7> col:7 implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7ff8a78024d0
|   `-ParmVarDecl 0x7ff8a7802600 <col:7> col:7 'const class P1 &'
|-FunctionDecl 0x7ff8a7066c88 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7ff8a7066d68 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7ff8a7066d20 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ff8a7066dd0 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7ff8a7066eb0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7ff8a7066e68 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ff8a7066f98 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7ff8a7067078 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7ff8a7067030 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7ff8a70670e0 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7ff8a7091600 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7ff8a7067178 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7ff8a70918c0 <line:18:1, line:33:1> line:18:7 referenced class P2 definition
| |-CXXRecordDecl 0x7ff8a70919e8 <col:1, col:7> col:7 implicit referenced class P2
| |-AccessSpecDecl 0x7ff8a7091a80 <line:19:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7ff8a7091c60 <line:20:5, col:58> col:14 used P2 'void (double, double)'
| | |-ParmVarDecl 0x7ff8a7091ac0 <col:17, col:28> col:24 x 'double' cinit
| | | `-FloatingLiteral 0x7ff8a70922d8 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ff8a7091b38 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7ff8a70922f8 <col:44> 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7ff8a7092078 '_y' 'double'
| | | `-ImplicitCastExpr 0x7ff8a7092370 <col:54> 'double' <LValueToRValue>
| | |   `-DeclRefExpr 0x7ff8a7092318 <col:54> 'double' lvalue ParmVar 0x7ff8a7091b38 'y' 'double'
| | `-CompoundStmt 0x7ff8a70923b8 <col:57, col:58>
| |-CXXDestructorDecl 0x7ff8a7091d68 <line:22:5, col:27> col:13 used ~P2 'void (void) noexcept' virtual default
| | `-CompoundStmt 0x7ff8a7802728 <col:27>
| |-CXXMethodDecl 0x7ff8a7091e60 <line:24:5, col:32> col:20 y 'double (void) const' virtual pure
| |-CXXMethodDecl 0x7ff8a7091f98 <line:26:5, line:29:5> line:26:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7ff8a7091f10 <col:21, col:28> col:28 used v 'double'
| | `-CompoundStmt 0x7ff8a7092498 <line:27:5, line:29:5>
| |   `-CompoundAssignOperator 0x7ff8a7092460 <line:28:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 0x7ff8a70923e8 <col:9> 'double' lvalue ->_y 0x7ff8a7092078
| |     | `-CXXThisExpr 0x7ff8a70923d0 <col:9> 'class P2 *' this
| |     `-ImplicitCastExpr 0x7ff8a7092448 <col:15> 'double' <LValueToRValue>
| |       `-DeclRefExpr 0x7ff8a7092420 <col:15> 'double' lvalue ParmVar 0x7ff8a7091f10 'v' 'double'
| |-AccessSpecDecl 0x7ff8a7092038 <line:31:1, col:10> col:1 protected
| |-FieldDecl 0x7ff8a7092078 <line:32:5, col:12> col:12 referenced _y 'double'
| |-CXXMethodDecl 0x7ff8a7092158 <line:18:7, <invalid sloc>> col:7 implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7ff8a7092158
| | `-ParmVarDecl 0x7ff8a7092270 <col:7> col:7 'const class P2 &'
| `-CXXConstructorDecl 0x7ff8a7801588 <col:7> col:7 implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7ff8a7801588
|   `-ParmVarDecl 0x7ff8a78016b0 <col:7> col:7 'const class P2 &'
|-CXXRecordDecl 0x7ff8a70924b8 <line:35:1, line:63:1> line:35:7 referenced class P3 definition
| |-public 'class P1'
| |-public 'class P2'
| |-CXXRecordDecl 0x7ff8a7800858 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7ff8a78008f0 <line:36:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7ff8a7800b50 <line:37:5, col:84> col:14 used P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7ff8a7800930 <col:17, col:28> col:24 used x 'double' cinit
| | | `-FloatingLiteral 0x7ff8a7801478 <col:28> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ff8a78009a8 <col:33, col:44> col:40 used y 'double' cinit
| | | `-FloatingLiteral 0x7ff8a7801498 <col:44> 'double' 0.000000e+00
| | |-ParmVarDecl 0x7ff8a7800a20 <col:49, col:60> col:56 used z 'double' cinit
| | | `-FloatingLiteral 0x7ff8a78014b8 <col:60> 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 0x7ff8a7802688 <col:14> 'class P1' 'void (double)'
| | |   `-CXXDefaultArgExpr 0x7ff8a7802668 <<invalid sloc>> 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 0x7ff8a7801748 <col:67, col:74> 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7ff8a7801718 <col:70> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7ff8a78014d8 <col:70> 'double' lvalue ParmVar 0x7ff8a7800930 'x' 'double'
| | |   `-ImplicitCastExpr 0x7ff8a7801730 <col:73> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff8a7801500 <col:73> 'double' lvalue ParmVar 0x7ff8a78009a8 'y' 'double'
| | |-CXXCtorInitializer Field 0x7ff8a7801210 '_z' 'double'
| | | `-InitListExpr 0x7ff8a7802448 <col:79, col:81> 'double'
| | |   `-ImplicitCastExpr 0x7ff8a7802488 <col:80> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff8a78017b0 <col:80> 'double' lvalue ParmVar 0x7ff8a7800a20 'z' 'double'
| | `-CompoundStmt 0x7ff8a7802740 <col:83, col:84>
| |-CXXDestructorDecl 0x7ff8a7800c60 <line:39:5, col:28> col:5 used ~P3 'void (void) noexcept' default
| | |-CompoundStmt 0x7ff8a7802ec0 <col:28>
| | `-OverrideAttr 0x7ff8a7800d00 <col:11>
| |-CXXMethodDecl 0x7ff8a7800da0 <line:41:5, line:44:5> line:41:20 used x 'double (void) const' virtual
| | |-CompoundStmt 0x7ff8a78027f8 <line:42:5, line:44:5>
| | | `-ReturnStmt 0x7ff8a78027e0 <line:43:9, col:16>
| | |   `-ImplicitCastExpr 0x7ff8a78027c8 <col:16> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7ff8a7802790 <col:16> 'const double' lvalue ->_x 0x7ff8a70669e0
| | |       `-ImplicitCastExpr 0x7ff8a7802770 <col:16> 'class P1 *' <UncheckedDerivedToBase (P1)>
| | |         `-CXXThisExpr 0x7ff8a7802758 <col:16> 'const class P3 *' this
| | `-OverrideAttr 0x7ff8a7800e38 <line:41:30>
| |-CXXMethodDecl 0x7ff8a7800ea8 <line:46:5, line:49:5> line:46:20 used y 'double (void) const' virtual
| | |-CompoundStmt 0x7ff8a78028b8 <line:47:5, line:49:5>
| | | `-ReturnStmt 0x7ff8a78028a0 <line:48:9, col:16>
| | |   `-ImplicitCastExpr 0x7ff8a7802888 <col:16> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7ff8a7802850 <col:16> 'const double' lvalue ->_y 0x7ff8a7092078
| | |       `-ImplicitCastExpr 0x7ff8a7802830 <col:16> 'class P2 *' <UncheckedDerivedToBase (P2)>
| | |         `-CXXThisExpr 0x7ff8a7802818 <col:16> 'const class P3 *' this
| | `-OverrideAttr 0x7ff8a7800f40 <line:46:30>
| |-CXXMethodDecl 0x7ff8a7800fb0 <line:51:5, line:54:5> line:51:12 used z 'double (void) const'
| | `-CompoundStmt 0x7ff8a7802958 <line:52:5, line:54:5>
| |   `-ReturnStmt 0x7ff8a7802940 <line:53:9, col:16>
| |     `-ImplicitCastExpr 0x7ff8a7802928 <col:16> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7ff8a78028f0 <col:16> 'const double' lvalue ->_z 0x7ff8a7801210
| |         `-CXXThisExpr 0x7ff8a78028d8 <col:16> 'const class P3 *' this
| |-CXXMethodDecl 0x7ff8a78010e8 <line:56:5, line:59:5> line:56:18 used m1 'void (double)' virtual
| | |-ParmVarDecl 0x7ff8a7801060 <col:21, col:28> col:28 used v 'double'
| | |-CompoundStmt 0x7ff8a7802a40 <line:57:5, line:59:5>
| | | `-CompoundAssignOperator 0x7ff8a7802a08 <line:58:9, col:15> 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| | |   |-MemberExpr 0x7ff8a7802990 <col:9> 'double' lvalue ->_z 0x7ff8a7801210
| | |   | `-CXXThisExpr 0x7ff8a7802978 <col:9> 'class P3 *' this
| | |   `-ImplicitCastExpr 0x7ff8a78029f0 <col:15> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7ff8a78029c8 <col:15> 'double' lvalue ParmVar 0x7ff8a7801060 'v' 'double'
| | `-OverrideAttr 0x7ff8a7801188 <line:56:31>
| |-AccessSpecDecl 0x7ff8a78011d0 <line:61:1, col:10> col:1 protected
| |-FieldDecl 0x7ff8a7801210 <line:62:5, col:12> col:12 referenced _z 'double'
| |-CXXMethodDecl 0x7ff8a78012f8 <line:35:7, <invalid sloc>> col:7 implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7ff8a78012f8
| | `-ParmVarDecl 0x7ff8a7801410 <col:7> col:7 'const class P3 &'
| `-CXXConstructorDecl 0x7ff8a7802ce0 <col:7> col:7 implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7ff8a7802ce0
|   `-ParmVarDecl 0x7ff8a7802e10 <col:7> col:7 'const class P3 &'
`-FunctionDecl 0x7ff8a7802ab8 <line:65:1, line:72:1> line:65:5 main 'int (void)'
  `-CompoundStmt 0x7ff8a7803a78 <line:66:1, line:72:1>
    |-DeclStmt 0x7ff8a7802ed8 <line:67:5, col:25>
    | `-VarDecl 0x7ff8a7802bc8 <col:5, col:24> col:8 used p3 'class P3' listinit
    |   `-CXXConstructExpr 0x7ff8a7802e78 <col:8, col:24> 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 0x7ff8a7802c28 <col:11> 'double' 1.000000e+00
    |     |-FloatingLiteral 0x7ff8a7802c48 <col:16> 'double' 2.000000e+00
    |     `-FloatingLiteral 0x7ff8a7802c68 <col:21> 'double' 3.000000e+00
    |-DeclStmt 0x7ff8a78030e0 <line:68:5, col:20>
    | `-VarDecl 0x7ff8a7802f20 <col:5, col:19> col:10 x 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ff8a7802fe0 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ff8a7802fa8 <col:14, col:17> '<bound member function type>' .x 0x7ff8a7800da0
    |       `-ImplicitCastExpr 0x7ff8a7803008 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7ff8a7802f80 <col:14> 'class P3' lvalue Var 0x7ff8a7802bc8 'p3' 'class P3'
    |-DeclStmt 0x7ff8a7803278 <line:69:5, col:20>
    | `-VarDecl 0x7ff8a7803108 <col:5, col:19> col:10 y 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ff8a78031c8 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ff8a7803190 <col:14, col:17> '<bound member function type>' .y 0x7ff8a7800ea8
    |       `-ImplicitCastExpr 0x7ff8a78031f0 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7ff8a7803168 <col:14> 'class P3' lvalue Var 0x7ff8a7802bc8 'p3' 'class P3'
    |-DeclStmt 0x7ff8a7803a28 <line:70:5, col:20>
    | `-VarDecl 0x7ff8a78032a0 <col:5, col:19> col:10 z 'double':'double' cinit
    |   `-CXXMemberCallExpr 0x7ff8a7803360 <col:14, col:19> 'double'
    |     `-MemberExpr 0x7ff8a7803328 <col:14, col:17> '<bound member function type>' .z 0x7ff8a7800fb0
    |       `-ImplicitCastExpr 0x7ff8a7803388 <col:14> 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 0x7ff8a7803300 <col:14> 'class P3' lvalue Var 0x7ff8a7802bc8 'p3' 'class P3'
    `-ReturnStmt 0x7ff8a7803a60 <line:71:5, col:12>
      `-IntegerLiteral 0x7ff8a7803a40 <col:12> 'int' 0

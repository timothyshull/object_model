TranslationUnitDecl 0x7fda66009ed0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced class P1 definition
| |-CXXRecordDecl implicit referenced class P1
| |-AccessSpecDecl public
| |-CXXDestructorDecl used ~P1 'void (void) noexcept' virtual default
| | `-CompoundStmt
| |-CXXMethodDecl x 'double (void) const' virtual pure
| |-CXXMethodDecl used m1 'void (double)' virtual
| | |-ParmVarDecl used v 'double'
| | `-CompoundStmt
| |   `-CompoundAssignOperator 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 'double' lvalue ->_x 0x7fda6604a3e0
| |     | `-CXXThisExpr 'class P1 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-DeclRefExpr 'double' lvalue ParmVar 0x7fda6604a0c8 'v' 'double'
| |-AccessSpecDecl protected
| |-CXXConstructorDecl used P1 'void (double)'
| | |-ParmVarDecl used x 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7fda6604a3e0 '_x' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fda6604a270 'x' 'double'
| | `-CompoundStmt
| |-FieldDecl referenced _x 'double'
| |-CXXMethodDecl > implicit operator= 'class P1 &(const class P1 &)' inline default noexcept-unevaluated 0x7fda6604a4c8
| | `-ParmVarDecl 'const class P1 &'
| `-CXXConstructorDecl implicit constexpr P1 'void (const class P1 &)' inline default noexcept-unevaluated 0x7fda66078cd0
|   `-ParmVarDecl 'const class P1 &'
|-FunctionDecl implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-CXXRecordDecl referenced class P2 definition
| |-CXXRecordDecl implicit referenced class P2
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P2 'void (double, double)'
| | |-ParmVarDecl x 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-ParmVarDecl used y 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-CXXCtorInitializer Field 0x7fda66075e78 '_y' 'double'
| | | `-ImplicitCastExpr 'double' <LValueToRValue>
| | |   `-DeclRefExpr 'double' lvalue ParmVar 0x7fda66075938 'y' 'double'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~P2 'void (void) noexcept' virtual default
| | `-CompoundStmt
| |-CXXMethodDecl y 'double (void) const' virtual pure
| |-CXXMethodDecl used m1 'void (double)' virtual
| | |-ParmVarDecl used v 'double'
| | `-CompoundStmt
| |   `-CompoundAssignOperator 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| |     |-MemberExpr 'double' lvalue ->_y 0x7fda66075e78
| |     | `-CXXThisExpr 'class P2 *' this
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-DeclRefExpr 'double' lvalue ParmVar 0x7fda66075d10 'v' 'double'
| |-AccessSpecDecl protected
| |-FieldDecl referenced _y 'double'
| |-CXXMethodDecl > implicit operator= 'class P2 &(const class P2 &)' inline default noexcept-unevaluated 0x7fda66075f58
| | `-ParmVarDecl 'const class P2 &'
| `-CXXConstructorDecl implicit constexpr P2 'void (const class P2 &)' inline default noexcept-unevaluated 0x7fda66077d88
|   `-ParmVarDecl 'const class P2 &'
|-CXXRecordDecl referenced class P3 definition
| |-public 'class P1'
| |-public 'class P2'
| |-CXXRecordDecl implicit referenced class P3
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P3 'void (double, double, double)'
| | |-ParmVarDecl used x 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-ParmVarDecl used y 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-ParmVarDecl used z 'double' cinit
| | | `-FloatingLiteral 'double' 0.000000e+00
| | |-CXXCtorInitializer 'class P1'
| | | `-CXXConstructExpr 'class P1' 'void (double)'
| | |   `-CXXDefaultArgExpr 'double'
| | |-CXXCtorInitializer 'class P2'
| | | `-CXXConstructExpr 'class P2' 'void (double, double)'
| | |   |-ImplicitCastExpr 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 'double' lvalue ParmVar 0x7fda66077130 'x' 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fda660771a8 'y' 'double'
| | |-CXXCtorInitializer Field 0x7fda66077a10 '_z' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fda66077220 'z' 'double'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~P3 'void (void) noexcept' default
| | |-CompoundStmt
| | `-OverrideAttr
| |-CXXMethodDecl used x 'double (void) const' virtual
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue ->_x 0x7fda6604a3e0
| | |       `-ImplicitCastExpr 'class P1 *' <UncheckedDerivedToBase (P1)>
| | |         `-CXXThisExpr 'const class P3 *' this
| | `-OverrideAttr
| |-CXXMethodDecl used y 'double (void) const' virtual
| | |-CompoundStmt
| | | `-ReturnStmt
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue ->_y 0x7fda66075e78
| | |       `-ImplicitCastExpr 'class P2 *' <UncheckedDerivedToBase (P2)>
| | |         `-CXXThisExpr 'const class P3 *' this
| | `-OverrideAttr
| |-CXXMethodDecl used z 'double (void) const'
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'const double' lvalue ->_z 0x7fda66077a10
| |         `-CXXThisExpr 'const class P3 *' this
| |-CXXMethodDecl used m1 'void (double)' virtual
| | |-ParmVarDecl used v 'double'
| | |-CompoundStmt
| | | `-CompoundAssignOperator 'double' lvalue '*=' ComputeLHSTy='double' ComputeResultTy='double'
| | |   |-MemberExpr 'double' lvalue ->_z 0x7fda66077a10
| | |   | `-CXXThisExpr 'class P3 *' this
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7fda66077860 'v' 'double'
| | `-OverrideAttr
| |-AccessSpecDecl protected
| |-FieldDecl referenced _z 'double'
| |-CXXMethodDecl > implicit operator= 'class P3 &(const class P3 &)' inline default noexcept-unevaluated 0x7fda66077af8
| | `-ParmVarDecl 'const class P3 &'
| `-CXXConstructorDecl implicit constexpr P3 'void (const class P3 &)' inline default noexcept-unevaluated 0x7fda660794e0
|   `-ParmVarDecl 'const class P3 &'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used p3 'class P3' listinit
    |   `-CXXConstructExpr 'class P3' 'void (double, double, double)'
    |     |-FloatingLiteral 'double' 1.000000e+00
    |     |-FloatingLiteral 'double' 2.000000e+00
    |     `-FloatingLiteral 'double' 3.000000e+00
    |-DeclStmt
    | `-VarDecl x 'double':'double' cinit
    |   `-CXXMemberCallExpr 'double'
    |     `-MemberExpr '<bound member function type>' .x 0x7fda660775a0
    |       `-ImplicitCastExpr 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 'class P3' lvalue Var 0x7fda660793c8 'p3' 'class P3'
    |-DeclStmt
    | `-VarDecl y 'double':'double' cinit
    |   `-CXXMemberCallExpr 'double'
    |     `-MemberExpr '<bound member function type>' .y 0x7fda660776a8
    |       `-ImplicitCastExpr 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 'class P3' lvalue Var 0x7fda660793c8 'p3' 'class P3'
    |-DeclStmt
    | `-VarDecl z 'double':'double' cinit
    |   `-CXXMemberCallExpr 'double'
    |     `-MemberExpr '<bound member function type>' .z 0x7fda660777b0
    |       `-ImplicitCastExpr 'const class P3' lvalue <NoOp>
    |         `-DeclRefExpr 'class P3' lvalue Var 0x7fda660793c8 'p3' 'class P3'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

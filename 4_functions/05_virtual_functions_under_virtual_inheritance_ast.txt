TranslationUnitDecl 0x7fae4e8296d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fae4e829c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fae4e829940 '__int128'
|-TypedefDecl 0x7fae4e829cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fae4e829960 'unsigned __int128'
|-TypedefDecl 0x7fae4e82a018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fae4e829dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fae4e829d28 '__NSConstantString_tag'
|-TypedefDecl 0x7fae4e82a0b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fae4e82a070 'char *'
|   `-BuiltinType 0x7fae4e829760 'char'
|-TypedefDecl 0x7fae4f005800 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fae4e82a390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fae4e82a1a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fae4e82a108 '__va_list_tag'
|-CXXRecordDecl 0x7fae4f005858 <object_model/4_functions/05_virtual_functions_under_virtual_inheritance.cpp:1:1, line:7:1> line:1:8 referenced struct B definition
| |-CXXRecordDecl 0x7fae4f005978 <col:1, col:8> col:8 implicit struct B
| |-FieldDecl 0x7fae4f005a28 <line:2:5, col:9> col:9 referenced n 'int'
| |-CXXMethodDecl 0x7fae4f005af0 <line:4:5, line:6:5> line:4:18 used m 'void (void)' virtual
| | `-CompoundStmt 0x7fae4f0060b0 <col:22, line:6:5>
| |   `-BinaryOperator 0x7fae4f006088 <line:5:9, col:13> 'int' lvalue '='
| |     |-MemberExpr 0x7fae4f006030 <col:9> 'int' lvalue ->n 0x7fae4f005a28
| |     | `-CXXThisExpr 0x7fae4f006018 <col:9> 'struct B *' this
| |     `-IntegerLiteral 0x7fae4f006068 <col:13> 'int' 1
| |-CXXMethodDecl 0x7fae4f005be8 <line:1:8, <invalid sloc>> col:8 implicit operator= 'struct B &(const struct B &)' inline default noexcept-unevaluated 0x7fae4f005be8
| | `-ParmVarDecl 0x7fae4f005d00 <col:8> col:8 'const struct B &'
| |-CXXMethodDecl 0x7fae4f005d98 <col:8, <invalid sloc>> col:8 implicit operator= 'struct B &(struct B &&)' inline default noexcept-unevaluated 0x7fae4f005d98
| | `-ParmVarDecl 0x7fae4f005eb0 <col:8> col:8 'struct B &&'
| |-CXXDestructorDecl 0x7fae4f005f38 <col:8> col:8 implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7fae4f005f38
| |-CXXConstructorDecl 0x7fae4e009cf8 <col:8> col:8 implicit used B 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fae4e010810 <col:8>
| |-CXXConstructorDecl 0x7fae4e00a2f8 <col:8> col:8 implicit constexpr B 'void (const struct B &)' inline default noexcept-unevaluated 0x7fae4e00a2f8
| | `-ParmVarDecl 0x7fae4e00a420 <col:8> col:8 'const struct B &'
| `-CXXConstructorDecl 0x7fae4e00a488 <col:8> col:8 implicit constexpr B 'void (struct B &&)' inline default noexcept-unevaluated 0x7fae4e00a488
|   `-ParmVarDecl 0x7fae4e00a5b0 <col:8> col:8 'struct B &&'
|-CXXRecordDecl 0x7fae4f0060d0 <line:9:1, line:13:1> line:9:7 referenced class X definition
| |-virtual public 'struct B'
| |-CXXRecordDecl 0x7fae4f006250 <col:1, col:7> col:7 implicit class X
| |-CXXMethodDecl 0x7fae4f006338 <line:10:5, line:12:5> line:10:18 used m 'void (void)' virtual
| | |-CompoundStmt 0x7fae4e00e1f8 <col:31, line:12:5>
| | | `-BinaryOperator 0x7fae4e00e1d0 <line:11:9, col:16> 'int' lvalue '='
| | |   |-MemberExpr 0x7fae4e00e160 <col:9, col:12> 'int' lvalue ->n 0x7fae4f005a28
| | |   | `-ImplicitCastExpr 0x7fae4e00e140 <col:12> 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | |   |   `-CXXThisExpr 0x7fae4e00e128 <col:12> 'class X *' this
| | |   `-IntegerLiteral 0x7fae4e00e1b0 <col:16> 'int' 2
| | `-OverrideAttr 0x7fae4f0063d0 <line:10:22>
| |-CXXMethodDecl 0x7fae4f006478 <line:9:7, <invalid sloc>> col:7 implicit operator= 'class X &(const class X &)' inline default noexcept-unevaluated 0x7fae4f006478
| | `-ParmVarDecl 0x7fae4f006590 <col:7> col:7 'const class X &'
| |-CXXMethodDecl 0x7fae4f006628 <col:7, <invalid sloc>> col:7 implicit operator= 'class X &(class X &&)' inline default noexcept-unevaluated 0x7fae4f006628
| | `-ParmVarDecl 0x7fae4f006740 <col:7> col:7 'class X &&'
| |-CXXDestructorDecl 0x7fae4e00e000 <col:7> col:7 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7fae4e00e000
| |-CXXConstructorDecl 0x7fae4e009bf8 <col:7> col:7 implicit used X 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 0x7fae4e010890 <col:7> 'struct B' 'void (void) noexcept'
| | `-CompoundStmt 0x7fae4e010900 <col:7>
| |-CXXConstructorDecl 0x7fae4e00a168 <col:7> col:7 implicit X 'void (const class X &)' inline default noexcept-unevaluated 0x7fae4e00a168
| | `-ParmVarDecl 0x7fae4e00a290 <col:7> col:7 'const class X &'
| `-CXXConstructorDecl 0x7fae4e00a618 <col:7> col:7 implicit X 'void (class X &&)' inline default noexcept-unevaluated 0x7fae4e00a618
|   `-ParmVarDecl 0x7fae4e00a740 <col:7> col:7 'class X &&'
|-CXXRecordDecl 0x7fae4e00e218 <line:15:1, line:19:1> line:15:7 referenced class Y definition
| |-virtual public 'struct B'
| |-CXXRecordDecl 0x7fae4e00e390 <col:1, col:7> col:7 implicit class Y
| |-CXXMethodDecl 0x7fae4e00e478 <line:16:5, line:18:5> line:16:18 used m 'void (void)' virtual
| | |-CompoundStmt 0x7fae4e00eaf0 <col:31, line:18:5>
| | | `-BinaryOperator 0x7fae4e00eac8 <line:17:9, col:16> 'int' lvalue '='
| | |   |-MemberExpr 0x7fae4e00ea58 <col:9, col:12> 'int' lvalue ->n 0x7fae4f005a28
| | |   | `-ImplicitCastExpr 0x7fae4e00ea38 <col:12> 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | |   |   `-CXXThisExpr 0x7fae4e00ea20 <col:12> 'class Y *' this
| | |   `-IntegerLiteral 0x7fae4e00eaa8 <col:16> 'int' 3
| | `-OverrideAttr 0x7fae4e00e510 <line:16:22>
| |-CXXMethodDecl 0x7fae4e00e5b8 <line:15:7, <invalid sloc>> col:7 implicit operator= 'class Y &(const class Y &)' inline default noexcept-unevaluated 0x7fae4e00e5b8
| | `-ParmVarDecl 0x7fae4e00e6d0 <col:7> col:7 'const class Y &'
| |-CXXMethodDecl 0x7fae4e00e768 <col:7, <invalid sloc>> col:7 implicit operator= 'class Y &(class Y &&)' inline default noexcept-unevaluated 0x7fae4e00e768
| | `-ParmVarDecl 0x7fae4e00e880 <col:7> col:7 'class Y &&'
| |-CXXDestructorDecl 0x7fae4e00e908 <col:7> col:7 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7fae4e00e908
| |-CXXConstructorDecl 0x7fae4e009df8 <col:7> col:7 implicit used Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 0x7fae4e010980 <col:7> 'struct B' 'void (void) noexcept'
| | `-CompoundStmt 0x7fae4e0109f0 <col:7>
| |-CXXConstructorDecl 0x7fae4e010000 <col:7> col:7 implicit Y 'void (const class Y &)' inline default noexcept-unevaluated 0x7fae4e010000
| | `-ParmVarDecl 0x7fae4e010130 <col:7> col:7 'const class Y &'
| `-CXXConstructorDecl 0x7fae4e010198 <col:7> col:7 implicit Y 'void (class Y &&)' inline default noexcept-unevaluated 0x7fae4e010198
|   `-ParmVarDecl 0x7fae4e0102c0 <col:7> col:7 'class Y &&'
|-CXXRecordDecl 0x7fae4e00eb10 <line:21:1, line:25:1> line:21:7 referenced class Z definition
| |-public 'struct B'
| |-CXXRecordDecl 0x7fae4e00ec78 <col:1, col:7> col:7 implicit class Z
| |-CXXMethodDecl 0x7fae4e00ed58 <line:22:5, line:24:5> line:22:18 used m 'void (void)' virtual
| | |-CompoundStmt 0x7fae4e008420 <col:31, line:24:5>
| | | `-BinaryOperator 0x7fae4e0083f8 <line:23:9, col:16> 'int' lvalue '='
| | |   |-MemberExpr 0x7fae4e008388 <col:9, col:12> 'int' lvalue ->n 0x7fae4f005a28
| | |   | `-ImplicitCastExpr 0x7fae4e008368 <col:12> 'struct B *' <UncheckedDerivedToBase (B)>
| | |   |   `-CXXThisExpr 0x7fae4e008350 <col:12> 'class Z *' this
| | |   `-IntegerLiteral 0x7fae4e0083d8 <col:16> 'int' 4
| | `-OverrideAttr 0x7fae4e00edf0 <line:22:22>
| |-CXXMethodDecl 0x7fae4e00ee98 <line:21:7, <invalid sloc>> col:7 implicit operator= 'class Z &(const class Z &)' inline default noexcept-unevaluated 0x7fae4e00ee98
| | `-ParmVarDecl 0x7fae4e008000 <col:7> col:7 'const class Z &'
| |-CXXMethodDecl 0x7fae4e008098 <col:7, <invalid sloc>> col:7 implicit operator= 'class Z &(class Z &&)' inline default noexcept-unevaluated 0x7fae4e008098
| | `-ParmVarDecl 0x7fae4e0081b0 <col:7> col:7 'class Z &&'
| |-CXXDestructorDecl 0x7fae4e008238 <col:7> col:7 implicit ~Z 'void (void)' inline default trivial noexcept-unevaluated 0x7fae4e008238
| |-CXXConstructorDecl 0x7fae4e009ef8 <col:7> col:7 implicit used Z 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 0x7fae4e010a70 <col:7> 'struct B' 'void (void) noexcept'
| | `-CompoundStmt 0x7fae4e010ae0 <col:7>
| |-CXXConstructorDecl 0x7fae4e010328 <col:7> col:7 implicit constexpr Z 'void (const class Z &)' inline default noexcept-unevaluated 0x7fae4e010328
| | `-ParmVarDecl 0x7fae4e010450 <col:7> col:7 'const class Z &'
| `-CXXConstructorDecl 0x7fae4e0104b8 <col:7> col:7 implicit constexpr Z 'void (class Z &&)' inline default noexcept-unevaluated 0x7fae4e0104b8
|   `-ParmVarDecl 0x7fae4e0105e0 <col:7> col:7 'class Z &&'
|-CXXRecordDecl 0x7fae4e008440 <line:27:1, line:34:1> line:27:8 referenced struct AA definition
| |-public 'class X'
| |-public 'class Y'
| |-public 'class Z'
| |-CXXRecordDecl 0x7fae4e008640 <col:1, col:8> col:8 implicit struct AA
| |-CXXMethodDecl 0x7fae4e008728 <line:28:5, line:33:5> line:28:10 used m 'void (void)'
| | |-CompoundStmt 0x7fae4e009898 <line:29:5, line:33:5>
| | | |-BinaryOperator 0x7fae4e008db0 <line:30:9, col:16> 'int' lvalue '='
| | | | |-MemberExpr 0x7fae4e008d40 <col:9, col:12> 'int' lvalue ->n 0x7fae4f005a28
| | | | | `-ImplicitCastExpr 0x7fae4e008d20 <col:12> 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | | | |   `-ImplicitCastExpr 0x7fae4e008d00 <col:12> 'class X *' <UncheckedDerivedToBase (X)>
| | | | |     `-CXXThisExpr 0x7fae4e008ce8 <col:12> 'struct AA *' this
| | | | `-IntegerLiteral 0x7fae4e008d90 <col:16> 'int' 5
| | | |-BinaryOperator 0x7fae4e008ef0 <line:31:9, col:16> 'int' lvalue '='
| | | | |-MemberExpr 0x7fae4e008e80 <col:9, col:12> 'int' lvalue ->n 0x7fae4f005a28
| | | | | `-ImplicitCastExpr 0x7fae4e008e60 <col:12> 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | | | |   `-ImplicitCastExpr 0x7fae4e008e40 <col:12> 'class Y *' <UncheckedDerivedToBase (Y)>
| | | | |     `-CXXThisExpr 0x7fae4e008e28 <col:12> 'struct AA *' this
| | | | `-IntegerLiteral 0x7fae4e008ed0 <col:16> 'int' 6
| | | `-BinaryOperator 0x7fae4e009870 <line:32:9, col:16> 'int' lvalue '='
| | |   |-MemberExpr 0x7fae4e009800 <col:9, col:12> 'int' lvalue ->n 0x7fae4f005a28
| | |   | `-ImplicitCastExpr 0x7fae4e008fa0 <col:12> 'struct B *' <UncheckedDerivedToBase (B)>
| | |   |   `-ImplicitCastExpr 0x7fae4e008f80 <col:12> 'class Z *' <UncheckedDerivedToBase (Z)>
| | |   |     `-CXXThisExpr 0x7fae4e008f68 <col:12> 'struct AA *' this
| | |   `-IntegerLiteral 0x7fae4e009850 <col:16> 'int' 7
| | `-OverrideAttr 0x7fae4e0087c0 <line:28:14>
| |-CXXMethodDecl 0x7fae4e008868 <line:27:8, <invalid sloc>> col:8 implicit operator= 'struct AA &(const struct AA &)' inline default noexcept-unevaluated 0x7fae4e008868
| | `-ParmVarDecl 0x7fae4e008980 <col:8> col:8 'const struct AA &'
| |-CXXMethodDecl 0x7fae4e008a18 <col:8, <invalid sloc>> col:8 implicit operator= 'struct AA &(struct AA &&)' inline default noexcept-unevaluated 0x7fae4e008a18
| | `-ParmVarDecl 0x7fae4e008b30 <col:8> col:8 'struct AA &&'
| |-CXXDestructorDecl 0x7fae4e008bb8 <col:8> col:8 implicit ~AA 'void (void)' inline default trivial noexcept-unevaluated 0x7fae4e008bb8
| |-CXXConstructorDecl 0x7fae4e009af8 <col:8> col:8 implicit used AA 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 0x7fae4e010828 <col:8> 'struct B' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class X'
| | | `-CXXConstructExpr 0x7fae4e010918 <col:8> 'class X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Y'
| | | `-CXXConstructExpr 0x7fae4e010a08 <col:8> 'class Y' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Z'
| | | `-CXXConstructExpr 0x7fae4e010af8 <col:8> 'class Z' 'void (void) noexcept'
| | `-CompoundStmt 0x7fae4e010b80 <col:8>
| |-CXXConstructorDecl 0x7fae4e009fd8 <col:8> col:8 implicit AA 'void (const struct AA &)' inline default noexcept-unevaluated 0x7fae4e009fd8
| | `-ParmVarDecl 0x7fae4e00a100 <col:8> col:8 'const struct AA &'
| `-CXXConstructorDecl 0x7fae4e010648 <col:8> col:8 implicit AA 'void (struct AA &&)' inline default noexcept-unevaluated 0x7fae4e010648
|   `-ParmVarDecl 0x7fae4e010770 <col:8> col:8 'struct AA &&'
`-FunctionDecl 0x7fae4e009928 <line:36:1, line:41:1> line:36:5 main 'int (void)'
  `-CompoundStmt 0x7fae4e010ca0 <line:37:1, line:41:1>
    |-DeclStmt 0x7fae4e010bc8 <line:38:5, col:12>
    | `-VarDecl 0x7fae4e009a38 <col:5, col:11> col:8 used aa 'struct AA' listinit
    |   `-CXXConstructExpr 0x7fae4e010b98 <col:8, col:11> 'struct AA' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 0x7fae4e010c40 <line:39:5, col:10> 'void'
    | `-MemberExpr 0x7fae4e010c08 <col:5, col:8> '<bound member function type>' .m 0x7fae4e008728
    |   `-DeclRefExpr 0x7fae4e010be0 <col:5> 'struct AA' lvalue Var 0x7fae4e009a38 'aa' 'struct AA'
    `-ReturnStmt 0x7fae4e010c88 <line:40:5, col:12>
      `-IntegerLiteral 0x7fae4e010c68 <col:12> 'int' 0

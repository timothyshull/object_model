TranslationUnitDecl 0x7f83590186d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct B definition
| |-CXXRecordDecl implicit struct B
| |-FieldDecl referenced n 'int'
| |-CXXMethodDecl used m 'void (void)' virtual
| | `-CompoundStmt
| |   `-BinaryOperator 'int' lvalue '='
| |     |-MemberExpr 'int' lvalue ->n 0x7f835904be28
| |     | `-CXXThisExpr 'struct B *' this
| |     `-IntegerLiteral 'int' 1
| |-CXXMethodDecl > implicit operator= 'struct B &(const struct B &)' inline default noexcept-unevaluated 0x7f835904bfe8
| | `-ParmVarDecl 'const struct B &'
| |-CXXMethodDecl > implicit operator= 'struct B &(struct B &&)' inline default noexcept-unevaluated 0x7f835904c198
| | `-ParmVarDecl 'struct B &&'
| |-CXXDestructorDecl implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7f835904c338
| |-CXXConstructorDecl implicit used B 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr B 'void (const struct B &)' inline default noexcept-unevaluated 0x7f835981c2f8
| | `-ParmVarDecl 'const struct B &'
| `-CXXConstructorDecl implicit constexpr B 'void (struct B &&)' inline default noexcept-unevaluated 0x7f835981c488
|   `-ParmVarDecl 'struct B &&'
|-CXXRecordDecl referenced class X definition
| |-virtual public 'struct B'
| |-CXXRecordDecl implicit class X
| |-CXXMethodDecl used m 'void (void)' virtual
| | |-CompoundStmt
| | | `-BinaryOperator 'int' lvalue '='
| | |   |-MemberExpr 'int' lvalue ->n 0x7f835904be28
| | |   | `-ImplicitCastExpr 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | |   |   `-CXXThisExpr 'class X *' this
| | |   `-IntegerLiteral 'int' 2
| | `-OverrideAttr
| |-CXXMethodDecl > implicit operator= 'class X &(const class X &)' inline default noexcept-unevaluated 0x7f835904c878
| | `-ParmVarDecl 'const class X &'
| |-CXXMethodDecl > implicit operator= 'class X &(class X &&)' inline default noexcept-unevaluated 0x7f835904ca28
| | `-ParmVarDecl 'class X &&'
| |-CXXDestructorDecl implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7f8359818000
| |-CXXConstructorDecl implicit used X 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 'struct B' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit X 'void (const class X &)' inline default noexcept-unevaluated 0x7f835981c168
| | `-ParmVarDecl 'const class X &'
| `-CXXConstructorDecl implicit X 'void (class X &&)' inline default noexcept-unevaluated 0x7f835981c618
|   `-ParmVarDecl 'class X &&'
|-CXXRecordDecl referenced class Y definition
| |-virtual public 'struct B'
| |-CXXRecordDecl implicit class Y
| |-CXXMethodDecl used m 'void (void)' virtual
| | |-CompoundStmt
| | | `-BinaryOperator 'int' lvalue '='
| | |   |-MemberExpr 'int' lvalue ->n 0x7f835904be28
| | |   | `-ImplicitCastExpr 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | |   |   `-CXXThisExpr 'class Y *' this
| | |   `-IntegerLiteral 'int' 3
| | `-OverrideAttr
| |-CXXMethodDecl > implicit operator= 'class Y &(const class Y &)' inline default noexcept-unevaluated 0x7f83598185b8
| | `-ParmVarDecl 'const class Y &'
| |-CXXMethodDecl > implicit operator= 'class Y &(class Y &&)' inline default noexcept-unevaluated 0x7f8359818768
| | `-ParmVarDecl 'class Y &&'
| |-CXXDestructorDecl implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7f8359818908
| |-CXXConstructorDecl implicit used Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 'struct B' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit Y 'void (const class Y &)' inline default noexcept-unevaluated 0x7f835981c800
| | `-ParmVarDecl 'const class Y &'
| `-CXXConstructorDecl implicit Y 'void (class Y &&)' inline default noexcept-unevaluated 0x7f835981c998
|   `-ParmVarDecl 'class Y &&'
|-CXXRecordDecl referenced class Z definition
| |-public 'struct B'
| |-CXXRecordDecl implicit class Z
| |-CXXMethodDecl used m 'void (void)' virtual
| | |-CompoundStmt
| | | `-BinaryOperator 'int' lvalue '='
| | |   |-MemberExpr 'int' lvalue ->n 0x7f835904be28
| | |   | `-ImplicitCastExpr 'struct B *' <UncheckedDerivedToBase (B)>
| | |   |   `-CXXThisExpr 'class Z *' this
| | |   `-IntegerLiteral 'int' 4
| | `-OverrideAttr
| |-CXXMethodDecl > implicit operator= 'class Z &(const class Z &)' inline default noexcept-unevaluated 0x7f8359818e98
| | `-ParmVarDecl 'const class Z &'
| |-CXXMethodDecl > implicit operator= 'class Z &(class Z &&)' inline default noexcept-unevaluated 0x7f835981a098
| | `-ParmVarDecl 'class Z &&'
| |-CXXDestructorDecl implicit ~Z 'void (void)' inline default trivial noexcept-unevaluated 0x7f835981a238
| |-CXXConstructorDecl implicit used Z 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 'struct B' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr Z 'void (const class Z &)' inline default noexcept-unevaluated 0x7f835981cb28
| | `-ParmVarDecl 'const class Z &'
| `-CXXConstructorDecl implicit constexpr Z 'void (class Z &&)' inline default noexcept-unevaluated 0x7f835981ccb8
|   `-ParmVarDecl 'class Z &&'
|-CXXRecordDecl referenced struct AA definition
| |-public 'class X'
| |-public 'class Y'
| |-public 'class Z'
| |-CXXRecordDecl implicit struct AA
| |-CXXMethodDecl used m 'void (void)'
| | |-CompoundStmt
| | | |-BinaryOperator 'int' lvalue '='
| | | | |-MemberExpr 'int' lvalue ->n 0x7f835904be28
| | | | | `-ImplicitCastExpr 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | | | |   `-ImplicitCastExpr 'class X *' <UncheckedDerivedToBase (X)>
| | | | |     `-CXXThisExpr 'struct AA *' this
| | | | `-IntegerLiteral 'int' 5
| | | |-BinaryOperator 'int' lvalue '='
| | | | |-MemberExpr 'int' lvalue ->n 0x7f835904be28
| | | | | `-ImplicitCastExpr 'struct B *' <UncheckedDerivedToBase (virtual B)>
| | | | |   `-ImplicitCastExpr 'class Y *' <UncheckedDerivedToBase (Y)>
| | | | |     `-CXXThisExpr 'struct AA *' this
| | | | `-IntegerLiteral 'int' 6
| | | `-BinaryOperator 'int' lvalue '='
| | |   |-MemberExpr 'int' lvalue ->n 0x7f835904be28
| | |   | `-ImplicitCastExpr 'struct B *' <UncheckedDerivedToBase (B)>
| | |   |   `-ImplicitCastExpr 'class Z *' <UncheckedDerivedToBase (Z)>
| | |   |     `-CXXThisExpr 'struct AA *' this
| | |   `-IntegerLiteral 'int' 7
| | `-OverrideAttr
| |-CXXMethodDecl > implicit operator= 'struct AA &(const struct AA &)' inline default noexcept-unevaluated 0x7f835981a868
| | `-ParmVarDecl 'const struct AA &'
| |-CXXMethodDecl > implicit operator= 'struct AA &(struct AA &&)' inline default noexcept-unevaluated 0x7f835981aa18
| | `-ParmVarDecl 'struct AA &&'
| |-CXXDestructorDecl implicit ~AA 'void (void)' inline default trivial noexcept-unevaluated 0x7f835981abb8
| |-CXXConstructorDecl implicit used AA 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 'struct B' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class X'
| | | `-CXXConstructExpr 'class X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Y'
| | | `-CXXConstructExpr 'class Y' 'void (void) noexcept'
| | |-CXXCtorInitializer 'class Z'
| | | `-CXXConstructExpr 'class Z' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit AA 'void (const struct AA &)' inline default noexcept-unevaluated 0x7f835981bfd8
| | `-ParmVarDecl 'const struct AA &'
| `-CXXConstructorDecl implicit AA 'void (struct AA &&)' inline default noexcept-unevaluated 0x7f835981ce48
|   `-ParmVarDecl 'struct AA &&'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used aa 'struct AA' listinit
    |   `-CXXConstructExpr 'struct AA' 'void (void) noexcept' zeroing
    |-CXXMemberCallExpr 'void'
    | `-MemberExpr '<bound member function type>' .m 0x7f835981a728
    |   `-DeclRefExpr 'struct AA' lvalue Var 0x7f835981ba38 'aa' 'struct AA'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

TranslationUnitDecl 0x7f855e817ad0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f855e818060 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f855e817d40 '__int128'
|-TypedefDecl 0x7f855e8180d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f855e817d60 'unsigned __int128'
|-TypedefDecl 0x7f855e818418 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f855e8181c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f855e818128 '__NSConstantString_tag'
|-TypedefDecl 0x7f855e8184b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f855e818470 'char *'
|   `-BuiltinType 0x7f855e817b60 'char'
|-TypedefDecl 0x7f855e045600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f855e818790 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f855e8185a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f855e818508 '__va_list_tag'
|-FunctionDecl 0x7f855e0457c8 <object_model_refined/4_functions/09_local_variables.cpp:2:1, line:6:1> line:2:12 used min 'int (int, int)' inline
| |-ParmVarDecl 0x7f855e045670 <col:16, col:20> col:20 used i 'int'
| |-ParmVarDecl 0x7f855e0456e8 <col:23, col:27> col:27 used j 'int'
| `-CompoundStmt 0x7f855e045ad8 <line:3:1, line:6:1>
|   |-DeclStmt 0x7f855e045a68 <line:4:5, col:32>
|   | `-VarDecl 0x7f855e0458c8 <col:5, col:31> col:9 used min_val 'int' cinit
|   |   `-ImplicitCastExpr 0x7f855e045a50 <col:19, col:31> 'int' <LValueToRValue>
|   |     `-ConditionalOperator 0x7f855e045a20 <col:19, col:31> 'int' lvalue
|   |       |-BinaryOperator 0x7f855e0459a8 <col:19, col:23> '_Bool' '<'
|   |       | |-ImplicitCastExpr 0x7f855e045978 <col:19> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7f855e045928 <col:19> 'int' lvalue ParmVar 0x7f855e045670 'i' 'int'
|   |       | `-ImplicitCastExpr 0x7f855e045990 <col:23> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7f855e045950 <col:23> 'int' lvalue ParmVar 0x7f855e0456e8 'j' 'int'
|   |       |-DeclRefExpr 0x7f855e0459d0 <col:27> 'int' lvalue ParmVar 0x7f855e045670 'i' 'int'
|   |       `-DeclRefExpr 0x7f855e0459f8 <col:31> 'int' lvalue ParmVar 0x7f855e0456e8 'j' 'int'
|   `-ReturnStmt 0x7f855e045ac0 <line:5:5, col:12>
|     `-ImplicitCastExpr 0x7f855e045aa8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7f855e045a80 <col:12> 'int' lvalue Var 0x7f855e0458c8 'min_val' 'int'
|-FunctionDecl 0x7f855e045b58 <line:8:1, line:11:1> line:8:5 used foo 'int (void)'
| `-CompoundStmt 0x7f855e045c28 <line:9:1, line:11:1>
|   `-ReturnStmt 0x7f855e045c10 <line:10:5, col:12>
|     `-IntegerLiteral 0x7f855e045bf0 <col:12> 'int' 256
`-FunctionDecl 0x7f855e045c70 <line:13:1, line:23:1> line:13:5 main 'int (void)'
  `-CompoundStmt 0x7f855e81e928 <line:14:1, line:23:1>
    |-DeclStmt 0x7f855e045eb0 <line:16:5, col:19>
    | `-VarDecl 0x7f855e045d70 <col:5, col:17> col:10 used val1 'int':'int' cinit
    |   `-IntegerLiteral 0x7f855e045dd0 <col:17> 'int' 10
    |-DeclStmt 0x7f855e045fc8 <line:17:5, col:19>
    | `-VarDecl 0x7f855e045ed8 <col:5, col:17> col:10 used val2 'int':'int' cinit
    |   `-IntegerLiteral 0x7f855e045f38 <col:17> 'int' 11
    |-DeclStmt 0x7f855e046238 <line:18:5, col:35>
    | `-VarDecl 0x7f855e045ff0 <col:5, col:34> col:10 used min_val 'int':'int' cinit
    |   `-CallExpr 0x7f855e046160 <col:20, col:34> 'int'
    |     |-ImplicitCastExpr 0x7f855e046148 <col:20> 'int (*)(int, int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x7f855e0460f8 <col:20> 'int (int, int)' lvalue Function 0x7f855e0457c8 'min' 'int (int, int)'
    |     |-ImplicitCastExpr 0x7f855e046198 <col:24> 'int':'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x7f855e0460a8 <col:24> 'int':'int' lvalue Var 0x7f855e045d70 'val1' 'int':'int'
    |     `-ImplicitCastExpr 0x7f855e0461b0 <col:30> 'int':'int' <LValueToRValue>
    |       `-DeclRefExpr 0x7f855e0460d0 <col:30> 'int':'int' lvalue Var 0x7f855e045ed8 'val2' 'int':'int'
    |-BinaryOperator 0x7f855e81e8c8 <line:21:5, col:53> 'int':'int' lvalue '='
    | |-DeclRefExpr 0x7f855e046250 <col:5> 'int':'int' lvalue Var 0x7f855e045ff0 'min_val' 'int':'int'
    | `-BinaryOperator 0x7f855e81e8a0 <col:15, col:53> 'int' '+'
    |   |-CallExpr 0x7f855e046360 <col:15, col:29> 'int'
    |   | |-ImplicitCastExpr 0x7f855e046348 <col:15> 'int (*)(int, int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x7f855e046320 <col:15> 'int (int, int)' lvalue Function 0x7f855e0457c8 'min' 'int (int, int)'
    |   | |-ImplicitCastExpr 0x7f855e046398 <col:19> 'int':'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x7f855e0462d0 <col:19> 'int':'int' lvalue Var 0x7f855e045d70 'val1' 'int':'int'
    |   | `-ImplicitCastExpr 0x7f855e0463b0 <col:25> 'int':'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x7f855e0462f8 <col:25> 'int':'int' lvalue Var 0x7f855e045ed8 'val2' 'int':'int'
    |   `-CallExpr 0x7f855e81e868 <col:33, col:53> 'int'
    |     |-ImplicitCastExpr 0x7f855e81e850 <col:33> 'int (*)(int, int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x7f855e81e828 <col:33> 'int (int, int)' lvalue Function 0x7f855e0457c8 'min' 'int (int, int)'
    |     |-CallExpr 0x7f855e0464e0 <col:37, col:41> 'int'
    |     | `-ImplicitCastExpr 0x7f855e0464c8 <col:37> 'int (*)(void)' <FunctionToPointerDecay>
    |     |   `-DeclRefExpr 0x7f855e046478 <col:37> 'int (void)' lvalue Function 0x7f855e045b58 'foo' 'int (void)'
    |     `-BinaryOperator 0x7f855e81e800 <col:44, col:52> 'int' '+'
    |       |-CallExpr 0x7f855e0465a0 <col:44, col:48> 'int'
    |       | `-ImplicitCastExpr 0x7f855e046588 <col:44> 'int (*)(void)' <FunctionToPointerDecay>
    |       |   `-DeclRefExpr 0x7f855e046560 <col:44> 'int (void)' lvalue Function 0x7f855e045b58 'foo' 'int (void)'
    |       `-IntegerLiteral 0x7f855e0465c8 <col:52> 'int' 1
    `-ReturnStmt 0x7f855e81e910 <line:22:5, col:12>
      `-IntegerLiteral 0x7f855e81e8f0 <col:12> 'int' 0

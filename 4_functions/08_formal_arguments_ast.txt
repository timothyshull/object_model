TranslationUnitDecl 0x7ff01d8174d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff01d817a60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff01d817740 '__int128'
|-TypedefDecl 0x7ff01d817ad0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff01d817760 'unsigned __int128'
|-TypedefDecl 0x7ff01d817e18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff01d817bc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7ff01d817b28 '__NSConstantString_tag'
|-TypedefDecl 0x7ff01d817eb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff01d817e70 'char *'
|   `-BuiltinType 0x7ff01d817560 'char'
|-TypedefDecl 0x7ff01d84a600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff01d818190 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff01d817fa0 'struct __va_list_tag'
|     `-CXXRecord 0x7ff01d817f08 '__va_list_tag'
|-FunctionDecl 0x7ff01d84a7c8 </Users/tskull/Documents/Programming/Cpp/object_model_refined/4_functions/08_formal_arguments.cpp:2:1, line:5:1> line:2:12 used min 'int (int, int)' inline
| |-ParmVarDecl 0x7ff01d84a670 <col:16, col:20> col:20 used i 'int'
| |-ParmVarDecl 0x7ff01d84a6e8 <col:23, col:27> col:27 used j 'int'
| `-CompoundStmt 0x7ff01d84aa08 <line:3:1, line:5:1>
|   `-ReturnStmt 0x7ff01d84a9f0 <line:4:5, col:24>
|     `-ImplicitCastExpr 0x7ff01d84a9d8 <col:12, col:24> 'int' <LValueToRValue>
|       `-ConditionalOperator 0x7ff01d84a9a8 <col:12, col:24> 'int' lvalue
|         |-BinaryOperator 0x7ff01d84a930 <col:12, col:16> '_Bool' '<'
|         | |-ImplicitCastExpr 0x7ff01d84a900 <col:12> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7ff01d84a8b0 <col:12> 'int' lvalue ParmVar 0x7ff01d84a670 'i' 'int'
|         | `-ImplicitCastExpr 0x7ff01d84a918 <col:16> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7ff01d84a8d8 <col:16> 'int' lvalue ParmVar 0x7ff01d84a6e8 'j' 'int'
|         |-DeclRefExpr 0x7ff01d84a958 <col:20> 'int' lvalue ParmVar 0x7ff01d84a670 'i' 'int'
|         `-DeclRefExpr 0x7ff01d84a980 <col:24> 'int' lvalue ParmVar 0x7ff01d84a6e8 'j' 'int'
|-FunctionDecl 0x7ff01d84aa88 <line:7:1, line:10:1> line:7:5 used foo 'int (void)'
| `-CompoundStmt 0x7ff01d84ab58 <line:8:1, line:10:1>
|   `-ReturnStmt 0x7ff01d84ab40 <line:9:5, col:12>
|     `-IntegerLiteral 0x7ff01d84ab20 <col:12> 'int' 1024
|-FunctionDecl 0x7ff01d84aba0 <line:12:1, line:15:1> line:12:5 used bar1 'int (void)'
| `-CompoundStmt 0x7ff01d84ac70 <line:13:1, line:15:1>
|   `-ReturnStmt 0x7ff01d84ac58 <line:14:5, col:12>
|     `-IntegerLiteral 0x7ff01d84ac38 <col:12> 'int' 2047
`-FunctionDecl 0x7ff01d84acb8 <line:17:1, line:35:1> line:17:5 main 'int (void)'
  `-CompoundStmt 0x7ff01e810ef0 <line:18:1, line:35:1>
    |-DeclStmt 0x7ff01d84aef0 <line:19:5, col:21>
    | `-VarDecl 0x7ff01d84adb0 <col:5, col:17> col:10 used val1 'int':'int' cinit
    |   `-IntegerLiteral 0x7ff01d84ae10 <col:17> 'int' 1024
    |-DeclStmt 0x7ff01d84b008 <line:20:5, col:21>
    | `-VarDecl 0x7ff01d84af18 <col:5, col:17> col:10 used val2 'int':'int' cinit
    |   `-IntegerLiteral 0x7ff01d84af78 <col:17> 'int' 2048
    |-DeclStmt 0x7ff01d84b278 <line:22:5, col:35>
    | `-VarDecl 0x7ff01d84b030 <col:5, col:34> col:10 used min_val 'int':'int' cinit
    |   `-CallExpr 0x7ff01d84b1a0 <col:20, col:34> 'int'
    |     |-ImplicitCastExpr 0x7ff01d84b188 <col:20> 'int (*)(int, int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x7ff01d84b138 <col:20> 'int (int, int)' lvalue Function 0x7ff01d84a7c8 'min' 'int (int, int)'
    |     |-ImplicitCastExpr 0x7ff01d84b1d8 <col:24> 'int':'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x7ff01d84b0e8 <col:24> 'int':'int' lvalue Var 0x7ff01d84adb0 'val1' 'int':'int'
    |     `-ImplicitCastExpr 0x7ff01d84b1f0 <col:30> 'int':'int' <LValueToRValue>
    |       `-DeclRefExpr 0x7ff01d84b110 <col:30> 'int':'int' lvalue Var 0x7ff01d84af18 'val2' 'int':'int'
    |-BinaryOperator 0x7ff01d84b3c8 <line:25:5, col:29> 'int':'int' lvalue '='
    | |-DeclRefExpr 0x7ff01d84b290 <col:5> 'int':'int' lvalue Var 0x7ff01d84b030 'min_val' 'int':'int'
    | `-CallExpr 0x7ff01d84b390 <col:15, col:29> 'int'
    |   |-ImplicitCastExpr 0x7ff01d84b378 <col:15> 'int (*)(int, int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x7ff01d84b350 <col:15> 'int (int, int)' lvalue Function 0x7ff01d84a7c8 'min' 'int (int, int)'
    |   |-IntegerLiteral 0x7ff01d84b310 <col:19> 'int' 1024
    |   `-IntegerLiteral 0x7ff01d84b330 <col:25> 'int' 2048
    |-BinaryOperator 0x7ff01e8108e8 <line:28:5, col:36> 'int':'int' lvalue '='
    | |-DeclRefExpr 0x7ff01d84b3f0 <col:5> 'int':'int' lvalue Var 0x7ff01d84b030 'min_val' 'int':'int'
    | `-CallExpr 0x7ff01e8108b0 <col:15, col:36> 'int'
    |   |-ImplicitCastExpr 0x7ff01e810898 <col:15> 'int (*)(int, int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x7ff01e810870 <col:15> 'int (int, int)' lvalue Function 0x7ff01d84a7c8 'min' 'int (int, int)'
    |   |-CallExpr 0x7ff01d84b530 <col:19, col:23> 'int'
    |   | `-ImplicitCastExpr 0x7ff01d84b518 <col:19> 'int (*)(void)' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x7ff01d84b4c8 <col:19> 'int (void)' lvalue Function 0x7ff01d84aa88 'foo' 'int (void)'
    |   `-BinaryOperator 0x7ff01e810848 <col:26, col:35> 'int' '+'
    |     |-CallExpr 0x7ff01e810800 <col:26, col:31> 'int'
    |     | `-ImplicitCastExpr 0x7ff01d84b5d8 <col:26> 'int (*)(void)' <FunctionToPointerDecay>
    |     |   `-DeclRefExpr 0x7ff01d84b5b0 <col:26> 'int (void)' lvalue Function 0x7ff01d84aba0 'bar1' 'int (void)'
    |     `-IntegerLiteral 0x7ff01e810828 <col:35> 'int' 1
    |-DeclStmt 0x7ff01e810988 <line:31:5, col:11>
    | `-VarDecl 0x7ff01e810928 <col:5, col:9> col:9 used t1 'int'
    |-DeclStmt 0x7ff01e810a18 <line:32:5, col:11>
    | `-VarDecl 0x7ff01e8109b8 <col:5, col:9> col:9 used t2 'int'
    |-BinaryOperator 0x7ff01e810e90 <line:33:5, col:63> 'int' lvalue ','
    | |-BinaryOperator 0x7ff01e810d40 <col:5, col:45> 'int' lvalue ','
    | | |-BinaryOperator 0x7ff01e810ba0 <col:5, col:26> 'int':'int' lvalue '='
    | | | |-DeclRefExpr 0x7ff01e810a30 <col:5> 'int':'int' lvalue Var 0x7ff01d84b030 'min_val' 'int':'int'
    | | | `-ImplicitCastExpr 0x7ff01e810b88 <col:15, col:26> 'int' <LValueToRValue>
    | | |   `-ParenExpr 0x7ff01e810b68 <col:15, col:26> 'int' lvalue
    | | |     `-BinaryOperator 0x7ff01e810b40 <col:16, col:25> 'int' lvalue '='
    | | |       |-DeclRefExpr 0x7ff01e810a58 <col:16> 'int' lvalue Var 0x7ff01e810928 't1' 'int'
    | | |       `-CallExpr 0x7ff01e810b18 <col:21, col:25> 'int'
    | | |         `-ImplicitCastExpr 0x7ff01e810b00 <col:21> 'int (*)(void)' <FunctionToPointerDecay>
    | | |           `-DeclRefExpr 0x7ff01e810ad8 <col:21> 'int (void)' lvalue Function 0x7ff01d84aa88 'foo' 'int (void)'
    | | `-ParenExpr 0x7ff01e810d20 <col:29, col:45> 'int' lvalue
    | |   `-BinaryOperator 0x7ff01e810cf8 <col:30, col:44> 'int' lvalue '='
    | |     |-DeclRefExpr 0x7ff01e810bc8 <col:30> 'int' lvalue Var 0x7ff01e8109b8 't2' 'int'
    | |     `-BinaryOperator 0x7ff01e810cd0 <col:35, col:44> 'int' '+'
    | |       |-CallExpr 0x7ff01e810c88 <col:35, col:40> 'int'
    | |       | `-ImplicitCastExpr 0x7ff01e810c70 <col:35> 'int (*)(void)' <FunctionToPointerDecay>
    | |       |   `-DeclRefExpr 0x7ff01e810c48 <col:35> 'int (void)' lvalue Function 0x7ff01d84aba0 'bar1' 'int (void)'
    | |       `-IntegerLiteral 0x7ff01e810cb0 <col:44> 'int' 1
    | `-ConditionalOperator 0x7ff01e810e60 <col:48, col:63> 'int' lvalue
    |   |-BinaryOperator 0x7ff01e810de8 <col:48, col:53> '_Bool' '<'
    |   | |-ImplicitCastExpr 0x7ff01e810db8 <col:48> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x7ff01e810d68 <col:48> 'int' lvalue Var 0x7ff01e810928 't1' 'int'
    |   | `-ImplicitCastExpr 0x7ff01e810dd0 <col:53> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x7ff01e810d90 <col:53> 'int' lvalue Var 0x7ff01e8109b8 't2' 'int'
    |   |-DeclRefExpr 0x7ff01e810e10 <col:58> 'int' lvalue Var 0x7ff01e810928 't1' 'int'
    |   `-DeclRefExpr 0x7ff01e810e38 <col:63> 'int' lvalue Var 0x7ff01e8109b8 't2' 'int'
    `-ReturnStmt 0x7ff01e810ed8 <line:34:5, col:12>
      `-IntegerLiteral 0x7ff01e810eb8 <col:12> 'int' 0

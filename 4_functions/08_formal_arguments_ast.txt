TranslationUnitDecl 0x7fc803818cd0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc803819260 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc803818f40 '__int128'
|-TypedefDecl 0x7fc8038192d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc803818f60 'unsigned __int128'
|-TypedefDecl 0x7fc803819618 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc8038193c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fc803819328 '__NSConstantString_tag'
|-TypedefDecl 0x7fc8038196b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc803819670 'char *'
|   `-BuiltinType 0x7fc803818d60 'char'
|-TypedefDecl 0x7fc80384c200 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc803819990 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc8038197a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fc803819708 '__va_list_tag'
|-FunctionDecl 0x7fc80384c3c8 </Users/tskull/Documents/Programming/Cpp/object_model_refined/4_functions/08_formal_arguments.cpp:2:1, line:5:1> line:2:12 used min 'int (int, int)' inline
| |-ParmVarDecl 0x7fc80384c270 <col:16, col:20> col:20 used i 'int'
| |-ParmVarDecl 0x7fc80384c2e8 <col:23, col:27> col:27 used j 'int'
| `-CompoundStmt 0x7fc80384c608 <line:3:1, line:5:1>
|   `-ReturnStmt 0x7fc80384c5f0 <line:4:5, col:24>
|     `-ImplicitCastExpr 0x7fc80384c5d8 <col:12, col:24> 'int' <LValueToRValue>
|       `-ConditionalOperator 0x7fc80384c5a8 <col:12, col:24> 'int' lvalue
|         |-BinaryOperator 0x7fc80384c530 <col:12, col:16> '_Bool' '<'
|         | |-ImplicitCastExpr 0x7fc80384c500 <col:12> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fc80384c4b0 <col:12> 'int' lvalue ParmVar 0x7fc80384c270 'i' 'int'
|         | `-ImplicitCastExpr 0x7fc80384c518 <col:16> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fc80384c4d8 <col:16> 'int' lvalue ParmVar 0x7fc80384c2e8 'j' 'int'
|         |-DeclRefExpr 0x7fc80384c558 <col:20> 'int' lvalue ParmVar 0x7fc80384c270 'i' 'int'
|         `-DeclRefExpr 0x7fc80384c580 <col:24> 'int' lvalue ParmVar 0x7fc80384c2e8 'j' 'int'
|-FunctionDecl 0x7fc80384c688 <line:7:1, line:10:1> line:7:5 used foo 'int (void)'
| `-CompoundStmt 0x7fc80384c758 <line:8:1, line:10:1>
|   `-ReturnStmt 0x7fc80384c740 <line:9:5, col:12>
|     `-IntegerLiteral 0x7fc80384c720 <col:12> 'int' 1024
|-FunctionDecl 0x7fc80384c7a0 <line:12:1, line:15:1> line:12:5 used bar1 'int (void)'
| `-CompoundStmt 0x7fc80384c870 <line:13:1, line:15:1>
|   `-ReturnStmt 0x7fc80384c858 <line:14:5, col:12>
|     `-IntegerLiteral 0x7fc80384c838 <col:12> 'int' 2047
`-FunctionDecl 0x7fc80384c8b8 <line:17:1, line:35:1> line:17:5 main 'int (void)'
  `-CompoundStmt 0x7fc8040006f0 <line:18:1, line:35:1>
    |-DeclStmt 0x7fc80384caf0 <line:19:5, col:21>
    | `-VarDecl 0x7fc80384c9b0 <col:5, col:17> col:10 used val1 'int':'int' cinit
    |   `-IntegerLiteral 0x7fc80384ca10 <col:17> 'int' 1024
    |-DeclStmt 0x7fc80384cc08 <line:20:5, col:21>
    | `-VarDecl 0x7fc80384cb18 <col:5, col:17> col:10 used val2 'int':'int' cinit
    |   `-IntegerLiteral 0x7fc80384cb78 <col:17> 'int' 2048
    |-DeclStmt 0x7fc80384ce78 <line:22:5, col:35>
    | `-VarDecl 0x7fc80384cc30 <col:5, col:34> col:10 used min_val 'int':'int' cinit
    |   `-CallExpr 0x7fc80384cda0 <col:20, col:34> 'int'
    |     |-ImplicitCastExpr 0x7fc80384cd88 <col:20> 'int (*)(int, int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x7fc80384cd38 <col:20> 'int (int, int)' lvalue Function 0x7fc80384c3c8 'min' 'int (int, int)'
    |     |-ImplicitCastExpr 0x7fc80384cdd8 <col:24> 'int':'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x7fc80384cce8 <col:24> 'int':'int' lvalue Var 0x7fc80384c9b0 'val1' 'int':'int'
    |     `-ImplicitCastExpr 0x7fc80384cdf0 <col:30> 'int':'int' <LValueToRValue>
    |       `-DeclRefExpr 0x7fc80384cd10 <col:30> 'int':'int' lvalue Var 0x7fc80384cb18 'val2' 'int':'int'
    |-BinaryOperator 0x7fc80384cfc8 <line:25:5, col:29> 'int':'int' lvalue '='
    | |-DeclRefExpr 0x7fc80384ce90 <col:5> 'int':'int' lvalue Var 0x7fc80384cc30 'min_val' 'int':'int'
    | `-CallExpr 0x7fc80384cf90 <col:15, col:29> 'int'
    |   |-ImplicitCastExpr 0x7fc80384cf78 <col:15> 'int (*)(int, int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x7fc80384cf50 <col:15> 'int (int, int)' lvalue Function 0x7fc80384c3c8 'min' 'int (int, int)'
    |   |-IntegerLiteral 0x7fc80384cf10 <col:19> 'int' 1024
    |   `-IntegerLiteral 0x7fc80384cf30 <col:25> 'int' 2048
    |-BinaryOperator 0x7fc8040000e8 <line:28:5, col:36> 'int':'int' lvalue '='
    | |-DeclRefExpr 0x7fc80384cff0 <col:5> 'int':'int' lvalue Var 0x7fc80384cc30 'min_val' 'int':'int'
    | `-CallExpr 0x7fc8040000b0 <col:15, col:36> 'int'
    |   |-ImplicitCastExpr 0x7fc804000098 <col:15> 'int (*)(int, int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x7fc804000070 <col:15> 'int (int, int)' lvalue Function 0x7fc80384c3c8 'min' 'int (int, int)'
    |   |-CallExpr 0x7fc80384d130 <col:19, col:23> 'int'
    |   | `-ImplicitCastExpr 0x7fc80384d118 <col:19> 'int (*)(void)' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x7fc80384d0c8 <col:19> 'int (void)' lvalue Function 0x7fc80384c688 'foo' 'int (void)'
    |   `-BinaryOperator 0x7fc804000048 <col:26, col:35> 'int' '+'
    |     |-CallExpr 0x7fc804000000 <col:26, col:31> 'int'
    |     | `-ImplicitCastExpr 0x7fc80384d1d8 <col:26> 'int (*)(void)' <FunctionToPointerDecay>
    |     |   `-DeclRefExpr 0x7fc80384d1b0 <col:26> 'int (void)' lvalue Function 0x7fc80384c7a0 'bar1' 'int (void)'
    |     `-IntegerLiteral 0x7fc804000028 <col:35> 'int' 1
    |-DeclStmt 0x7fc804000188 <line:31:5, col:11>
    | `-VarDecl 0x7fc804000128 <col:5, col:9> col:9 used t1 'int'
    |-DeclStmt 0x7fc804000218 <line:32:5, col:11>
    | `-VarDecl 0x7fc8040001b8 <col:5, col:9> col:9 used t2 'int'
    |-BinaryOperator 0x7fc804000690 <line:33:5, col:63> 'int' lvalue ','
    | |-BinaryOperator 0x7fc804000540 <col:5, col:45> 'int' lvalue ','
    | | |-BinaryOperator 0x7fc8040003a0 <col:5, col:26> 'int':'int' lvalue '='
    | | | |-DeclRefExpr 0x7fc804000230 <col:5> 'int':'int' lvalue Var 0x7fc80384cc30 'min_val' 'int':'int'
    | | | `-ImplicitCastExpr 0x7fc804000388 <col:15, col:26> 'int' <LValueToRValue>
    | | |   `-ParenExpr 0x7fc804000368 <col:15, col:26> 'int' lvalue
    | | |     `-BinaryOperator 0x7fc804000340 <col:16, col:25> 'int' lvalue '='
    | | |       |-DeclRefExpr 0x7fc804000258 <col:16> 'int' lvalue Var 0x7fc804000128 't1' 'int'
    | | |       `-CallExpr 0x7fc804000318 <col:21, col:25> 'int'
    | | |         `-ImplicitCastExpr 0x7fc804000300 <col:21> 'int (*)(void)' <FunctionToPointerDecay>
    | | |           `-DeclRefExpr 0x7fc8040002d8 <col:21> 'int (void)' lvalue Function 0x7fc80384c688 'foo' 'int (void)'
    | | `-ParenExpr 0x7fc804000520 <col:29, col:45> 'int' lvalue
    | |   `-BinaryOperator 0x7fc8040004f8 <col:30, col:44> 'int' lvalue '='
    | |     |-DeclRefExpr 0x7fc8040003c8 <col:30> 'int' lvalue Var 0x7fc8040001b8 't2' 'int'
    | |     `-BinaryOperator 0x7fc8040004d0 <col:35, col:44> 'int' '+'
    | |       |-CallExpr 0x7fc804000488 <col:35, col:40> 'int'
    | |       | `-ImplicitCastExpr 0x7fc804000470 <col:35> 'int (*)(void)' <FunctionToPointerDecay>
    | |       |   `-DeclRefExpr 0x7fc804000448 <col:35> 'int (void)' lvalue Function 0x7fc80384c7a0 'bar1' 'int (void)'
    | |       `-IntegerLiteral 0x7fc8040004b0 <col:44> 'int' 1
    | `-ConditionalOperator 0x7fc804000660 <col:48, col:63> 'int' lvalue
    |   |-BinaryOperator 0x7fc8040005e8 <col:48, col:53> '_Bool' '<'
    |   | |-ImplicitCastExpr 0x7fc8040005b8 <col:48> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x7fc804000568 <col:48> 'int' lvalue Var 0x7fc804000128 't1' 'int'
    |   | `-ImplicitCastExpr 0x7fc8040005d0 <col:53> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x7fc804000590 <col:53> 'int' lvalue Var 0x7fc8040001b8 't2' 'int'
    |   |-DeclRefExpr 0x7fc804000610 <col:58> 'int' lvalue Var 0x7fc804000128 't1' 'int'
    |   `-DeclRefExpr 0x7fc804000638 <col:63> 'int' lvalue Var 0x7fc8040001b8 't2' 'int'
    `-ReturnStmt 0x7fc8040006d8 <line:34:5, col:12>
      `-IntegerLiteral 0x7fc8040006b8 <col:12> 'int' 0

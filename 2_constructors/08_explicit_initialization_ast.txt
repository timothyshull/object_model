TranslationUnitDecl 0x7f8a238326d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct X definition
| |-FullComment
| | |-ParagraphComment
| | | `-TextComment Text=" from cppreference.com"
| | |-ParagraphComment
| | | |-TextComment Text=" The explicit specifier specifies that a constructor or conversion function (since C++11)"
| | | |-TextComment Text=" doesn't allow implicit conversions or copy-initialization. It may only appear within"
| | | `-TextComment Text=" the decl-specifier-seq of the declaration of such a function within its class definition."
| | |-ParagraphComment
| | | |-TextComment Text=" A constructor with a single non-default parameter (until C++11) that is declared without"
| | | `-TextComment Text=" the function specifier explicit is called a converting constructor."
| | `-ParagraphComment
| |   |-TextComment Text=" Copy-initialization is less permissive than direct-initialization: explicit constructors"
| |   `-TextComment Text=" are not converting constructors and are not considered for copy-initialization"
| |-CXXRecordDecl implicit referenced struct X
| |-FieldDecl referenced x 'int'
| | `-IntegerLiteral 'int' 0
| |-CXXConstructorDecl used X 'void (int)'
| | |-ParmVarDecl used a 'int'
| | |-CXXCtorInitializer Field 0x7f8a24806058 'x' 'int'
| | | `-InitListExpr 'int'
| | |   `-ImplicitCastExpr 'int' <LValueToRValue>
| | |     `-DeclRefExpr 'int' lvalue ParmVar 0x7f8a248060b8 'a' 'int'
| | `-CompoundStmt
| |-CXXConstructorDecl constexpr X 'void (void)' default noexcept-unevaluated 0x7f8a248062d0
| |-CXXDestructorDecl referenced ~X 'void (void) noexcept' default trivial
| `-CXXConstructorDecl implicit used constexpr X 'void (const struct X &) noexcept' inline default trivial
|   |-ParmVarDecl used 'const struct X &'
|   |-CXXCtorInitializer Field 0x7f8a24806058 'x' 'int'
|   | `-ImplicitCastExpr 'int' <LValueToRValue>
|   |   `-MemberExpr 'const int' lvalue .x 0x7f8a24806058
|   |     `-DeclRefExpr 'const struct X' lvalue ParmVar 0x7f8a24813730 '' 'const struct X &'
|   `-CompoundStmt
|-CXXRecordDecl referenced struct Y definition
| |-CXXRecordDecl implicit referenced struct Y
| |-FieldDecl y 'int'
| | `-IntegerLiteral 'int' 0
| |-CXXConstructorDecl used Y 'void (int)'
| | |-ParmVarDecl used a 'int'
| | |-CXXCtorInitializer Field 0x7f8a24806828 'y' 'int'
| | | `-InitListExpr 'int'
| | |   `-ImplicitCastExpr 'int' <LValueToRValue>
| | |     `-DeclRefExpr 'int' lvalue ParmVar 0x7f8a24806888 'a' 'int'
| | `-CompoundStmt
| |-CXXConstructorDecl constexpr Y 'void (void)' default noexcept-unevaluated 0x7f8a24806a30
| |-CXXDestructorDecl ~Y 'void (void) noexcept' default trivial
| `-CXXConstructorDecl implicit constexpr Y 'void (const struct Y &)' inline default trivial noexcept-unevaluated 0x7f8a24813b68
|   `-ParmVarDecl 'const struct Y &'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl x1 'struct X' listinit
    |   `-CXXConstructExpr 'struct X' 'void (int)'
    |     `-IntegerLiteral 'int' 1
    |-DeclStmt
    | `-VarDecl x2 'struct X' cinit
    |   `-ExprWithCleanups 'struct X'
    |     `-CXXConstructExpr 'struct X' 'void (const struct X &) noexcept' elidable
    |       `-MaterializeTemporaryExpr 'const struct X' lvalue
    |         `-ImplicitCastExpr 'const struct X' <NoOp>
    |           `-ImplicitCastExpr 'struct X' <ConstructorConversion>
    |             `-CXXConstructExpr 'struct X' 'void (int)'
    |               `-IntegerLiteral 'int' 2
    |-DeclStmt
    | `-VarDecl y1 'struct Y' listinit
    |   `-CXXConstructExpr 'struct Y' 'void (int)'
    |     `-IntegerLiteral 'int' 1
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

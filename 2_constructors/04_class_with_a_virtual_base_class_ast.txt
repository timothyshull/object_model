TranslationUnitDecl 0x7f954702a0d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f954702a660 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f954702a340 '__int128'
|-TypedefDecl 0x7f954702a6d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f954702a360 'unsigned __int128'
|-TypedefDecl 0x7f954702aa18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f954702a7c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f954702a728 '__NSConstantString_tag'
|-TypedefDecl 0x7f954702aab0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f954702aa70 'char *'
|   `-BuiltinType 0x7f954702a160 'char'
|-TypedefDecl 0x7f954705c800 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f954702ad90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f954702aba0 'struct __va_list_tag'
|     `-CXXRecord 0x7f954702ab08 '__va_list_tag'
|-CXXRecordDecl 0x7f954705c858 <object_model_refined/2_constructors/04_class_with_a_virtual_base_class.cpp:1:1, line:3:1> line:1:8 referenced struct X definition
| |-CXXRecordDecl 0x7f954705c978 <col:1, col:8> col:8 implicit struct X
| |-FieldDecl 0x7f954705ca28 <line:2:5, col:9> col:9 referenced i 'int'
| |-CXXMethodDecl 0x7f954705cf48 <line:1:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(const struct X &)' inline default trivial noexcept-unevaluated 0x7f954705cf48
| | `-ParmVarDecl 0x7f954705d060 <col:8> col:8 'const struct X &'
| |-CXXMethodDecl 0x7f954705d0f8 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(struct X &&)' inline default trivial noexcept-unevaluated 0x7f954705d0f8
| | `-ParmVarDecl 0x7f954705d210 <col:8> col:8 'struct X &&'
| |-CXXDestructorDecl 0x7f954705d558 <col:8> col:8 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7f954705d558
| |-CXXConstructorDecl 0x7f95470876e8 <col:8> col:8 implicit used X 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7f9547087e40 <col:8>
| |-CXXConstructorDecl 0x7f9547087958 <col:8> col:8 implicit constexpr X 'void (const struct X &)' inline default trivial noexcept-unevaluated 0x7f9547087958
| | `-ParmVarDecl 0x7f9547087a80 <col:8> col:8 'const struct X &'
| `-CXXConstructorDecl 0x7f9547087ae8 <col:8> col:8 implicit constexpr X 'void (struct X &&)' inline default trivial noexcept-unevaluated 0x7f9547087ae8
|   `-ParmVarDecl 0x7f9547087c10 <col:8> col:8 'struct X &&'
|-CXXRecordDecl 0x7f954705ca90 <line:5:1, line:7:1> line:5:8 referenced struct A definition
| |-virtual public 'struct X'
| |-CXXRecordDecl 0x7f954705cc10 <col:1, col:8> col:8 implicit struct A
| |-FieldDecl 0x7f954705ccc0 <line:6:5, col:9> col:9 j 'int'
| |-CXXMethodDecl 0x7f954705cd68 <line:5:8, <invalid sloc>> col:8 implicit operator= 'struct A &(const struct A &)' inline default noexcept-unevaluated 0x7f954705cd68
| | `-ParmVarDecl 0x7f954705ce80 <col:8> col:8 'const struct A &'
| |-CXXMethodDecl 0x7f954705d2a8 <col:8, <invalid sloc>> col:8 implicit operator= 'struct A &(struct A &&)' inline default noexcept-unevaluated 0x7f954705d2a8
| | `-ParmVarDecl 0x7f954705d3c0 <col:8> col:8 'struct A &&'
| |-CXXDestructorDecl 0x7f954705d448 <col:8> col:8 implicit ~A 'void (void)' inline default trivial noexcept-unevaluated 0x7f954705d448
| |-CXXConstructorDecl 0x7f95470875e8 <col:8> col:8 implicit used A 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7f9547087e58 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7f9547087ec8 <col:8>
| |-CXXConstructorDecl 0x7f95470877c8 <col:8> col:8 implicit A 'void (const struct A &)' inline default noexcept-unevaluated 0x7f95470877c8
| | `-ParmVarDecl 0x7f95470878f0 <col:8> col:8 'const struct A &'
| `-CXXConstructorDecl 0x7f9547087c78 <col:8> col:8 implicit A 'void (struct A &&)' inline default noexcept-unevaluated 0x7f9547087c78
|   `-ParmVarDecl 0x7f9547087da0 <col:8> col:8 'struct A &&'
|-CXXRecordDecl 0x7f954705d638 <line:9:1, line:11:1> line:9:8 referenced struct B definition
| |-virtual public 'struct X'
| |-CXXRecordDecl 0x7f9547086000 <col:1, col:8> col:8 implicit struct B
| |-FieldDecl 0x7f95470860b0 <line:10:5, col:12> col:12 d 'double'
| |-CXXMethodDecl 0x7f9547086158 <line:9:8, <invalid sloc>> col:8 implicit operator= 'struct B &(const struct B &)' inline default noexcept-unevaluated 0x7f9547086158
| | `-ParmVarDecl 0x7f9547086270 <col:8> col:8 'const struct B &'
| |-CXXMethodDecl 0x7f9547086308 <col:8, <invalid sloc>> col:8 implicit operator= 'struct B &(struct B &&)' inline default noexcept-unevaluated 0x7f9547086308
| | `-ParmVarDecl 0x7f9547086420 <col:8> col:8 'struct B &&'
| |-CXXDestructorDecl 0x7f95470864a8 <col:8> col:8 implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7f95470864a8
| |-CXXConstructorDecl 0x7f9547088238 <col:8> col:8 implicit used B 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7f9547089628 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7f9547089698 <col:8>
| |-CXXConstructorDecl 0x7f95470890a8 <col:8> col:8 implicit B 'void (const struct B &)' inline default noexcept-unevaluated 0x7f95470890a8
| | `-ParmVarDecl 0x7f95470891d0 <col:8> col:8 'const struct B &'
| `-CXXConstructorDecl 0x7f9547089238 <col:8> col:8 implicit B 'void (struct B &&)' inline default noexcept-unevaluated 0x7f9547089238
|   `-ParmVarDecl 0x7f9547089360 <col:8> col:8 'struct B &&'
|-CXXRecordDecl 0x7f9547086588 <line:13:1, line:15:1> line:13:8 referenced struct C definition
| |-public 'struct A'
| |-public 'struct B'
| |-CXXRecordDecl 0x7f9547086740 <col:1, col:8> col:8 implicit struct C
| |-FieldDecl 0x7f95470867f0 <line:14:5, col:9> col:9 k 'int'
| |-CXXMethodDecl 0x7f9547086898 <line:13:8, <invalid sloc>> col:8 implicit operator= 'struct C &(const struct C &)' inline default noexcept-unevaluated 0x7f9547086898
| | `-ParmVarDecl 0x7f95470869b0 <col:8> col:8 'const struct C &'
| |-CXXMethodDecl 0x7f9547086a48 <col:8, <invalid sloc>> col:8 implicit operator= 'struct C &(struct C &&)' inline default noexcept-unevaluated 0x7f9547086a48
| | `-ParmVarDecl 0x7f9547086b60 <col:8> col:8 'struct C &&'
| |-CXXDestructorDecl 0x7f9547086be8 <col:8> col:8 implicit ~C 'void (void)' inline default trivial noexcept-unevaluated 0x7f9547086be8
| |-CXXConstructorDecl 0x7f9547088130 <col:8> col:8 implicit used C 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7f9547089558 <col:8> 'struct X' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct A'
| | | `-CXXConstructExpr 0x7f95470895c0 <col:8> 'struct A' 'void (void) noexcept'
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 0x7f95470896b0 <col:8> 'struct B' 'void (void) noexcept'
| | `-CompoundStmt 0x7f9547089730 <col:8>
| |-CXXConstructorDecl 0x7f9547088318 <col:8> col:8 implicit C 'void (const struct C &)' inline default noexcept-unevaluated 0x7f9547088318
| | `-ParmVarDecl 0x7f9547089040 <col:8> col:8 'const struct C &'
| `-CXXConstructorDecl 0x7f95470893c8 <col:8> col:8 implicit C 'void (struct C &&)' inline default noexcept-unevaluated 0x7f95470893c8
|   `-ParmVarDecl 0x7f95470894f0 <col:8> col:8 'struct C &&'
|-FunctionDecl 0x7f9547086dd0 <line:17:1, line:20:1> line:17:6 used func 'void (struct A *)'
| |-ParmVarDecl 0x7f9547086d08 <col:11, col:14> col:14 used pa 'struct A *'
| `-CompoundStmt 0x7f9547086fb8 <line:18:1, line:20:1>
|   `-BinaryOperator 0x7f9547086f90 <line:19:5, col:13> 'int' lvalue '='
|     |-MemberExpr 0x7f9547086f38 <col:5, col:9> 'int' lvalue ->i 0x7f954705ca28
|     | `-ImplicitCastExpr 0x7f9547086f18 <col:5> 'struct X *' <UncheckedDerivedToBase (virtual X)>
|     |   `-ImplicitCastExpr 0x7f9547086ed8 <col:5> 'struct A *' <LValueToRValue>
|     |     `-DeclRefExpr 0x7f9547086eb0 <col:5> 'struct A *' lvalue ParmVar 0x7f9547086d08 'pa' 'struct A *'
|     `-IntegerLiteral 0x7f9547086f70 <col:13> 'int' 1024
`-FunctionDecl 0x7f9547087458 <line:22:1, line:31:1> line:22:5 main 'int (void)'
  `-CompoundStmt 0x7f9547089920 <line:23:1, line:31:1>
    |-DeclStmt 0x7f9547087f10 <line:24:5, col:10>
    | `-VarDecl 0x7f9547087528 <col:5, col:9> col:7 used a 'struct A' listinit
    |   `-CXXConstructExpr 0x7f9547087ee0 <col:7, col:9> 'struct A' 'void (void) noexcept' zeroing
    |-CallExpr 0x7f9547088030 <line:25:5, col:12> 'void'
    | |-ImplicitCastExpr 0x7f9547088018 <col:5> 'void (*)(struct A *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7f9547087fc8 <col:5> 'void (struct A *)' lvalue Function 0x7f9547086dd0 'func' 'void (struct A *)'
    | `-UnaryOperator 0x7f9547087fa8 <col:10, col:11> 'struct A *' prefix '&'
    |   `-DeclRefExpr 0x7f9547087f80 <col:11> 'struct A' lvalue Var 0x7f9547087528 'a' 'struct A'
    |-DeclStmt 0x7f9547089778 <line:27:5, col:10>
    | `-VarDecl 0x7f9547088070 <col:5, col:9> col:7 used c 'struct C' listinit
    |   `-CXXConstructExpr 0x7f9547089748 <col:7, col:9> 'struct C' 'void (void) noexcept' zeroing
    |-CallExpr 0x7f9547089898 <line:28:5, col:12> 'void'
    | |-ImplicitCastExpr 0x7f9547089880 <col:5> 'void (*)(struct A *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7f9547089858 <col:5> 'void (struct A *)' lvalue Function 0x7f9547086dd0 'func' 'void (struct A *)'
    | `-ImplicitCastExpr 0x7f95470898c8 <col:10, col:11> 'struct A *' <DerivedToBase (A)>
    |   `-UnaryOperator 0x7f9547089838 <col:10, col:11> 'struct C *' prefix '&'
    |     `-DeclRefExpr 0x7f95470897e8 <col:11> 'struct C' lvalue Var 0x7f9547088070 'c' 'struct C'
    `-ReturnStmt 0x7f9547089908 <line:30:5, col:12>
      `-IntegerLiteral 0x7f95470898e8 <col:12> 'int' 0

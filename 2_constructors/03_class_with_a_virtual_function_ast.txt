TranslationUnitDecl 0x7f811a8326d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct X definition
| |-CXXRecordDecl implicit struct X
| |-CXXMethodDecl referenced m1 'void (void) const' virtual pure
| |-CXXMethodDecl > implicit constexpr operator= 'struct X &(const struct X &)' inline default noexcept-unevaluated 0x7f811a865f88
| | `-ParmVarDecl 'const struct X &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct X &(struct X &&)' inline default noexcept-unevaluated 0x7f811a866138
| | `-ParmVarDecl 'struct X &&'
| |-CXXDestructorDecl implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7f811a8662d8
| |-CXXConstructorDecl implicit used constexpr X 'void (void) noexcept' inline default
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr X 'void (const struct X &)' inline default noexcept-unevaluated 0x7f811b001e98
| | `-ParmVarDecl 'const struct X &'
| `-CXXConstructorDecl implicit constexpr X 'void (struct X &&)' inline default noexcept-unevaluated 0x7f811b002c00
|   `-ParmVarDecl 'struct X &&'
|-FunctionDecl used func 'void (const struct X &)'
| |-ParmVarDecl used x 'const struct X &'
| `-CompoundStmt
|   `-CXXMemberCallExpr 'void'
|     `-MemberExpr '<bound member function type>' .m1 0x7f811a865e90
|       `-DeclRefExpr 'const struct X' lvalue ParmVar 0x7f811a8663f8 'x' 'const struct X &'
|-CXXRecordDecl referenced struct Y definition
| |-public 'struct X'
| |-CXXRecordDecl implicit struct Y
| |-CXXMethodDecl used m1 'void (void) const'
| | |-CompoundStmt
| | `-OverrideAttr
| |-CXXMethodDecl > implicit constexpr operator= 'struct Y &(const struct Y &)' inline default noexcept-unevaluated 0x7f811a8669c8
| | `-ParmVarDecl 'const struct Y &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct Y &(struct Y &&)' inline default noexcept-unevaluated 0x7f811b001000
| | `-ParmVarDecl 'struct Y &&'
| |-CXXDestructorDecl implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7f811b0011a8
| |-CXXConstructorDecl implicit used constexpr Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 'struct X' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr Y 'void (const struct Y &)' inline default noexcept-unevaluated 0x7f811b002d98
| | `-ParmVarDecl 'const struct Y &'
| `-CXXConstructorDecl implicit constexpr Y 'void (struct Y &&)' inline default noexcept-unevaluated 0x7f811b002f28
|   `-ParmVarDecl 'struct Y &&'
|-CXXRecordDecl referenced struct Z definition
| |-public 'struct X'
| |-CXXRecordDecl implicit struct Z
| |-CXXMethodDecl used m1 'void (void) const'
| | |-CompoundStmt
| | `-OverrideAttr
| |-CXXMethodDecl > implicit constexpr operator= 'struct Z &(const struct Z &)' inline default noexcept-unevaluated 0x7f811b001658
| | `-ParmVarDecl 'const struct Z &'
| |-CXXMethodDecl > implicit constexpr operator= 'struct Z &(struct Z &&)' inline default noexcept-unevaluated 0x7f811b001808
| | `-ParmVarDecl 'struct Z &&'
| |-CXXDestructorDecl implicit ~Z 'void (void)' inline default trivial noexcept-unevaluated 0x7f811b0019a8
| |-CXXConstructorDecl implicit used constexpr Z 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 'struct X' 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr Z 'void (const struct Z &)' inline default noexcept-unevaluated 0x7f811b003648
| | `-ParmVarDecl 'const struct Z &'
| `-CXXConstructorDecl implicit constexpr Z 'void (struct Z &&)' inline default noexcept-unevaluated 0x7f811b0037d8
|   `-ParmVarDecl 'struct Z &&'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used y 'struct Y' listinit
    |   `-CXXConstructExpr 'struct Y' 'void (void) noexcept' zeroing
    |-CallExpr 'void'
    | |-ImplicitCastExpr 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 'void (const struct X &)' lvalue Function 0x7f811a8664c0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 'const struct Y' lvalue <NoOp>
    |     `-DeclRefExpr 'struct Y' lvalue Var 0x7f811b001bf8 'y' 'struct Y'
    |-DeclStmt
    | `-VarDecl used z 'struct Z' listinit
    |   `-CXXConstructExpr 'struct Z' 'void (void) noexcept' zeroing
    |-CallExpr 'void'
    | |-ImplicitCastExpr 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 'void (const struct X &)' lvalue Function 0x7f811a8664c0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 'const struct Z' lvalue <NoOp>
    |     `-DeclRefExpr 'struct Z' lvalue Var 0x7f811b0034a8 'z' 'struct Z'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

TranslationUnitDecl 0x7fc30e0326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc30e032c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc30e032940 '__int128'
|-TypedefDecl 0x7fc30e032cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc30e032960 'unsigned __int128'
|-TypedefDecl 0x7fc30e033018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc30e032dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fc30e032d28 '__NSConstantString_tag'
|-TypedefDecl 0x7fc30e0330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc30e033070 'char *'
|   `-BuiltinType 0x7fc30e032760 'char'
|-TypedefDecl 0x7fc30e065c00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc30e033390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc30e0331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fc30e033108 '__va_list_tag'
|-CXXRecordDecl 0x7fc30e065c58 <object_model/2_constructors/03_class_with_a_virtual_function.cpp:1:1, line:3:1> line:1:8 referenced struct X definition
| |-CXXRecordDecl 0x7fc30e065d78 <col:1, col:8> col:8 implicit struct X
| |-CXXMethodDecl 0x7fc30e065e90 <line:2:5, col:31> col:18 referenced m1 'void (void) const' virtual pure
| |-CXXMethodDecl 0x7fc30e065f88 <line:1:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(const struct X &)' inline default noexcept-unevaluated 0x7fc30e065f88
| | `-ParmVarDecl 0x7fc30e0660a0 <col:8> col:8 'const struct X &'
| |-CXXMethodDecl 0x7fc30e066138 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(struct X &&)' inline default noexcept-unevaluated 0x7fc30e066138
| | `-ParmVarDecl 0x7fc30e066250 <col:8> col:8 'struct X &&'
| |-CXXDestructorDecl 0x7fc30e0662d8 <col:8> col:8 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7fc30e0662d8
| |-CXXConstructorDecl 0x7fc30e0925b8 <col:8> col:8 implicit used constexpr X 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fc30e0934f0 <col:8>
| |-CXXConstructorDecl 0x7fc30e092698 <col:8> col:8 implicit constexpr X 'void (const struct X &)' inline default noexcept-unevaluated 0x7fc30e092698
| | `-ParmVarDecl 0x7fc30e092780 <col:8> col:8 'const struct X &'
| `-CXXConstructorDecl 0x7fc30e093000 <col:8> col:8 implicit constexpr X 'void (struct X &&)' inline default noexcept-unevaluated 0x7fc30e093000
|   `-ParmVarDecl 0x7fc30e093130 <col:8> col:8 'struct X &&'
|-FunctionDecl 0x7fc30e0664c0 <line:5:1, col:33> col:6 used func 'void (const struct X &)'
| |-ParmVarDecl 0x7fc30e0663f8 <col:11, col:20> col:20 used x 'const struct X &'
| `-CompoundStmt 0x7fc30e066628 <col:23, col:33>
|   `-CXXMemberCallExpr 0x7fc30e066600 <col:25, col:30> 'void'
|     `-MemberExpr 0x7fc30e0665c8 <col:25, col:27> '<bound member function type>' .m1 0x7fc30e065e90
|       `-DeclRefExpr 0x7fc30e0665a0 <col:25> 'const struct X' lvalue ParmVar 0x7fc30e0663f8 'x' 'const struct X &'
|-CXXRecordDecl 0x7fc30e066648 <line:7:1, line:9:1> line:7:8 referenced struct Y definition
| |-public 'struct X'
| |-CXXRecordDecl 0x7fc30e0667a8 <col:1, col:8> col:8 implicit struct Y
| |-CXXMethodDecl 0x7fc30e066888 <line:8:5, col:31> col:10 used m1 'void (void) const'
| | |-CompoundStmt 0x7fc30e091ab8 <col:30, col:31>
| | `-OverrideAttr 0x7fc30e066920 <col:21>
| |-CXXMethodDecl 0x7fc30e0669c8 <line:7:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Y &(const struct Y &)' inline default noexcept-unevaluated 0x7fc30e0669c8
| | `-ParmVarDecl 0x7fc30e066ae0 <col:8> col:8 'const struct Y &'
| |-CXXMethodDecl 0x7fc30e091800 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Y &(struct Y &&)' inline default noexcept-unevaluated 0x7fc30e091800
| | `-ParmVarDecl 0x7fc30e091920 <col:8> col:8 'struct Y &&'
| |-CXXDestructorDecl 0x7fc30e0919a8 <col:8> col:8 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7fc30e0919a8
| |-CXXConstructorDecl 0x7fc30e0924b8 <col:8> col:8 implicit used constexpr Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7fc30e093508 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7fc30e093578 <col:8>
| |-CXXConstructorDecl 0x7fc30e093198 <col:8> col:8 implicit constexpr Y 'void (const struct Y &)' inline default noexcept-unevaluated 0x7fc30e093198
| | `-ParmVarDecl 0x7fc30e0932c0 <col:8> col:8 'const struct Y &'
| `-CXXConstructorDecl 0x7fc30e093328 <col:8> col:8 implicit constexpr Y 'void (struct Y &&)' inline default noexcept-unevaluated 0x7fc30e093328
|   `-ParmVarDecl 0x7fc30e093450 <col:8> col:8 'struct Y &&'
|-CXXRecordDecl 0x7fc30e091ad0 <line:11:1, line:13:1> line:11:8 referenced struct Z definition
| |-public 'struct X'
| |-CXXRecordDecl 0x7fc30e091c38 <col:1, col:8> col:8 implicit struct Z
| |-CXXMethodDecl 0x7fc30e091d18 <line:12:5, col:31> col:10 used m1 'void (void) const'
| | |-CompoundStmt 0x7fc30e0922b8 <col:30, col:31>
| | `-OverrideAttr 0x7fc30e091db0 <col:21>
| |-CXXMethodDecl 0x7fc30e091e58 <line:11:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Z &(const struct Z &)' inline default noexcept-unevaluated 0x7fc30e091e58
| | `-ParmVarDecl 0x7fc30e091f70 <col:8> col:8 'const struct Z &'
| |-CXXMethodDecl 0x7fc30e092008 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Z &(struct Z &&)' inline default noexcept-unevaluated 0x7fc30e092008
| | `-ParmVarDecl 0x7fc30e092120 <col:8> col:8 'struct Z &&'
| |-CXXDestructorDecl 0x7fc30e0921a8 <col:8> col:8 implicit ~Z 'void (void)' inline default trivial noexcept-unevaluated 0x7fc30e0921a8
| |-CXXConstructorDecl 0x7fc30e093968 <col:8> col:8 implicit used constexpr Z 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7fc30e093d68 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7fc30e093dd8 <col:8>
| |-CXXConstructorDecl 0x7fc30e093a48 <col:8> col:8 implicit constexpr Z 'void (const struct Z &)' inline default noexcept-unevaluated 0x7fc30e093a48
| | `-ParmVarDecl 0x7fc30e093b70 <col:8> col:8 'const struct Z &'
| `-CXXConstructorDecl 0x7fc30e093bd8 <col:8> col:8 implicit constexpr Z 'void (struct Z &&)' inline default noexcept-unevaluated 0x7fc30e093bd8
|   `-ParmVarDecl 0x7fc30e093d00 <col:8> col:8 'struct Z &&'
`-FunctionDecl 0x7fc30e092328 <line:15:1, line:23:1> line:15:5 main 'int (void)'
  `-CompoundStmt 0x7fc30e800e58 <line:16:1, line:23:1>
    |-DeclStmt 0x7fc30e093730 <line:17:5, col:10>
    | `-VarDecl 0x7fc30e0923f8 <col:5, col:9> col:7 used y 'struct Y' listinit
    |   `-CXXConstructExpr 0x7fc30e093590 <col:7, col:9> 'struct Y' 'void (void) noexcept' zeroing
    |-CallExpr 0x7fc30e093830 <line:18:5, col:11> 'void'
    | |-ImplicitCastExpr 0x7fc30e093818 <col:5> 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7fc30e0937c8 <col:5> 'void (const struct X &)' lvalue Function 0x7fc30e0664c0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 0x7fc30e093878 <col:10> 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 0x7fc30e093860 <col:10> 'const struct Y' lvalue <NoOp>
    |     `-DeclRefExpr 0x7fc30e0937a0 <col:10> 'struct Y' lvalue Var 0x7fc30e0923f8 'y' 'struct Y'
    |-DeclStmt 0x7fc30e093ed8 <line:20:5, col:10>
    | `-VarDecl 0x7fc30e0938a8 <col:5, col:9> col:7 used z 'struct Z' listinit
    |   `-CXXConstructExpr 0x7fc30e093df0 <col:7, col:9> 'struct Z' 'void (void) noexcept' zeroing
    |-CallExpr 0x7fc30e093fb0 <line:21:5, col:11> 'void'
    | |-ImplicitCastExpr 0x7fc30e093f98 <col:5> 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7fc30e093f70 <col:5> 'void (const struct X &)' lvalue Function 0x7fc30e0664c0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 0x7fc30e800e00 <col:10> 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 0x7fc30e093fe0 <col:10> 'const struct Z' lvalue <NoOp>
    |     `-DeclRefExpr 0x7fc30e093f48 <col:10> 'struct Z' lvalue Var 0x7fc30e0938a8 'z' 'struct Z'
    `-ReturnStmt 0x7fc30e800e40 <line:22:5, col:12>
      `-IntegerLiteral 0x7fc30e800e20 <col:12> 'int' 0

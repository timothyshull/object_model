TranslationUnitDecl 0x7f83ee8326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f83ee832c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f83ee832940 '__int128'
|-TypedefDecl 0x7f83ee832cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f83ee832960 'unsigned __int128'
|-TypedefDecl 0x7f83ee833018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f83ee832dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f83ee832d28 '__NSConstantString_tag'
|-TypedefDecl 0x7f83ee8330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f83ee833070 'char *'
|   `-BuiltinType 0x7f83ee832760 'char'
|-TypedefDecl 0x7f83ee865c00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f83ee833390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f83ee8331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f83ee833108 '__va_list_tag'
|-CXXRecordDecl 0x7f83ee865c58 <object_model/2_constructors/03_class_with_a_virtual_function.cpp:1:1, line:3:1> line:1:8 referenced struct X definition
| |-CXXRecordDecl 0x7f83ee865d78 <col:1, col:8> col:8 implicit struct X
| |-CXXMethodDecl 0x7f83ee865e90 <line:2:5, col:31> col:18 referenced m1 'void (void) const' virtual pure
| |-CXXMethodDecl 0x7f83ee865f88 <line:1:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(const struct X &)' inline default noexcept-unevaluated 0x7f83ee865f88
| | `-ParmVarDecl 0x7f83ee8660a0 <col:8> col:8 'const struct X &'
| |-CXXMethodDecl 0x7f83ee866138 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(struct X &&)' inline default noexcept-unevaluated 0x7f83ee866138
| | `-ParmVarDecl 0x7f83ee866250 <col:8> col:8 'struct X &&'
| |-CXXDestructorDecl 0x7f83ee8662d8 <col:8> col:8 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7f83ee8662d8
| |-CXXConstructorDecl 0x7f83ee8925b8 <col:8> col:8 implicit used constexpr X 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7f83ee8934f0 <col:8>
| |-CXXConstructorDecl 0x7f83ee892698 <col:8> col:8 implicit constexpr X 'void (const struct X &)' inline default noexcept-unevaluated 0x7f83ee892698
| | `-ParmVarDecl 0x7f83ee892780 <col:8> col:8 'const struct X &'
| `-CXXConstructorDecl 0x7f83ee893000 <col:8> col:8 implicit constexpr X 'void (struct X &&)' inline default noexcept-unevaluated 0x7f83ee893000
|   `-ParmVarDecl 0x7f83ee893130 <col:8> col:8 'struct X &&'
|-FunctionDecl 0x7f83ee8664c0 <line:5:1, line:7:1> line:5:6 used func 'void (const struct X &)'
| |-ParmVarDecl 0x7f83ee8663f8 <col:11, col:20> col:20 used x 'const struct X &'
| `-CompoundStmt 0x7f83ee866628 <col:23, line:7:1>
|   `-CXXMemberCallExpr 0x7f83ee866600 <line:6:5, col:10> 'void'
|     `-MemberExpr 0x7f83ee8665c8 <col:5, col:7> '<bound member function type>' .m1 0x7f83ee865e90
|       `-DeclRefExpr 0x7f83ee8665a0 <col:5> 'const struct X' lvalue ParmVar 0x7f83ee8663f8 'x' 'const struct X &'
|-CXXRecordDecl 0x7f83ee866648 <line:9:1, line:11:1> line:9:8 referenced struct Y definition
| |-public 'struct X'
| |-CXXRecordDecl 0x7f83ee8667a8 <col:1, col:8> col:8 implicit struct Y
| |-CXXMethodDecl 0x7f83ee866888 <line:10:5, col:31> col:10 used m1 'void (void) const'
| | |-CompoundStmt 0x7f83ee891ab8 <col:30, col:31>
| | `-OverrideAttr 0x7f83ee866920 <col:21>
| |-CXXMethodDecl 0x7f83ee8669c8 <line:9:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Y &(const struct Y &)' inline default noexcept-unevaluated 0x7f83ee8669c8
| | `-ParmVarDecl 0x7f83ee866ae0 <col:8> col:8 'const struct Y &'
| |-CXXMethodDecl 0x7f83ee891800 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Y &(struct Y &&)' inline default noexcept-unevaluated 0x7f83ee891800
| | `-ParmVarDecl 0x7f83ee891920 <col:8> col:8 'struct Y &&'
| |-CXXDestructorDecl 0x7f83ee8919a8 <col:8> col:8 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7f83ee8919a8
| |-CXXConstructorDecl 0x7f83ee8924b8 <col:8> col:8 implicit used constexpr Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7f83ee893508 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7f83ee893578 <col:8>
| |-CXXConstructorDecl 0x7f83ee893198 <col:8> col:8 implicit constexpr Y 'void (const struct Y &)' inline default noexcept-unevaluated 0x7f83ee893198
| | `-ParmVarDecl 0x7f83ee8932c0 <col:8> col:8 'const struct Y &'
| `-CXXConstructorDecl 0x7f83ee893328 <col:8> col:8 implicit constexpr Y 'void (struct Y &&)' inline default noexcept-unevaluated 0x7f83ee893328
|   `-ParmVarDecl 0x7f83ee893450 <col:8> col:8 'struct Y &&'
|-CXXRecordDecl 0x7f83ee891ad0 <line:13:1, line:15:1> line:13:8 referenced struct Z definition
| |-public 'struct X'
| |-CXXRecordDecl 0x7f83ee891c38 <col:1, col:8> col:8 implicit struct Z
| |-CXXMethodDecl 0x7f83ee891d18 <line:14:5, col:31> col:10 used m1 'void (void) const'
| | |-CompoundStmt 0x7f83ee8922b8 <col:30, col:31>
| | `-OverrideAttr 0x7f83ee891db0 <col:21>
| |-CXXMethodDecl 0x7f83ee891e58 <line:13:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Z &(const struct Z &)' inline default noexcept-unevaluated 0x7f83ee891e58
| | `-ParmVarDecl 0x7f83ee891f70 <col:8> col:8 'const struct Z &'
| |-CXXMethodDecl 0x7f83ee892008 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Z &(struct Z &&)' inline default noexcept-unevaluated 0x7f83ee892008
| | `-ParmVarDecl 0x7f83ee892120 <col:8> col:8 'struct Z &&'
| |-CXXDestructorDecl 0x7f83ee8921a8 <col:8> col:8 implicit ~Z 'void (void)' inline default trivial noexcept-unevaluated 0x7f83ee8921a8
| |-CXXConstructorDecl 0x7f83ee893968 <col:8> col:8 implicit used constexpr Z 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7f83ee893d68 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7f83ee893dd8 <col:8>
| |-CXXConstructorDecl 0x7f83ee893a48 <col:8> col:8 implicit constexpr Z 'void (const struct Z &)' inline default noexcept-unevaluated 0x7f83ee893a48
| | `-ParmVarDecl 0x7f83ee893b70 <col:8> col:8 'const struct Z &'
| `-CXXConstructorDecl 0x7f83ee893bd8 <col:8> col:8 implicit constexpr Z 'void (struct Z &&)' inline default noexcept-unevaluated 0x7f83ee893bd8
|   `-ParmVarDecl 0x7f83ee893d00 <col:8> col:8 'struct Z &&'
`-FunctionDecl 0x7f83ee892328 <line:17:1, line:25:1> line:17:5 main 'int (void)'
  `-CompoundStmt 0x7f83ef000058 <line:18:1, line:25:1>
    |-DeclStmt 0x7f83ee893730 <line:19:5, col:10>
    | `-VarDecl 0x7f83ee8923f8 <col:5, col:9> col:7 used y 'struct Y' listinit
    |   `-CXXConstructExpr 0x7f83ee893590 <col:7, col:9> 'struct Y' 'void (void) noexcept' zeroing
    |-CallExpr 0x7f83ee893830 <line:20:5, col:11> 'void'
    | |-ImplicitCastExpr 0x7f83ee893818 <col:5> 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7f83ee8937c8 <col:5> 'void (const struct X &)' lvalue Function 0x7f83ee8664c0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 0x7f83ee893878 <col:10> 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 0x7f83ee893860 <col:10> 'const struct Y' lvalue <NoOp>
    |     `-DeclRefExpr 0x7f83ee8937a0 <col:10> 'struct Y' lvalue Var 0x7f83ee8923f8 'y' 'struct Y'
    |-DeclStmt 0x7f83ee893ed8 <line:22:5, col:10>
    | `-VarDecl 0x7f83ee8938a8 <col:5, col:9> col:7 used z 'struct Z' listinit
    |   `-CXXConstructExpr 0x7f83ee893df0 <col:7, col:9> 'struct Z' 'void (void) noexcept' zeroing
    |-CallExpr 0x7f83ee893fb0 <line:23:5, col:11> 'void'
    | |-ImplicitCastExpr 0x7f83ee893f98 <col:5> 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7f83ee893f70 <col:5> 'void (const struct X &)' lvalue Function 0x7f83ee8664c0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 0x7f83ef000000 <col:10> 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 0x7f83ee893fe0 <col:10> 'const struct Z' lvalue <NoOp>
    |     `-DeclRefExpr 0x7f83ee893f48 <col:10> 'struct Z' lvalue Var 0x7f83ee8938a8 'z' 'struct Z'
    `-ReturnStmt 0x7f83ef000040 <line:24:5, col:12>
      `-IntegerLiteral 0x7f83ef000020 <col:12> 'int' 0

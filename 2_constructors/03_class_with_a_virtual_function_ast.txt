TranslationUnitDecl 0x7fe162830ad0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe162831060 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe162830d40 '__int128'
|-TypedefDecl 0x7fe1628310d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe162830d60 'unsigned __int128'
|-TypedefDecl 0x7fe162831418 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe1628311c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fe162831128 '__NSConstantString_tag'
|-TypedefDecl 0x7fe1628314b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe162831470 'char *'
|   `-BuiltinType 0x7fe162830b60 'char'
|-TypedefDecl 0x7fe162863200 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe162831790 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe1628315a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fe162831508 '__va_list_tag'
|-CXXRecordDecl 0x7fe162863258 <object_model_refined/2_constructors/03_class_with_a_virtual_function.cpp:1:1, line:3:1> line:1:8 referenced struct X definition
| |-CXXRecordDecl 0x7fe162863378 <col:1, col:8> col:8 implicit struct X
| |-CXXMethodDecl 0x7fe162863490 <line:2:5, col:31> col:18 referenced m1 'void (void) const' virtual pure
| |-CXXMethodDecl 0x7fe162863588 <line:1:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(const struct X &)' inline default noexcept-unevaluated 0x7fe162863588
| | `-ParmVarDecl 0x7fe1628636a0 <col:8> col:8 'const struct X &'
| |-CXXMethodDecl 0x7fe162863738 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct X &(struct X &&)' inline default noexcept-unevaluated 0x7fe162863738
| | `-ParmVarDecl 0x7fe162863850 <col:8> col:8 'struct X &&'
| |-CXXDestructorDecl 0x7fe1628638d8 <col:8> col:8 implicit ~X 'void (void)' inline default trivial noexcept-unevaluated 0x7fe1628638d8
| |-CXXConstructorDecl 0x7fe1638015b8 <col:8> col:8 implicit used constexpr X 'void (void) noexcept' inline default
| | `-CompoundStmt 0x7fe1640010f0 <col:8>
| |-CXXConstructorDecl 0x7fe163801698 <col:8> col:8 implicit constexpr X 'void (const struct X &)' inline default noexcept-unevaluated 0x7fe163801698
| | `-ParmVarDecl 0x7fe163801780 <col:8> col:8 'const struct X &'
| `-CXXConstructorDecl 0x7fe164000c00 <col:8> col:8 implicit constexpr X 'void (struct X &&)' inline default noexcept-unevaluated 0x7fe164000c00
|   `-ParmVarDecl 0x7fe164000d30 <col:8> col:8 'struct X &&'
|-FunctionDecl 0x7fe162863ac0 <line:5:1, col:33> col:6 used func 'void (const struct X &)'
| |-ParmVarDecl 0x7fe1628639f8 <col:11, col:20> col:20 used x 'const struct X &'
| `-CompoundStmt 0x7fe162863c28 <col:23, col:33>
|   `-CXXMemberCallExpr 0x7fe162863c00 <col:25, col:30> 'void'
|     `-MemberExpr 0x7fe162863bc8 <col:25, col:27> '<bound member function type>' .m1 0x7fe162863490
|       `-DeclRefExpr 0x7fe162863ba0 <col:25> 'const struct X' lvalue ParmVar 0x7fe1628639f8 'x' 'const struct X &'
|-CXXRecordDecl 0x7fe162863c48 <line:7:1, line:9:1> line:7:8 referenced struct Y definition
| |-public 'struct X'
| |-CXXRecordDecl 0x7fe162863da8 <col:1, col:8> col:8 implicit struct Y
| |-CXXMethodDecl 0x7fe162863e88 <line:8:5, col:31> col:10 used m1 'void (void) const'
| | |-CompoundStmt 0x7fe163800ab8 <col:30, col:31>
| | `-OverrideAttr 0x7fe162863f20 <col:21>
| |-CXXMethodDecl 0x7fe162863fc8 <line:7:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Y &(const struct Y &)' inline default noexcept-unevaluated 0x7fe162863fc8
| | `-ParmVarDecl 0x7fe1628640e0 <col:8> col:8 'const struct Y &'
| |-CXXMethodDecl 0x7fe163800800 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Y &(struct Y &&)' inline default noexcept-unevaluated 0x7fe163800800
| | `-ParmVarDecl 0x7fe163800920 <col:8> col:8 'struct Y &&'
| |-CXXDestructorDecl 0x7fe1638009a8 <col:8> col:8 implicit ~Y 'void (void)' inline default trivial noexcept-unevaluated 0x7fe1638009a8
| |-CXXConstructorDecl 0x7fe1638014b8 <col:8> col:8 implicit used constexpr Y 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7fe164001108 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7fe164001178 <col:8>
| |-CXXConstructorDecl 0x7fe164000d98 <col:8> col:8 implicit constexpr Y 'void (const struct Y &)' inline default noexcept-unevaluated 0x7fe164000d98
| | `-ParmVarDecl 0x7fe164000ec0 <col:8> col:8 'const struct Y &'
| `-CXXConstructorDecl 0x7fe164000f28 <col:8> col:8 implicit constexpr Y 'void (struct Y &&)' inline default noexcept-unevaluated 0x7fe164000f28
|   `-ParmVarDecl 0x7fe164001050 <col:8> col:8 'struct Y &&'
|-CXXRecordDecl 0x7fe163800ad0 <line:11:1, line:13:1> line:11:8 referenced struct Z definition
| |-public 'struct X'
| |-CXXRecordDecl 0x7fe163800c38 <col:1, col:8> col:8 implicit struct Z
| |-CXXMethodDecl 0x7fe163800d18 <line:12:5, col:31> col:10 used m1 'void (void) const'
| | |-CompoundStmt 0x7fe1638012b8 <col:30, col:31>
| | `-OverrideAttr 0x7fe163800db0 <col:21>
| |-CXXMethodDecl 0x7fe163800e58 <line:11:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Z &(const struct Z &)' inline default noexcept-unevaluated 0x7fe163800e58
| | `-ParmVarDecl 0x7fe163800f70 <col:8> col:8 'const struct Z &'
| |-CXXMethodDecl 0x7fe163801008 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Z &(struct Z &&)' inline default noexcept-unevaluated 0x7fe163801008
| | `-ParmVarDecl 0x7fe163801120 <col:8> col:8 'struct Z &&'
| |-CXXDestructorDecl 0x7fe1638011a8 <col:8> col:8 implicit ~Z 'void (void)' inline default trivial noexcept-unevaluated 0x7fe1638011a8
| |-CXXConstructorDecl 0x7fe1640013f8 <col:8> col:8 implicit used constexpr Z 'void (void) noexcept' inline default
| | |-CXXCtorInitializer 'struct X'
| | | `-CXXConstructExpr 0x7fe1640017f8 <col:8> 'struct X' 'void (void) noexcept'
| | `-CompoundStmt 0x7fe164001868 <col:8>
| |-CXXConstructorDecl 0x7fe1640014d8 <col:8> col:8 implicit constexpr Z 'void (const struct Z &)' inline default noexcept-unevaluated 0x7fe1640014d8
| | `-ParmVarDecl 0x7fe164001600 <col:8> col:8 'const struct Z &'
| `-CXXConstructorDecl 0x7fe164001668 <col:8> col:8 implicit constexpr Z 'void (struct Z &&)' inline default noexcept-unevaluated 0x7fe164001668
|   `-ParmVarDecl 0x7fe164001790 <col:8> col:8 'struct Z &&'
`-FunctionDecl 0x7fe163801328 <line:15:1, line:23:1> line:15:5 main 'int (void)'
  `-CompoundStmt 0x7fe164001a28 <line:16:1, line:23:1>
    |-DeclStmt 0x7fe1640011c0 <line:17:5, col:10>
    | `-VarDecl 0x7fe1638013f8 <col:5, col:9> col:7 used y 'struct Y' listinit
    |   `-CXXConstructExpr 0x7fe164001190 <col:7, col:9> 'struct Y' 'void (void) noexcept' zeroing
    |-CallExpr 0x7fe1640012c0 <line:18:5, col:11> 'void'
    | |-ImplicitCastExpr 0x7fe1640012a8 <col:5> 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7fe164001258 <col:5> 'void (const struct X &)' lvalue Function 0x7fe162863ac0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 0x7fe164001308 <col:10> 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 0x7fe1640012f0 <col:10> 'const struct Y' lvalue <NoOp>
    |     `-DeclRefExpr 0x7fe164001230 <col:10> 'struct Y' lvalue Var 0x7fe1638013f8 'y' 'struct Y'
    |-DeclStmt 0x7fe1640018b0 <line:20:5, col:10>
    | `-VarDecl 0x7fe164001338 <col:5, col:9> col:7 used z 'struct Z' listinit
    |   `-CXXConstructExpr 0x7fe164001880 <col:7, col:9> 'struct Z' 'void (void) noexcept' zeroing
    |-CallExpr 0x7fe164001988 <line:21:5, col:11> 'void'
    | |-ImplicitCastExpr 0x7fe164001970 <col:5> 'void (*)(const struct X &)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x7fe164001948 <col:5> 'void (const struct X &)' lvalue Function 0x7fe162863ac0 'func' 'void (const struct X &)'
    | `-ImplicitCastExpr 0x7fe1640019d0 <col:10> 'const struct X' lvalue <DerivedToBase (X)>
    |   `-ImplicitCastExpr 0x7fe1640019b8 <col:10> 'const struct Z' lvalue <NoOp>
    |     `-DeclRefExpr 0x7fe164001920 <col:10> 'struct Z' lvalue Var 0x7fe164001338 'z' 'struct Z'
    `-ReturnStmt 0x7fe164001a10 <line:22:5, col:12>
      `-IntegerLiteral 0x7fe1640019f0 <col:12> 'int' 0

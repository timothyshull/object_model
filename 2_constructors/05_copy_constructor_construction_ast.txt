TranslationUnitDecl 0x7fc35c0068d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct A definition
| |-CXXRecordDecl implicit referenced struct A
| |-FieldDecl referenced n 'int'
| |-CXXConstructorDecl used A 'void (int)'
| | |-ParmVarDecl used n 'int' cinit
| | | `-IntegerLiteral 'int' 1
| | |-CXXCtorInitializer Field 0x7fc35c03a628 'n' 'int'
| | | `-InitListExpr 'int'
| | |   `-ImplicitCastExpr 'int' <LValueToRValue>
| | |     `-DeclRefExpr 'int' lvalue ParmVar 0x7fc35c03a688 'n' 'int'
| | `-CompoundStmt
| |-CXXConstructorDecl used A 'void (const struct A &)'
| | |-ParmVarDecl used a 'const struct A &'
| | |-CXXCtorInitializer Field 0x7fc35c03a628 'n' 'int'
| | | `-InitListExpr 'int'
| | |   `-ImplicitCastExpr 'int' <LValueToRValue>
| | |     `-MemberExpr 'const int' lvalue .n 0x7fc35c03a628
| | |       `-DeclRefExpr 'const struct A' lvalue ParmVar 0x7fc35c03a888 'a' 'const struct A &'
| | `-CompoundStmt
| |-CXXDestructorDecl ~A 'void (void) noexcept' default trivial
| `-CXXMethodDecl > implicit operator= 'struct A &(const struct A &)' inline default trivial noexcept-unevaluated 0x7fc35c06a800
|   `-ParmVarDecl 'const struct A &'
|-CXXRecordDecl referenced struct B definition
| |-public 'struct A'
| |-CXXRecordDecl implicit referenced struct B
| |-CXXConstructorDecl implicit B 'void (struct B &&)' inline default noexcept-unevaluated 0x7fc35c03b058
| | `-ParmVarDecl 'struct B &&'
| |-CXXMethodDecl > implicit operator= 'struct B &(struct B &&)' inline default trivial noexcept-unevaluated 0x7fc35c03b218
| | `-ParmVarDecl 'struct B &&'
| |-CXXDestructorDecl implicit ~B 'void (void)' inline default trivial noexcept-unevaluated 0x7fc35c06a9a8
| |-CXXConstructorDecl implicit used B 'void (void) noexcept(false)' inline default
| | |-CXXCtorInitializer 'struct A'
| | | `-CXXConstructExpr 'struct A' 'void (int)'
| | |   `-CXXDefaultArgExpr 'int'
| | `-CompoundStmt
| `-CXXConstructorDecl implicit used B 'void (const struct B &) noexcept(false)' inline default
|   |-ParmVarDecl used 'const struct B &'
|   |-CXXCtorInitializer 'struct A'
|   | `-CXXConstructExpr 'struct A' 'void (const struct A &)'
|   |   `-ImplicitCastExpr 'const struct A' lvalue <UncheckedDerivedToBase (A)>
|   |     `-DeclRefExpr 'const struct B' lvalue ParmVar 0x7fc35c06b1f0 '' 'const struct B &'
|   `-CompoundStmt
|-CXXRecordDecl referenced struct C definition
| |-public 'struct B'
| |-CXXRecordDecl implicit referenced struct C
| |-CXXConstructorDecl used C 'void (void)'
| | |-CXXCtorInitializer 'struct B'
| | | `-CXXConstructExpr 'struct B' 'void (void) noexcept(false)' zeroing
| | `-CompoundStmt
| `-CXXConstructorDecl C 'void (const struct C &)' delete
|   `-ParmVarDecl 'const struct C &'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl used a1 'struct A' listinit
    |   `-CXXConstructExpr 'struct A' 'void (int)'
    |     `-IntegerLiteral 'int' 7
    |-DeclStmt
    | `-VarDecl a2 'struct A' listinit
    |   `-CXXConstructExpr 'struct A' 'void (const struct A &)'
    |     `-ImplicitCastExpr 'const struct A' lvalue <NoOp>
    |       `-DeclRefExpr 'struct A' lvalue Var 0x7fc35c06b538 'a1' 'struct A'
    |-DeclStmt
    | `-VarDecl used b 'struct B' callinit
    |   `-CXXConstructExpr 'struct B' 'void (void) noexcept(false)'
    |-DeclStmt
    | `-VarDecl b2 'struct B' cinit
    |   `-CXXConstructExpr 'struct B' 'void (const struct B &) noexcept(false)'
    |     `-ImplicitCastExpr 'const struct B' lvalue <NoOp>
    |       `-DeclRefExpr 'struct B' lvalue Var 0x7fc35c800e00 'b' 'struct B'
    |-DeclStmt
    | `-VarDecl a3 'struct A' cinit
    |   `-CXXConstructExpr 'struct A' 'void (const struct A &)'
    |     `-ImplicitCastExpr 'const struct A' lvalue <DerivedToBase (A)>
    |       `-ImplicitCastExpr 'const struct B' lvalue <NoOp>
    |         `-DeclRefExpr 'struct B' lvalue Var 0x7fc35c800e00 'b' 'struct B'
    |-DeclStmt
    | `-VarDecl va 'volatile struct A' listinit
    |   `-CXXConstructExpr 'volatile struct A' 'void (int)'
    |     `-IntegerLiteral 'int' 10
    |-DeclStmt
    | `-VarDecl c 'struct C' callinit
    |   `-CXXConstructExpr 'struct C' 'void (void)'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

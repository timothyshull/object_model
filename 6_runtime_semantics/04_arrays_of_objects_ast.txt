TranslationUnitDecl 0x7f91688324d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9168832a60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9168832740 '__int128'
|-TypedefDecl 0x7f9168832ad0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9168832760 'unsigned __int128'
|-TypedefDecl 0x7f9168832e18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9168832bc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f9168832b28 '__NSConstantString_tag'
|-TypedefDecl 0x7f9168832eb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9168832e70 'char *'
|   `-BuiltinType 0x7f9168832560 'char'
|-TypedefDecl 0x7f9168865600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9168833190 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9168832fa0 'struct __va_list_tag'
|     `-CXXRecord 0x7f9168832f08 '__va_list_tag'
|-CXXRecordDecl 0x7f9168865658 <object_model_refined/6_runtime_semantics/04_arrays_of_objects.cpp:1:1, line:4:1> line:1:8 referenced struct P definition
| |-CXXRecordDecl 0x7f9168865778 <col:1, col:8> col:8 implicit struct P
| |-FieldDecl 0x7f9168865828 <line:2:5, col:12> col:12 referenced x 'double'
| |-FieldDecl 0x7f9168865888 <line:3:5, col:12> col:12 referenced y 'double'
| |-CXXDestructorDecl 0x7f9168865c98 <line:1:8> col:8 implicit referenced ~P 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7f9168866038 <col:8> col:8 implicit used P 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7f91688911e8 <col:8>
| |-CXXConstructorDecl 0x7f9168866148 <col:8> col:8 implicit constexpr P 'void (const struct P &)' inline default trivial noexcept-unevaluated 0x7f9168866148
| | `-ParmVarDecl 0x7f9168866270 <col:8> col:8 'const struct P &'
| `-CXXConstructorDecl 0x7f9168866308 <col:8> col:8 implicit used constexpr P 'void (struct P &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x7f9168866430 <col:8> col:8 used 'struct P &&'
|   |-CXXCtorInitializer Field 0x7f9168865828 'x' 'double'
|   | `-ImplicitCastExpr 0x7f91688665c8 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f9168866590 <col:8> 'double' xvalue .x 0x7f9168865828
|   |     `-CXXStaticCastExpr 0x7f9168866560 <col:8> 'struct P' xvalue static_cast<struct P &&> <NoOp>
|   |       `-DeclRefExpr 0x7f9168866528 <col:8> 'struct P' lvalue ParmVar 0x7f9168866430 '' 'struct P &&'
|   |-CXXCtorInitializer Field 0x7f9168865888 'y' 'double'
|   | `-ImplicitCastExpr 0x7f9168890ec8 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f9168890e90 <col:8> 'double' xvalue .y 0x7f9168865888
|   |     `-CXXStaticCastExpr 0x7f9168890e60 <col:8> 'struct P' xvalue static_cast<struct P &&> <NoOp>
|   |       `-DeclRefExpr 0x7f9168890e28 <col:8> 'struct P' lvalue ParmVar 0x7f9168866430 '' 'struct P &&'
|   `-CompoundStmt 0x7f9168890f18 <col:8>
`-FunctionDecl 0x7f9168865948 <line:6:1, line:11:1> line:6:5 main 'int (void)'
  `-CompoundStmt 0x7f9168891280 <line:7:1, line:11:1>
    |-DeclStmt 0x7f9168891130 <line:8:5, col:61>
    | `-VarDecl 0x7f9168865b78 <col:5, col:60> col:7 pa1 'struct P [10]' cinit
    |   `-ExprWithCleanups 0x7f9168891118 <col:17, col:60> 'struct P [10]'
    |     `-InitListExpr 0x7f9168866498 <col:17, col:60> 'struct P [10]'
    |       |-array filler
    |       | `-InitListExpr 0x7f91688910a8 <col:60> 'struct P'
    |       |   |-ImplicitValueInitExpr 0x7f91688910f8 <<invalid sloc>> 'double'
    |       |   `-ImplicitValueInitExpr 0x7f9168891108 <<invalid sloc>> 'double'
    |       |-CXXConstructExpr 0x7f9168890f30 <col:18, col:20> 'struct P' 'void (struct P &&) noexcept' elidable
    |       | `-MaterializeTemporaryExpr 0x7f91688664d8 <col:18, col:20> 'struct P' xvalue
    |       |   `-CXXFunctionalCastExpr 0x7f9168865de0 <col:18, col:20> 'struct P' functional cast to struct P <NoOp>
    |       |     `-InitListExpr 0x7f9168865c28 <col:19, col:20> 'struct P'
    |       |       |-ImplicitValueInitExpr 0x7f9168865c78 <<invalid sloc>> 'double'
    |       |       `-ImplicitValueInitExpr 0x7f9168865c88 <<invalid sloc>> 'double'
    |       |-CXXConstructExpr 0x7f9168890f88 <col:23, col:33> 'struct P' 'void (struct P &&) noexcept' elidable
    |       | `-MaterializeTemporaryExpr 0x7f9168890f70 <col:23, col:33> 'struct P' xvalue
    |       |   `-CXXFunctionalCastExpr 0x7f9168865ef8 <col:23, col:33> 'struct P' functional cast to struct P <NoOp>
    |       |     `-InitListExpr 0x7f9168865ea8 <col:24, col:33> 'struct P'
    |       |       |-FloatingLiteral 0x7f9168865e18 <col:25> 'double' 1.000000e+00
    |       |       `-FloatingLiteral 0x7f9168865e38 <col:30> 'double' 1.000000e+00
    |       `-InitListExpr 0x7f9168890fd0 <col:36, col:59> 'struct P'
    |         |-ImplicitCastExpr 0x7f9168891040 <col:36, col:59> 'double' <FloatingCast>
    |         | `-CXXStaticCastExpr 0x7f9168865f90 <col:36, col:59> 'float' static_cast<float> <NoOp>
    |         |   `-ImplicitCastExpr 0x7f9168865f78 <col:55, col:56> 'float' <FloatingCast>
    |         |     `-UnaryOperator 0x7f9168865f40 <col:55, col:56> 'double' prefix '-'
    |         |       `-FloatingLiteral 0x7f9168865f20 <col:56> 'double' 1.000000e+00
    |         `-ImplicitValueInitExpr 0x7f9168891058 <<invalid sloc>> 'double'
    |-DeclStmt 0x7f9168891230 <line:9:5, col:14>
    | `-VarDecl 0x7f9168891188 <col:5, col:13> col:7 pa2 'struct P [10]' callinit
    |   `-CXXConstructExpr 0x7f9168891200 <col:7> 'struct P [10]' 'void (void) noexcept'
    `-ReturnStmt 0x7f9168891268 <line:10:5, col:12>
      `-IntegerLiteral 0x7f9168891248 <col:12> 'int' 0

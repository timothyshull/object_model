TranslationUnitDecl 0x7f908c0326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f908c032c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f908c032940 '__int128'
|-TypedefDecl 0x7f908c032cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f908c032960 'unsigned __int128'
|-TypedefDecl 0x7f908c033018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f908c032dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f908c032d28 '__NSConstantString_tag'
|-TypedefDecl 0x7f908c0330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f908c033070 'char *'
|   `-BuiltinType 0x7f908c032760 'char'
|-TypedefDecl 0x7f908c065c00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f908c033390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f908c0331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f908c033108 '__va_list_tag'
|-CXXRecordDecl 0x7f908c065c58 <object_model_refined/6_runtime_semantics/04_arrays_of_objects.cpp:1:1, line:4:1> line:1:8 referenced struct P definition
| |-CXXRecordDecl 0x7f908c065d78 <col:1, col:8> col:8 implicit struct P
| |-FieldDecl 0x7f908c065e28 <line:2:5, col:12> col:12 referenced x 'double'
| |-FieldDecl 0x7f908c065e88 <line:3:5, col:12> col:12 referenced y 'double'
| |-CXXDestructorDecl 0x7f908c0662a8 <line:1:8> col:8 implicit referenced ~P 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7f908c066648 <col:8> col:8 implicit used P 'void (void) noexcept' inline default trivial
| | `-CompoundStmt 0x7f908c0917e8 <col:8>
| |-CXXConstructorDecl 0x7f908c066758 <col:8> col:8 implicit constexpr P 'void (const struct P &)' inline default trivial noexcept-unevaluated 0x7f908c066758
| | `-ParmVarDecl 0x7f908c066880 <col:8> col:8 'const struct P &'
| `-CXXConstructorDecl 0x7f908c066918 <col:8> col:8 implicit used constexpr P 'void (struct P &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x7f908c066a40 <col:8> col:8 used 'struct P &&'
|   |-CXXCtorInitializer Field 0x7f908c065e28 'x' 'double'
|   | `-ImplicitCastExpr 0x7f908c066bd8 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f908c066ba0 <col:8> 'double' xvalue .x 0x7f908c065e28
|   |     `-CXXStaticCastExpr 0x7f908c066b70 <col:8> 'struct P' xvalue static_cast<struct P &&> <NoOp>
|   |       `-DeclRefExpr 0x7f908c066b38 <col:8> 'struct P' lvalue ParmVar 0x7f908c066a40 '' 'struct P &&'
|   |-CXXCtorInitializer Field 0x7f908c065e88 'y' 'double'
|   | `-ImplicitCastExpr 0x7f908c0914c8 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f908c091490 <col:8> 'double' xvalue .y 0x7f908c065e88
|   |     `-CXXStaticCastExpr 0x7f908c091460 <col:8> 'struct P' xvalue static_cast<struct P &&> <NoOp>
|   |       `-DeclRefExpr 0x7f908c091428 <col:8> 'struct P' lvalue ParmVar 0x7f908c066a40 '' 'struct P &&'
|   `-CompoundStmt 0x7f908c091518 <col:8>
`-FunctionDecl 0x7f908c065f48 <line:6:1, line:11:1> line:6:5 main 'int (void)'
  `-CompoundStmt 0x7f908c091880 <line:7:1, line:11:1>
    |-DeclStmt 0x7f908c091730 <line:8:5, col:61>
    | `-VarDecl 0x7f908c066188 <col:5, col:60> col:7 pa1 'struct P [10]' cinit
    |   `-ExprWithCleanups 0x7f908c091718 <col:17, col:60> 'struct P [10]'
    |     `-InitListExpr 0x7f908c066aa8 <col:17, col:60> 'struct P [10]'
    |       |-array filler
    |       | `-InitListExpr 0x7f908c0916a8 <col:60> 'struct P'
    |       |   |-ImplicitValueInitExpr 0x7f908c0916f8 <<invalid sloc>> 'double'
    |       |   `-ImplicitValueInitExpr 0x7f908c091708 <<invalid sloc>> 'double'
    |       |-CXXConstructExpr 0x7f908c091530 <col:18, col:20> 'struct P' 'void (struct P &&) noexcept' elidable
    |       | `-MaterializeTemporaryExpr 0x7f908c066ae8 <col:18, col:20> 'struct P' xvalue
    |       |   `-CXXFunctionalCastExpr 0x7f908c0663f0 <col:18, col:20> 'struct P' functional cast to struct P <NoOp>
    |       |     `-InitListExpr 0x7f908c066238 <col:19, col:20> 'struct P'
    |       |       |-ImplicitValueInitExpr 0x7f908c066288 <<invalid sloc>> 'double'
    |       |       `-ImplicitValueInitExpr 0x7f908c066298 <<invalid sloc>> 'double'
    |       |-CXXConstructExpr 0x7f908c091588 <col:23, col:33> 'struct P' 'void (struct P &&) noexcept' elidable
    |       | `-MaterializeTemporaryExpr 0x7f908c091570 <col:23, col:33> 'struct P' xvalue
    |       |   `-CXXFunctionalCastExpr 0x7f908c066508 <col:23, col:33> 'struct P' functional cast to struct P <NoOp>
    |       |     `-InitListExpr 0x7f908c0664b8 <col:24, col:33> 'struct P'
    |       |       |-FloatingLiteral 0x7f908c066428 <col:25> 'double' 1.000000e+00
    |       |       `-FloatingLiteral 0x7f908c066448 <col:30> 'double' 1.000000e+00
    |       `-InitListExpr 0x7f908c0915d0 <col:36, col:59> 'struct P'
    |         |-ImplicitCastExpr 0x7f908c091640 <col:36, col:59> 'double' <FloatingCast>
    |         | `-CXXStaticCastExpr 0x7f908c0665a0 <col:36, col:59> 'float' static_cast<float> <NoOp>
    |         |   `-ImplicitCastExpr 0x7f908c066588 <col:55, col:56> 'float' <FloatingCast>
    |         |     `-UnaryOperator 0x7f908c066550 <col:55, col:56> 'double' prefix '-'
    |         |       `-FloatingLiteral 0x7f908c066530 <col:56> 'double' 1.000000e+00
    |         `-ImplicitValueInitExpr 0x7f908c091658 <<invalid sloc>> 'double'
    |-DeclStmt 0x7f908c091830 <line:9:5, col:14>
    | `-VarDecl 0x7f908c091788 <col:5, col:13> col:7 pa2 'struct P [10]' callinit
    |   `-CXXConstructExpr 0x7f908c091800 <col:7> 'struct P [10]' 'void (void) noexcept'
    `-ReturnStmt 0x7f908c091868 <line:10:5, col:12>
      `-IntegerLiteral 0x7f908c091848 <col:12> 'int' 0

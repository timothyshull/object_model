TranslationUnitDecl 0x7ffeed0326d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct P definition
| |-CXXRecordDecl implicit struct P
| |-FieldDecl referenced x 'double'
| |-FieldDecl referenced y 'double'
| |-CXXDestructorDecl implicit referenced ~P 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl implicit used P 'void (void) noexcept' inline default trivial
| | `-CompoundStmt
| |-CXXConstructorDecl implicit constexpr P 'void (const struct P &)' inline default trivial noexcept-unevaluated 0x7ffeed806358
| | `-ParmVarDecl 'const struct P &'
| `-CXXConstructorDecl implicit used constexpr P 'void (struct P &&) noexcept' inline default trivial
|   |-ParmVarDecl used 'struct P &&'
|   |-CXXCtorInitializer Field 0x7ffeed805a28 'x' 'double'
|   | `-ImplicitCastExpr 'double' <LValueToRValue>
|   |   `-MemberExpr 'double' xvalue .x 0x7ffeed805a28
|   |     `-CXXStaticCastExpr 'struct P' xvalue static_cast<struct P &&> <NoOp>
|   |       `-DeclRefExpr 'struct P' lvalue ParmVar 0x7ffeed806640 '' 'struct P &&'
|   |-CXXCtorInitializer Field 0x7ffeed805a88 'y' 'double'
|   | `-ImplicitCastExpr 'double' <LValueToRValue>
|   |   `-MemberExpr 'double' xvalue .y 0x7ffeed805a88
|   |     `-CXXStaticCastExpr 'struct P' xvalue static_cast<struct P &&> <NoOp>
|   |       `-DeclRefExpr 'struct P' lvalue ParmVar 0x7ffeed806640 '' 'struct P &&'
|   `-CompoundStmt
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-DeclStmt
    | `-VarDecl pa1 'struct P [10]' cinit
    |   `-ExprWithCleanups 'struct P [10]'
    |     `-InitListExpr 'struct P [10]'
    |       |-array filler
    |       | `-InitListExpr 'struct P'
    |       |   |-ImplicitValueInitExpr 'double'
    |       |   `-ImplicitValueInitExpr 'double'
    |       |-CXXConstructExpr 'struct P' 'void (struct P &&) noexcept' elidable
    |       | `-MaterializeTemporaryExpr 'struct P' xvalue
    |       |   `-CXXFunctionalCastExpr 'struct P' functional cast to struct P <NoOp>
    |       |     `-InitListExpr 'struct P'
    |       |       |-ImplicitValueInitExpr 'double'
    |       |       `-ImplicitValueInitExpr 'double'
    |       |-CXXConstructExpr 'struct P' 'void (struct P &&) noexcept' elidable
    |       | `-MaterializeTemporaryExpr 'struct P' xvalue
    |       |   `-CXXFunctionalCastExpr 'struct P' functional cast to struct P <NoOp>
    |       |     `-InitListExpr 'struct P'
    |       |       |-FloatingLiteral 'double' 1.000000e+00
    |       |       `-FloatingLiteral 'double' 1.000000e+00
    |       `-InitListExpr 'struct P'
    |         |-CXXStaticCastExpr 'double' static_cast<double> <NoOp>
    |         | `-ImplicitCastExpr 'double' <IntegralToFloating>
    |         |   `-UnaryOperator 'int' prefix '-'
    |         |     `-IntegerLiteral 'int' 1
    |         `-ImplicitValueInitExpr 'double'
    |-DeclStmt
    | `-VarDecl pa2 'struct P [10]' callinit
    |   `-CXXConstructExpr 'struct P [10]' 'void (void) noexcept'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

TranslationUnitDecl 0x7f930e0326d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f930e032c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f930e032940 '__int128'
|-TypedefDecl 0x7f930e032cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f930e032960 'unsigned __int128'
|-TypedefDecl 0x7f930e033018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f930e032dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f930e032d28 '__NSConstantString_tag'
|-TypedefDecl 0x7f930e0330b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f930e033070 'char *'
|   `-BuiltinType 0x7f930e032760 'char'
|-TypedefDecl 0x7f930f028600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f930e033390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f930e0331a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f930e033108 '__va_list_tag'
|-CXXRecordDecl 0x7f930f028658 <object_model/5_ctor_dtor_semantics/04_virtual_inheritance.cpp:2:1, line:6:1> line:2:8 referenced struct B1 definition
| |-CXXRecordDecl 0x7f930f028778 <col:1, col:8> col:8 implicit referenced struct B1
| |-CXXConstructorDecl 0x7f930f0288b0 <line:3:5, col:11> col:5 used B1 'void (void)'
| | `-CompoundStmt 0x7f930f028c68 <col:10, col:11>
| |-CXXDestructorDecl 0x7f930f0289a8 <line:5:5, col:20> col:13 used ~B1 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f930f028cb0 <col:19, col:20>
| |-CXXMethodDecl 0x7f930f028ae8 <line:2:8, <invalid sloc>> col:8 implicit operator= 'struct B1 &(const struct B1 &)' inline default noexcept-unevaluated 0x7f930f028ae8
| | `-ParmVarDecl 0x7f930f028c00 <col:8> col:8 'const struct B1 &'
| `-CXXConstructorDecl 0x7f930f0580d8 <col:8> col:8 implicit constexpr B1 'void (const struct B1 &)' inline default noexcept-unevaluated 0x7f930f0580d8
|   `-ParmVarDecl 0x7f930f058200 <col:8> col:8 'const struct B1 &'
|-FunctionDecl 0x7f930f028d08 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7f930f028de8 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f930f028da0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f930f028e50 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7f930f028f30 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f930f028ee8 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f930f029018 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7f930f0290f8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f930f0290b0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f930f029160 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7f930f029240 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f930f0291f8 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7f930f0292a8 <line:8:1, line:12:1> line:8:8 referenced struct B2 definition
| |-virtual public 'struct B1'
| |-CXXRecordDecl 0x7f930f029420 <col:1, col:8> col:8 implicit referenced struct B2
| |-CXXConstructorDecl 0x7f930f029528 <line:9:5, col:11> col:5 used B2 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 0x7f930f058268 <col:5> 'struct B1' 'void (void)'
| | `-CompoundStmt 0x7f930f0582d8 <col:10, col:11>
| |-CXXDestructorDecl 0x7f930f057e20 <line:11:5, col:20> col:13 used ~B2 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f930f0582f0 <col:19, col:20>
| |-CXXMethodDecl 0x7f930f057f58 <line:8:8, <invalid sloc>> col:8 implicit operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7f930f057f58
| | `-ParmVarDecl 0x7f930f058070 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7f930e026b20 <col:8> col:8 implicit B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7f930e026b20
|   `-ParmVarDecl 0x7f930e026c50 <col:8> col:8 'const struct B2 &'
|-CXXRecordDecl 0x7f930f058308 <line:14:1, line:18:1> line:14:8 referenced struct B3 definition
| |-virtual public 'struct B1'
| |-CXXRecordDecl 0x7f930f058480 <col:1, col:8> col:8 implicit referenced struct B3
| |-CXXConstructorDecl 0x7f930f058588 <line:15:5, col:11> col:5 used B3 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 0x7f930f058938 <col:5> 'struct B1' 'void (void)'
| | `-CompoundStmt 0x7f930f0589a8 <col:10, col:11>
| |-CXXDestructorDecl 0x7f930f058680 <line:17:5, col:20> col:13 used ~B3 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f930f0589c0 <col:19, col:20>
| |-CXXMethodDecl 0x7f930f0587b8 <line:14:8, <invalid sloc>> col:8 implicit operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7f930f0587b8
| | `-ParmVarDecl 0x7f930f0588d0 <col:8> col:8 'const struct B3 &'
| `-CXXConstructorDecl 0x7f930e026d20 <col:8> col:8 implicit B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7f930e026d20
|   `-ParmVarDecl 0x7f930e026e50 <col:8> col:8 'const struct B3 &'
|-CXXRecordDecl 0x7f930f0589d8 <line:20:1, line:24:1> line:20:8 referenced struct D2 definition
| |-public 'struct B2'
| |-public 'struct B3'
| |-CXXRecordDecl 0x7f930f058b90 <col:1, col:8> col:8 implicit referenced struct D2
| |-CXXConstructorDecl 0x7f930f058c98 <line:21:5, col:11> col:5 used D2 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 0x7f930e026ab8 <col:5> 'struct B1' 'void (void)'
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7f930e026cb8 <col:5> 'struct B2' 'void (void)'
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 0x7f930e026eb8 <col:5> 'struct B3' 'void (void)'
| | `-CompoundStmt 0x7f930e026f38 <col:10, col:11>
| |-CXXDestructorDecl 0x7f930e026800 <line:23:5, col:20> col:13 used ~D2 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f930e026f50 <col:19, col:20>
| |-CXXMethodDecl 0x7f930e026938 <line:20:8, <invalid sloc>> col:8 implicit operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7f930e026938
| | `-ParmVarDecl 0x7f930e026a50 <col:8> col:8 'const struct D2 &'
| `-CXXConstructorDecl 0x7f930e03b578 <col:8> col:8 implicit D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7f930e03b578
|   `-ParmVarDecl 0x7f930e03b6a0 <col:8> col:8 'const struct D2 &'
|-CXXRecordDecl 0x7f930e026f68 <line:27:1, line:50:1> line:27:7 referenced class P definition
| |-CXXRecordDecl 0x7f930e027088 <col:1, col:7> col:7 implicit referenced class P
| |-AccessSpecDecl 0x7f930e027120 <line:28:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f930e0271b8 <line:29:5, col:10> col:5 used P 'void (void)'
| | |-CXXCtorInitializer Field 0x7f930e028908 '_x' 'double'
| | | `-CXXDefaultInitExpr 0x7f930e028a28 <col:5> 'double'
| | |-CXXCtorInitializer Field 0x7f930e028968 '_y' 'double'
| | | `-CXXDefaultInitExpr 0x7f930e028a70 <col:5> 'double'
| | `-CompoundStmt 0x7f930e028ac8 <col:9, col:10>
| |-CXXConstructorDecl 0x7f930e0273c0 <line:31:5, col:43> col:5 used P 'void (double, double)'
| | |-ParmVarDecl 0x7f930e027278 <col:7, col:14> col:14 used x 'double'
| | |-ParmVarDecl 0x7f930e0272f0 <col:17, col:24> col:24 used y 'double'
| | |-CXXCtorInitializer Field 0x7f930e028908 '_x' 'double'
| | | `-InitListExpr 0x7f930e028b50 <col:31, col:33> 'double'
| | |   `-ImplicitCastExpr 0x7f930e028b90 <col:32> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f930e028ae0 <col:32> 'double' lvalue ParmVar 0x7f930e027278 'x' 'double'
| | |-CXXCtorInitializer Field 0x7f930e028968 '_y' 'double'
| | | `-InitListExpr 0x7f930e028c48 <col:38, col:40> 'double'
| | |   `-ImplicitCastExpr 0x7f930e028c88 <col:39> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f930e028bd8 <col:39> 'double' lvalue ParmVar 0x7f930e0272f0 'y' 'double'
| | `-CompoundStmt 0x7f930e028ce0 <col:42, col:43>
| |-CXXConstructorDecl 0x7f930e027580 <line:33:5, col:47> col:5 used P 'void (const class P &)'
| | |-ParmVarDecl 0x7f930e0274b8 <col:7, col:16> col:16 used rhs 'const class P &'
| | |-CXXCtorInitializer Field 0x7f930e028908 '_x' 'double'
| | | `-InitListExpr 0x7f930e028da0 <col:25, col:32> 'double'
| | |   `-ImplicitCastExpr 0x7f930e028de0 <col:26, col:30> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f930e028d20 <col:26, col:30> 'const double' lvalue ._x 0x7f930e028908
| | |       `-DeclRefExpr 0x7f930e028cf8 <col:26> 'const class P' lvalue ParmVar 0x7f930e0274b8 'rhs' 'const class P &'
| | |-CXXCtorInitializer Field 0x7f930e028968 '_y' 'double'
| | | `-InitListExpr 0x7f930e028ed0 <col:37, col:44> 'double'
| | |   `-ImplicitCastExpr 0x7f930e028f10 <col:38, col:42> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f930e028e50 <col:38, col:42> 'const double' lvalue ._y 0x7f930e028968
| | |       `-DeclRefExpr 0x7f930e028e28 <col:38> 'const class P' lvalue ParmVar 0x7f930e0274b8 'rhs' 'const class P &'
| | `-CompoundStmt 0x7f930e028f68 <col:46, col:47>
| |-CXXDestructorDecl 0x7f930e027680 <line:35:5, col:19> col:13 used ~P 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f930e028f80 <col:18, col:19>
| |-CXXMethodDecl 0x7f930e028828 <line:37:5, line:45:5> line:37:8 used operator= 'class P &(const class P &)'
| | |-ParmVarDecl 0x7f930e027730 <col:18, col:27> col:27 used rhs 'const class P &'
| | `-CompoundStmt 0x7f930e029338 <line:38:5, line:45:5>
| |   |-IfStmt 0x7f930e0290d0 <line:39:9, line:41:9>
| |   | |-<<<NULL>>>
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x7f930e029038 <line:39:13, col:21> '_Bool' '=='
| |   | | |-UnaryOperator 0x7f930e028fe8 <col:13, col:14> 'const class P *' prefix '&'
| |   | | | `-DeclRefExpr 0x7f930e028f98 <col:14> 'const class P' lvalue ParmVar 0x7f930e027730 'rhs' 'const class P &'
| |   | | `-ImplicitCastExpr 0x7f930e029020 <col:21> 'const class P *' <NoOp>
| |   | |   `-CXXThisExpr 0x7f930e029008 <col:21> 'class P *' this
| |   | |-CompoundStmt 0x7f930e0290b0 <col:27, line:41:9>
| |   | | `-ReturnStmt 0x7f930e029098 <line:40:13, col:21>
| |   | |   `-UnaryOperator 0x7f930e029078 <col:20, col:21> 'class P' lvalue prefix '*'
| |   | |     `-CXXThisExpr 0x7f930e029060 <col:21> 'class P *' this
| |   | `-<<<NULL>>>
| |   |-BinaryOperator 0x7f930e0291d0 <line:42:9, col:18> 'double' lvalue '='
| |   | |-MemberExpr 0x7f930e029120 <col:9> 'double' lvalue ->_x 0x7f930e028908
| |   | | `-CXXThisExpr 0x7f930e029108 <col:9> 'class P *' this
| |   | `-ImplicitCastExpr 0x7f930e0291b8 <col:14, col:18> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f930e029180 <col:14, col:18> 'const double' lvalue ._x 0x7f930e028908
| |   |     `-DeclRefExpr 0x7f930e029158 <col:14> 'const class P' lvalue ParmVar 0x7f930e027730 'rhs' 'const class P &'
| |   |-BinaryOperator 0x7f930e0292c0 <line:43:9, col:18> 'double' lvalue '='
| |   | |-MemberExpr 0x7f930e029210 <col:9> 'double' lvalue ->_y 0x7f930e028968
| |   | | `-CXXThisExpr 0x7f930e0291f8 <col:9> 'class P *' this
| |   | `-ImplicitCastExpr 0x7f930e0292a8 <col:14, col:18> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f930e029270 <col:14, col:18> 'const double' lvalue ._y 0x7f930e028968
| |   |     `-DeclRefExpr 0x7f930e029248 <col:14> 'const class P' lvalue ParmVar 0x7f930e027730 'rhs' 'const class P &'
| |   `-ReturnStmt 0x7f930e029320 <line:44:9, col:17>
| |     `-UnaryOperator 0x7f930e029300 <col:16, col:17> 'class P' lvalue prefix '*'
| |       `-CXXThisExpr 0x7f930e0292e8 <col:17> 'class P *' this
| |-AccessSpecDecl 0x7f930e0288c8 <line:47:1, col:8> col:1 private
| |-FieldDecl 0x7f930e028908 <line:48:5, col:17> col:12 referenced _x 'double'
| | `-FloatingLiteral 0x7f930e0289e8 <col:17> 'double' 0.000000e+00
| `-FieldDecl 0x7f930e028968 <line:49:5, col:17> col:12 referenced _y 'double'
|   `-FloatingLiteral 0x7f930e028a08 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7f930e029370 <line:52:1, line:76:1> line:52:7 referenced class P3 definition
| |-virtual public 'class P'
| |-CXXRecordDecl 0x7f930e0294f0 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7f930e029588 <line:53:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f930e029618 <line:54:5, col:11> col:5 used P3 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f930e029fb8 <col:5> 'class P' 'void (void)'
| | |-CXXCtorInitializer Field 0x7f930e029f10 '_z' 'double'
| | | `-CXXDefaultInitExpr 0x7f930e02a020 <col:5> 'double'
| | `-CompoundStmt 0x7f930e02a078 <col:10, col:11>
| |-CXXConstructorDecl 0x7f930e0298e0 <line:56:5, col:56> col:5 P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7f930e0296d8 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7f930e029750 <col:18, col:25> col:25 used y 'double'
| | |-ParmVarDecl 0x7f930e029800 <col:28, col:35> col:35 used z 'double'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f930e02a158 <col:40, col:46> 'class P' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7f930e02a128 <col:42> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7f930e02a090 <col:42> 'double' lvalue ParmVar 0x7f930e0296d8 'x' 'double'
| | |   `-ImplicitCastExpr 0x7f930e02a140 <col:45> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f930e02a0b8 <col:45> 'double' lvalue ParmVar 0x7f930e029750 'y' 'double'
| | |-CXXCtorInitializer Field 0x7f930e029f10 '_z' 'double'
| | | `-ImplicitCastExpr 0x7f930e02a218 <col:52> 'double' <LValueToRValue>
| | |   `-DeclRefExpr 0x7f930e02a1c0 <col:52> 'double' lvalue ParmVar 0x7f930e029800 'z' 'double'
| | `-CompoundStmt 0x7f930e02a268 <col:55, col:56>
| |-CXXConstructorDecl 0x7f930e029aa0 <line:58:5, col:45> col:5 P3 'void (const class P3 &)'
| | |-ParmVarDecl 0x7f930e0299d8 <col:8, col:18> col:18 used rhs 'const class P3 &'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f930e02a320 <col:25, col:30> 'class P' 'void (const class P &)'
| | |   `-ImplicitCastExpr 0x7f930e02a300 <col:27> 'const class P' lvalue <DerivedToBase (virtual P)>
| | |     `-DeclRefExpr 0x7f930e02a280 <col:27> 'const class P3' lvalue ParmVar 0x7f930e0299d8 'rhs' 'const class P3 &'
| | |-CXXCtorInitializer Field 0x7f930e029f10 '_z' 'double'
| | | `-InitListExpr 0x7f930e02a428 <col:35, col:42> 'double'
| | |   `-ImplicitCastExpr 0x7f930e02a468 <col:36, col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f930e02a3a8 <col:36, col:40> 'const double' lvalue ._z 0x7f930e029f10
| | |       `-DeclRefExpr 0x7f930e02a380 <col:36> 'const class P3' lvalue ParmVar 0x7f930e0299d8 'rhs' 'const class P3 &'
| | `-CompoundStmt 0x7f930e02a4c0 <col:44, col:45>
| |-CXXDestructorDecl 0x7f930e029ba0 <line:60:5, col:20> col:13 used ~P3 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f930e02a4d8 <col:19, col:20>
| |-CXXMethodDecl 0x7f930e029d40 <line:62:5, line:70:5> line:62:9 operator= 'class P3 &(const class P3 &)'
| | |-ParmVarDecl 0x7f930e029c50 <col:19, col:29> col:29 used rhs 'const class P3 &'
| | `-CompoundStmt 0x7f930e0384f0 <line:63:5, line:70:5>
| |   |-IfStmt 0x7f930e02a630 <line:64:9, line:66:9>
| |   | |-<<<NULL>>>
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x7f930e02a598 <line:64:13, col:21> '_Bool' '=='
| |   | | |-UnaryOperator 0x7f930e02a548 <col:13, col:14> 'const class P3 *' prefix '&'
| |   | | | `-DeclRefExpr 0x7f930e02a4f0 <col:14> 'const class P3' lvalue ParmVar 0x7f930e029c50 'rhs' 'const class P3 &'
| |   | | `-ImplicitCastExpr 0x7f930e02a580 <col:21> 'const class P3 *' <NoOp>
| |   | |   `-CXXThisExpr 0x7f930e02a568 <col:21> 'class P3 *' this
| |   | |-CompoundStmt 0x7f930e02a610 <col:27, line:66:9>
| |   | | `-ReturnStmt 0x7f930e02a5f8 <line:65:13, col:21>
| |   | |   `-UnaryOperator 0x7f930e02a5d8 <col:20, col:21> 'class P3' lvalue prefix '*'
| |   | |     `-CXXThisExpr 0x7f930e02a5c0 <col:21> 'class P3 *' this
| |   | `-<<<NULL>>>
| |   |-CXXMemberCallExpr 0x7f930e02a728 <line:67:9, col:31> 'class P' lvalue
| |   | |-MemberExpr 0x7f930e02a6b0 <col:9, col:26> '<bound member function type>' ->operator= 0x7f930e028828
| |   | | `-ImplicitCastExpr 0x7f930e02a758 <col:9> 'class P *' <UncheckedDerivedToBase (virtual P)>
| |   | |   `-CXXThisExpr 0x7f930e02a668 <col:9> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7f930e02a778 <col:28> 'const class P' lvalue <DerivedToBase (virtual P)>
| |   |   `-DeclRefExpr 0x7f930e02a700 <col:28> 'const class P3' lvalue ParmVar 0x7f930e029c50 'rhs' 'const class P3 &'
| |   |-BinaryOperator 0x7f930e038478 <line:68:9, col:18> 'double' lvalue '='
| |   | |-MemberExpr 0x7f930e02a7b0 <col:9> 'double' lvalue ->_z 0x7f930e029f10
| |   | | `-CXXThisExpr 0x7f930e02a798 <col:9> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7f930e038460 <col:14, col:18> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f930e038428 <col:14, col:18> 'const double' lvalue ._z 0x7f930e029f10
| |   |     `-DeclRefExpr 0x7f930e038400 <col:14> 'const class P3' lvalue ParmVar 0x7f930e029c50 'rhs' 'const class P3 &'
| |   `-ReturnStmt 0x7f930e0384d8 <line:69:9, col:17>
| |     `-UnaryOperator 0x7f930e0384b8 <col:16, col:17> 'class P3' lvalue prefix '*'
| |       `-CXXThisExpr 0x7f930e0384a0 <col:17> 'class P3 *' this
| |-CXXMethodDecl 0x7f930e029e38 <line:72:5, col:37> col:20 used z 'double (void)' virtual
| | `-CompoundStmt 0x7f930e0385a8 <col:24, col:37>
| |   `-ReturnStmt 0x7f930e038590 <col:26, col:33>
| |     `-ImplicitCastExpr 0x7f930e038578 <col:33> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7f930e038540 <col:33> 'double' lvalue ->_z 0x7f930e029f10
| |         `-CXXThisExpr 0x7f930e038528 <col:33> 'class P3 *' this
| |-AccessSpecDecl 0x7f930e029ed0 <line:74:1, col:10> col:1 protected
| `-FieldDecl 0x7f930e029f10 <line:75:5, col:17> col:12 referenced _z 'double'
|   `-FloatingLiteral 0x7f930e029f98 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7f930e0385c8 <line:78:1, line:83:1> line:78:7 referenced class V definition
| |-virtual public 'class P'
| |-CXXRecordDecl 0x7f930e038740 <col:1, col:7> col:7 implicit referenced class V
| |-AccessSpecDecl 0x7f930e0387d8 <line:79:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f930e038868 <line:80:5, col:10> col:5 used V 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f930e038c18 <col:5> 'class P' 'void (void)'
| | `-CompoundStmt 0x7f930e038c88 <col:9, col:10>
| |-CXXDestructorDecl 0x7f930e038960 <line:82:5, col:11> col:5 used ~V 'void (void) noexcept'
| | `-CompoundStmt 0x7f930e038ca0 <col:10, col:11>
| |-CXXMethodDecl 0x7f930e038a98 <line:78:7, <invalid sloc>> col:7 implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7f930e038a98
| | `-ParmVarDecl 0x7f930e038bb0 <col:7> col:7 'const class V &'
| `-CXXConstructorDecl 0x7f930e03a838 <col:7> col:7 implicit V 'void (const class V &)' inline default noexcept-unevaluated 0x7f930e03a838
|   `-ParmVarDecl 0x7f930e03a960 <col:7> col:7 'const class V &'
|-CXXRecordDecl 0x7f930e038cb8 <line:85:1, line:90:1> line:85:7 referenced class V3 definition
| |-public 'class P3'
| |-public 'class V'
| |-CXXRecordDecl 0x7f930e038e70 <col:1, col:7> col:7 implicit referenced class V3
| |-AccessSpecDecl 0x7f930e038f08 <line:86:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f930e038f98 <line:87:5, col:11> col:5 used V3 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f930e039348 <col:5> 'class P' 'void (void)'
| | |-CXXCtorInitializer 'class P3'
| | | `-CXXConstructExpr 0x7f930e0393b0 <col:5> 'class P3' 'void (void)'
| | |-CXXCtorInitializer 'class V'
| | | `-CXXConstructExpr 0x7f930e03a9c8 <col:5> 'class V' 'void (void)'
| | `-CompoundStmt 0x7f930e03aa48 <col:10, col:11>
| |-CXXDestructorDecl 0x7f930e039090 <line:89:5, col:12> col:5 used ~V3 'void (void) noexcept'
| | `-CompoundStmt 0x7f930e03aa60 <col:11, col:12>
| |-CXXMethodDecl 0x7f930e0391c8 <line:85:7, <invalid sloc>> col:7 implicit operator= 'class V3 &(const class V3 &)' inline default noexcept-unevaluated 0x7f930e0391c8
| | `-ParmVarDecl 0x7f930e0392e0 <col:7> col:7 'const class V3 &'
| `-CXXConstructorDecl 0x7f930e03b130 <col:7> col:7 implicit V3 'void (const class V3 &)' inline default noexcept-unevaluated 0x7f930e03b130
|   `-ParmVarDecl 0x7f930e03b260 <col:7> col:7 'const class V3 &'
|-CXXRecordDecl 0x7f930e03aa78 <line:92:1, line:97:1> line:92:7 referenced class PV definition
| |-public 'class V3'
| |-CXXRecordDecl 0x7f930e03abf0 <col:1, col:7> col:7 implicit referenced class PV
| |-AccessSpecDecl 0x7f930e03ac88 <line:93:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f930e03ad18 <line:94:5, col:11> col:5 used PV 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f930e03b0c8 <col:5> 'class P' 'void (void)'
| | |-CXXCtorInitializer 'class V3'
| | | `-CXXConstructExpr 0x7f930e03b2c8 <col:5> 'class V3' 'void (void)'
| | `-CompoundStmt 0x7f930e03b340 <col:10, col:11>
| |-CXXDestructorDecl 0x7f930e03ae10 <line:96:5, col:12> col:5 used ~PV 'void (void) noexcept'
| | `-CompoundStmt 0x7f930e03b358 <col:11, col:12>
| |-CXXMethodDecl 0x7f930e03af48 <line:92:7, <invalid sloc>> col:7 implicit operator= 'class PV &(const class PV &)' inline default noexcept-unevaluated 0x7f930e03af48
| | `-ParmVarDecl 0x7f930e03b060 <col:7> col:7 'const class PV &'
| `-CXXConstructorDecl 0x7f930e03c840 <col:7> col:7 implicit PV 'void (const class PV &)' inline default noexcept-unevaluated 0x7f930e03c840
|   `-ParmVarDecl 0x7f930e03c970 <col:7> col:7 'const class PV &'
`-FunctionDecl 0x7f930e03b3c8 <line:99:1, line:108:1> line:99:5 main 'int (void)'
  `-CompoundStmt 0x7f930e03ca78 <line:100:1, line:108:1>
    |-CompoundStmt 0x7f930e03b750 <line:101:5, line:103:5>
    | `-DeclStmt 0x7f930e03b738 <line:102:9, col:16>
    |   `-VarDecl 0x7f930e03b4d8 <col:9, col:15> col:12 d2 'struct D2' listinit
    |     `-CXXConstructExpr 0x7f930e03b708 <col:12, col:15> 'struct D2' 'void (void)'
    |-CompoundStmt 0x7f930e03ca20 <line:104:5, line:106:5>
    | `-DeclStmt 0x7f930e03ca08 <line:105:9, col:16>
    |   `-VarDecl 0x7f930e03b780 <col:9, col:15> col:12 pv 'class PV' listinit
    |     `-CXXConstructExpr 0x7f930e03c9d8 <col:12, col:15> 'class PV' 'void (void)'
    `-ReturnStmt 0x7f930e03ca60 <line:107:5, col:12>
      `-IntegerLiteral 0x7f930e03ca40 <col:12> 'int' 0

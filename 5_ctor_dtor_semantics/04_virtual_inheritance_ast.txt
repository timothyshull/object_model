TranslationUnitDecl 0x7f930e0326d0
|-TypedefDecl implicit __int128_t '__int128'
| `-BuiltinType '__int128'
|-TypedefDecl implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 'unsigned __int128'
|-TypedefDecl implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 'struct __NSConstantString_tag'
|   `-CXXRecord '__NSConstantString_tag'
|-TypedefDecl implicit __builtin_ms_va_list 'char *'
| `-PointerType 'char *'
|   `-BuiltinType 'char'
|-TypedefDecl implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 'struct __va_list_tag [1]' 1
|   `-RecordType 'struct __va_list_tag'
|     `-CXXRecord '__va_list_tag'
|-CXXRecordDecl referenced struct B1 definition
| |-CXXRecordDecl implicit referenced struct B1
| |-CXXConstructorDecl used B1 'void (void)'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~B1 'void (void) noexcept' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'struct B1 &(const struct B1 &)' inline default noexcept-unevaluated 0x7f930f028ae8
| | `-ParmVarDecl 'const struct B1 &'
| `-CXXConstructorDecl implicit constexpr B1 'void (const struct B1 &)' inline default noexcept-unevaluated 0x7f930f0580d8
|   `-ParmVarDecl 'const struct B1 &'
|-FunctionDecl implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl implicit 'unsigned long'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-FunctionDecl implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl implicit 'void *'
| `-VisibilityAttr Implicit Default
|-CXXRecordDecl referenced struct B2 definition
| |-virtual public 'struct B1'
| |-CXXRecordDecl implicit referenced struct B2
| |-CXXConstructorDecl used B2 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 'struct B1' 'void (void)'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~B2 'void (void) noexcept' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7f930f057f58
| | `-ParmVarDecl 'const struct B2 &'
| `-CXXConstructorDecl implicit B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7f930e026b20
|   `-ParmVarDecl 'const struct B2 &'
|-CXXRecordDecl referenced struct B3 definition
| |-virtual public 'struct B1'
| |-CXXRecordDecl implicit referenced struct B3
| |-CXXConstructorDecl used B3 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 'struct B1' 'void (void)'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~B3 'void (void) noexcept' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7f930f0587b8
| | `-ParmVarDecl 'const struct B3 &'
| `-CXXConstructorDecl implicit B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7f930e026d20
|   `-ParmVarDecl 'const struct B3 &'
|-CXXRecordDecl referenced struct D2 definition
| |-public 'struct B2'
| |-public 'struct B3'
| |-CXXRecordDecl implicit referenced struct D2
| |-CXXConstructorDecl used D2 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 'struct B1' 'void (void)'
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 'struct B2' 'void (void)'
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 'struct B3' 'void (void)'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~D2 'void (void) noexcept' virtual
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7f930e026938
| | `-ParmVarDecl 'const struct D2 &'
| `-CXXConstructorDecl implicit D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7f930e03b578
|   `-ParmVarDecl 'const struct D2 &'
|-CXXRecordDecl referenced class P definition
| |-CXXRecordDecl implicit referenced class P
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P 'void (void)'
| | |-CXXCtorInitializer Field 0x7f930e028908 '_x' 'double'
| | | `-CXXDefaultInitExpr 'double'
| | |-CXXCtorInitializer Field 0x7f930e028968 '_y' 'double'
| | | `-CXXDefaultInitExpr 'double'
| | `-CompoundStmt
| |-CXXConstructorDecl used P 'void (double, double)'
| | |-ParmVarDecl used x 'double'
| | |-ParmVarDecl used y 'double'
| | |-CXXCtorInitializer Field 0x7f930e028908 '_x' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7f930e027278 'x' 'double'
| | |-CXXCtorInitializer Field 0x7f930e028968 '_y' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7f930e0272f0 'y' 'double'
| | `-CompoundStmt
| |-CXXConstructorDecl used P 'void (const class P &)'
| | |-ParmVarDecl used rhs 'const class P &'
| | |-CXXCtorInitializer Field 0x7f930e028908 '_x' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue ._x 0x7f930e028908
| | |       `-DeclRefExpr 'const class P' lvalue ParmVar 0x7f930e0274b8 'rhs' 'const class P &'
| | |-CXXCtorInitializer Field 0x7f930e028968 '_y' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue ._y 0x7f930e028968
| | |       `-DeclRefExpr 'const class P' lvalue ParmVar 0x7f930e0274b8 'rhs' 'const class P &'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~P 'void (void) noexcept' virtual
| | `-CompoundStmt
| |-CXXMethodDecl used operator= 'class P &(const class P &)'
| | |-ParmVarDecl used rhs 'const class P &'
| | `-CompoundStmt
| |   |-IfStmt
| |   | |-<<<NULL>>>
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator '_Bool' '=='
| |   | | |-UnaryOperator 'const class P *' prefix '&'
| |   | | | `-DeclRefExpr 'const class P' lvalue ParmVar 0x7f930e027730 'rhs' 'const class P &'
| |   | | `-ImplicitCastExpr 'const class P *' <NoOp>
| |   | |   `-CXXThisExpr 'class P *' this
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-UnaryOperator 'class P' lvalue prefix '*'
| |   | |     `-CXXThisExpr 'class P *' this
| |   | `-<<<NULL>>>
| |   |-BinaryOperator 'double' lvalue '='
| |   | |-MemberExpr 'double' lvalue ->_x 0x7f930e028908
| |   | | `-CXXThisExpr 'class P *' this
| |   | `-ImplicitCastExpr 'double' <LValueToRValue>
| |   |   `-MemberExpr 'const double' lvalue ._x 0x7f930e028908
| |   |     `-DeclRefExpr 'const class P' lvalue ParmVar 0x7f930e027730 'rhs' 'const class P &'
| |   |-BinaryOperator 'double' lvalue '='
| |   | |-MemberExpr 'double' lvalue ->_y 0x7f930e028968
| |   | | `-CXXThisExpr 'class P *' this
| |   | `-ImplicitCastExpr 'double' <LValueToRValue>
| |   |   `-MemberExpr 'const double' lvalue ._y 0x7f930e028968
| |   |     `-DeclRefExpr 'const class P' lvalue ParmVar 0x7f930e027730 'rhs' 'const class P &'
| |   `-ReturnStmt
| |     `-UnaryOperator 'class P' lvalue prefix '*'
| |       `-CXXThisExpr 'class P *' this
| |-AccessSpecDecl private
| |-FieldDecl referenced _x 'double'
| | `-FloatingLiteral 'double' 0.000000e+00
| `-FieldDecl referenced _y 'double'
|   `-FloatingLiteral 'double' 0.000000e+00
|-CXXRecordDecl referenced class P3 definition
| |-virtual public 'class P'
| |-CXXRecordDecl implicit referenced class P3
| |-AccessSpecDecl public
| |-CXXConstructorDecl used P3 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 'class P' 'void (void)'
| | |-CXXCtorInitializer Field 0x7f930e029f10 '_z' 'double'
| | | `-CXXDefaultInitExpr 'double'
| | `-CompoundStmt
| |-CXXConstructorDecl P3 'void (double, double, double)'
| | |-ParmVarDecl used x 'double'
| | |-ParmVarDecl used y 'double'
| | |-ParmVarDecl used z 'double'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 'class P' 'void (double, double)'
| | |   |-ImplicitCastExpr 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 'double' lvalue ParmVar 0x7f930e0296d8 'x' 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-DeclRefExpr 'double' lvalue ParmVar 0x7f930e029750 'y' 'double'
| | |-CXXCtorInitializer Field 0x7f930e029f10 '_z' 'double'
| | | `-ImplicitCastExpr 'double' <LValueToRValue>
| | |   `-DeclRefExpr 'double' lvalue ParmVar 0x7f930e029800 'z' 'double'
| | `-CompoundStmt
| |-CXXConstructorDecl P3 'void (const class P3 &)'
| | |-ParmVarDecl used rhs 'const class P3 &'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 'class P' 'void (const class P &)'
| | |   `-ImplicitCastExpr 'const class P' lvalue <DerivedToBase (virtual P)>
| | |     `-DeclRefExpr 'const class P3' lvalue ParmVar 0x7f930e0299d8 'rhs' 'const class P3 &'
| | |-CXXCtorInitializer Field 0x7f930e029f10 '_z' 'double'
| | | `-InitListExpr 'double'
| | |   `-ImplicitCastExpr 'double' <LValueToRValue>
| | |     `-MemberExpr 'const double' lvalue ._z 0x7f930e029f10
| | |       `-DeclRefExpr 'const class P3' lvalue ParmVar 0x7f930e0299d8 'rhs' 'const class P3 &'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~P3 'void (void) noexcept' virtual
| | `-CompoundStmt
| |-CXXMethodDecl operator= 'class P3 &(const class P3 &)'
| | |-ParmVarDecl used rhs 'const class P3 &'
| | `-CompoundStmt
| |   |-IfStmt
| |   | |-<<<NULL>>>
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator '_Bool' '=='
| |   | | |-UnaryOperator 'const class P3 *' prefix '&'
| |   | | | `-DeclRefExpr 'const class P3' lvalue ParmVar 0x7f930e029c50 'rhs' 'const class P3 &'
| |   | | `-ImplicitCastExpr 'const class P3 *' <NoOp>
| |   | |   `-CXXThisExpr 'class P3 *' this
| |   | |-CompoundStmt
| |   | | `-ReturnStmt
| |   | |   `-UnaryOperator 'class P3' lvalue prefix '*'
| |   | |     `-CXXThisExpr 'class P3 *' this
| |   | `-<<<NULL>>>
| |   |-CXXMemberCallExpr 'class P' lvalue
| |   | |-MemberExpr '<bound member function type>' ->operator= 0x7f930e028828
| |   | | `-ImplicitCastExpr 'class P *' <UncheckedDerivedToBase (virtual P)>
| |   | |   `-CXXThisExpr 'class P3 *' this
| |   | `-ImplicitCastExpr 'const class P' lvalue <DerivedToBase (virtual P)>
| |   |   `-DeclRefExpr 'const class P3' lvalue ParmVar 0x7f930e029c50 'rhs' 'const class P3 &'
| |   |-BinaryOperator 'double' lvalue '='
| |   | |-MemberExpr 'double' lvalue ->_z 0x7f930e029f10
| |   | | `-CXXThisExpr 'class P3 *' this
| |   | `-ImplicitCastExpr 'double' <LValueToRValue>
| |   |   `-MemberExpr 'const double' lvalue ._z 0x7f930e029f10
| |   |     `-DeclRefExpr 'const class P3' lvalue ParmVar 0x7f930e029c50 'rhs' 'const class P3 &'
| |   `-ReturnStmt
| |     `-UnaryOperator 'class P3' lvalue prefix '*'
| |       `-CXXThisExpr 'class P3 *' this
| |-CXXMethodDecl used z 'double (void)' virtual
| | `-CompoundStmt
| |   `-ReturnStmt
| |     `-ImplicitCastExpr 'double' <LValueToRValue>
| |       `-MemberExpr 'double' lvalue ->_z 0x7f930e029f10
| |         `-CXXThisExpr 'class P3 *' this
| |-AccessSpecDecl protected
| `-FieldDecl referenced _z 'double'
|   `-FloatingLiteral 'double' 0.000000e+00
|-CXXRecordDecl referenced class V definition
| |-virtual public 'class P'
| |-CXXRecordDecl implicit referenced class V
| |-AccessSpecDecl public
| |-CXXConstructorDecl used V 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 'class P' 'void (void)'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~V 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7f930e038a98
| | `-ParmVarDecl 'const class V &'
| `-CXXConstructorDecl implicit V 'void (const class V &)' inline default noexcept-unevaluated 0x7f930e03a838
|   `-ParmVarDecl 'const class V &'
|-CXXRecordDecl referenced class V3 definition
| |-public 'class P3'
| |-public 'class V'
| |-CXXRecordDecl implicit referenced class V3
| |-AccessSpecDecl public
| |-CXXConstructorDecl used V3 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 'class P' 'void (void)'
| | |-CXXCtorInitializer 'class P3'
| | | `-CXXConstructExpr 'class P3' 'void (void)'
| | |-CXXCtorInitializer 'class V'
| | | `-CXXConstructExpr 'class V' 'void (void)'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~V3 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'class V3 &(const class V3 &)' inline default noexcept-unevaluated 0x7f930e0391c8
| | `-ParmVarDecl 'const class V3 &'
| `-CXXConstructorDecl implicit V3 'void (const class V3 &)' inline default noexcept-unevaluated 0x7f930e03b130
|   `-ParmVarDecl 'const class V3 &'
|-CXXRecordDecl referenced class PV definition
| |-public 'class V3'
| |-CXXRecordDecl implicit referenced class PV
| |-AccessSpecDecl public
| |-CXXConstructorDecl used PV 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 'class P' 'void (void)'
| | |-CXXCtorInitializer 'class V3'
| | | `-CXXConstructExpr 'class V3' 'void (void)'
| | `-CompoundStmt
| |-CXXDestructorDecl used ~PV 'void (void) noexcept'
| | `-CompoundStmt
| |-CXXMethodDecl > implicit operator= 'class PV &(const class PV &)' inline default noexcept-unevaluated 0x7f930e03af48
| | `-ParmVarDecl 'const class PV &'
| `-CXXConstructorDecl implicit PV 'void (const class PV &)' inline default noexcept-unevaluated 0x7f930e03c840
|   `-ParmVarDecl 'const class PV &'
`-FunctionDecl main 'int (void)'
  `-CompoundStmt
    |-CompoundStmt
    | `-DeclStmt
    |   `-VarDecl d2 'struct D2' listinit
    |     `-CXXConstructExpr 'struct D2' 'void (void)'
    |-CompoundStmt
    | `-DeclStmt
    |   `-VarDecl pv 'class PV' listinit
    |     `-CXXConstructExpr 'class PV' 'void (void)'
    `-ReturnStmt
      `-IntegerLiteral 'int' 0

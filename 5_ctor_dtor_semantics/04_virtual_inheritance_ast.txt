TranslationUnitDecl 0x7f8f070186d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8f07018c60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8f07018940 '__int128'
|-TypedefDecl 0x7f8f07018cd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8f07018960 'unsigned __int128'
|-TypedefDecl 0x7f8f07019018 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8f07018dc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f8f07018d28 '__NSConstantString_tag'
|-TypedefDecl 0x7f8f070190b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8f07019070 'char *'
|   `-BuiltinType 0x7f8f07018760 'char'
|-TypedefDecl 0x7f8f07803c00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8f07019390 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8f070191a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f8f07019108 '__va_list_tag'
|-CXXRecordDecl 0x7f8f07803c58 </Users/tskull/Documents/Programming/Cpp/object_model_refined/5_ctor_dtor_semantics/04_virtual_inheritance.cpp:2:1, line:6:1> line:2:8 referenced struct B1 definition
| |-CXXRecordDecl 0x7f8f07803d78 <col:1, col:8> col:8 implicit referenced struct B1
| |-CXXConstructorDecl 0x7f8f07803eb0 <line:3:5, col:11> col:5 used B1 'void (void)'
| | `-CompoundStmt 0x7f8f07804268 <col:10, col:11>
| |-CXXDestructorDecl 0x7f8f07803fa8 <line:5:5, col:20> col:13 used ~B1 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f8f078042b0 <col:19, col:20>
| |-CXXMethodDecl 0x7f8f078040e8 <line:2:8, <invalid sloc>> col:8 implicit operator= 'struct B1 &(const struct B1 &)' inline default noexcept-unevaluated 0x7f8f078040e8
| | `-ParmVarDecl 0x7f8f07804200 <col:8> col:8 'const struct B1 &'
| `-CXXConstructorDecl 0x7f8f078336d8 <col:8> col:8 implicit constexpr B1 'void (const struct B1 &)' inline default noexcept-unevaluated 0x7f8f078336d8
|   `-ParmVarDecl 0x7f8f07833800 <col:8> col:8 'const struct B1 &'
|-FunctionDecl 0x7f8f07804308 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7f8f078043e8 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f8f078043a0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f8f07804450 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7f8f07804530 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f8f078044e8 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f8f07804618 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7f8f078046f8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f8f078046b0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f8f07804760 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7f8f07804840 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f8f078047f8 <<invalid sloc>> Implicit Default
|-CXXRecordDecl 0x7f8f078048a8 <line:8:1, line:12:1> line:8:8 referenced struct B2 definition
| |-virtual public 'struct B1'
| |-CXXRecordDecl 0x7f8f07804a20 <col:1, col:8> col:8 implicit referenced struct B2
| |-CXXConstructorDecl 0x7f8f07804b28 <line:9:5, col:11> col:5 used B2 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 0x7f8f07833868 <col:5> 'struct B1' 'void (void)'
| | `-CompoundStmt 0x7f8f078338d8 <col:10, col:11>
| |-CXXDestructorDecl 0x7f8f07833420 <line:11:5, col:20> col:13 used ~B2 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f8f078338f0 <col:19, col:20>
| |-CXXMethodDecl 0x7f8f07833558 <line:8:8, <invalid sloc>> col:8 implicit operator= 'struct B2 &(const struct B2 &)' inline default noexcept-unevaluated 0x7f8f07833558
| | `-ParmVarDecl 0x7f8f07833670 <col:8> col:8 'const struct B2 &'
| `-CXXConstructorDecl 0x7f8f07836320 <col:8> col:8 implicit B2 'void (const struct B2 &)' inline default noexcept-unevaluated 0x7f8f07836320
|   `-ParmVarDecl 0x7f8f07836450 <col:8> col:8 'const struct B2 &'
|-CXXRecordDecl 0x7f8f07833908 <line:14:1, line:18:1> line:14:8 referenced struct B3 definition
| |-virtual public 'struct B1'
| |-CXXRecordDecl 0x7f8f07833a80 <col:1, col:8> col:8 implicit referenced struct B3
| |-CXXConstructorDecl 0x7f8f07833b88 <line:15:5, col:11> col:5 used B3 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 0x7f8f07833f38 <col:5> 'struct B1' 'void (void)'
| | `-CompoundStmt 0x7f8f07833fa8 <col:10, col:11>
| |-CXXDestructorDecl 0x7f8f07833c80 <line:17:5, col:20> col:13 used ~B3 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f8f07833fc0 <col:19, col:20>
| |-CXXMethodDecl 0x7f8f07833db8 <line:14:8, <invalid sloc>> col:8 implicit operator= 'struct B3 &(const struct B3 &)' inline default noexcept-unevaluated 0x7f8f07833db8
| | `-ParmVarDecl 0x7f8f07833ed0 <col:8> col:8 'const struct B3 &'
| `-CXXConstructorDecl 0x7f8f07836520 <col:8> col:8 implicit B3 'void (const struct B3 &)' inline default noexcept-unevaluated 0x7f8f07836520
|   `-ParmVarDecl 0x7f8f07836650 <col:8> col:8 'const struct B3 &'
|-CXXRecordDecl 0x7f8f07833fd8 <line:20:1, line:24:1> line:20:8 referenced struct D2 definition
| |-public 'struct B2'
| |-public 'struct B3'
| |-CXXRecordDecl 0x7f8f07834190 <col:1, col:8> col:8 implicit referenced struct D2
| |-CXXConstructorDecl 0x7f8f07834298 <line:21:5, col:11> col:5 used D2 'void (void)'
| | |-CXXCtorInitializer 'struct B1'
| | | `-CXXConstructExpr 0x7f8f078362b8 <col:5> 'struct B1' 'void (void)'
| | |-CXXCtorInitializer 'struct B2'
| | | `-CXXConstructExpr 0x7f8f078364b8 <col:5> 'struct B2' 'void (void)'
| | |-CXXCtorInitializer 'struct B3'
| | | `-CXXConstructExpr 0x7f8f078366b8 <col:5> 'struct B3' 'void (void)'
| | `-CompoundStmt 0x7f8f07836738 <col:10, col:11>
| |-CXXDestructorDecl 0x7f8f07836000 <line:23:5, col:20> col:13 used ~D2 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f8f07836750 <col:19, col:20>
| |-CXXMethodDecl 0x7f8f07836138 <line:20:8, <invalid sloc>> col:8 implicit operator= 'struct D2 &(const struct D2 &)' inline default noexcept-unevaluated 0x7f8f07836138
| | `-ParmVarDecl 0x7f8f07836250 <col:8> col:8 'const struct D2 &'
| `-CXXConstructorDecl 0x7f8f0783c978 <col:8> col:8 implicit D2 'void (const struct D2 &)' inline default noexcept-unevaluated 0x7f8f0783c978
|   `-ParmVarDecl 0x7f8f0783caa0 <col:8> col:8 'const struct D2 &'
|-CXXRecordDecl 0x7f8f07836768 <line:27:1, line:50:1> line:27:7 referenced class P definition
| |-CXXRecordDecl 0x7f8f07836888 <col:1, col:7> col:7 implicit referenced class P
| |-AccessSpecDecl 0x7f8f07836920 <line:28:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f8f078369b8 <line:29:5, col:10> col:5 used P 'void (void)'
| | |-CXXCtorInitializer Field 0x7f8f07837508 '_x' 'double'
| | | `-CXXDefaultInitExpr 0x7f8f07837628 <col:5> 'double'
| | |-CXXCtorInitializer Field 0x7f8f07837568 '_y' 'double'
| | | `-CXXDefaultInitExpr 0x7f8f07837670 <col:5> 'double'
| | `-CompoundStmt 0x7f8f078376c8 <col:9, col:10>
| |-CXXConstructorDecl 0x7f8f07836bc0 <line:31:5, col:43> col:5 used P 'void (double, double)'
| | |-ParmVarDecl 0x7f8f07836a78 <col:7, col:14> col:14 used x 'double'
| | |-ParmVarDecl 0x7f8f07836af0 <col:17, col:24> col:24 used y 'double'
| | |-CXXCtorInitializer Field 0x7f8f07837508 '_x' 'double'
| | | `-InitListExpr 0x7f8f07837750 <col:31, col:33> 'double'
| | |   `-ImplicitCastExpr 0x7f8f07837790 <col:32> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8f078376e0 <col:32> 'double' lvalue ParmVar 0x7f8f07836a78 'x' 'double'
| | |-CXXCtorInitializer Field 0x7f8f07837568 '_y' 'double'
| | | `-InitListExpr 0x7f8f07837848 <col:38, col:40> 'double'
| | |   `-ImplicitCastExpr 0x7f8f07837888 <col:39> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8f078377d8 <col:39> 'double' lvalue ParmVar 0x7f8f07836af0 'y' 'double'
| | `-CompoundStmt 0x7f8f078378e0 <col:42, col:43>
| |-CXXConstructorDecl 0x7f8f07836d80 <line:33:5, col:47> col:5 used P 'void (const class P &)'
| | |-ParmVarDecl 0x7f8f07836cb8 <col:7, col:16> col:16 used rhs 'const class P &'
| | |-CXXCtorInitializer Field 0x7f8f07837508 '_x' 'double'
| | | `-InitListExpr 0x7f8f078379a0 <col:25, col:32> 'double'
| | |   `-ImplicitCastExpr 0x7f8f078379e0 <col:26, col:30> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f8f07837920 <col:26, col:30> 'const double' lvalue ._x 0x7f8f07837508
| | |       `-DeclRefExpr 0x7f8f078378f8 <col:26> 'const class P' lvalue ParmVar 0x7f8f07836cb8 'rhs' 'const class P &'
| | |-CXXCtorInitializer Field 0x7f8f07837568 '_y' 'double'
| | | `-InitListExpr 0x7f8f07837ad0 <col:37, col:44> 'double'
| | |   `-ImplicitCastExpr 0x7f8f07837b10 <col:38, col:42> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f8f07837a50 <col:38, col:42> 'const double' lvalue ._y 0x7f8f07837568
| | |       `-DeclRefExpr 0x7f8f07837a28 <col:38> 'const class P' lvalue ParmVar 0x7f8f07836cb8 'rhs' 'const class P &'
| | `-CompoundStmt 0x7f8f07837b68 <col:46, col:47>
| |-CXXDestructorDecl 0x7f8f07836e80 <line:35:5, col:19> col:13 used ~P 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f8f07837b80 <col:18, col:19>
| |-CXXMethodDecl 0x7f8f07837428 <line:37:5, line:45:5> line:37:8 used operator= 'class P &(const class P &)'
| | |-ParmVarDecl 0x7f8f07836f30 <col:18, col:27> col:27 used rhs 'const class P &'
| | `-CompoundStmt 0x7f8f07837f38 <line:38:5, line:45:5>
| |   |-IfStmt 0x7f8f07837cd0 <line:39:9, line:41:9>
| |   | |-<<<NULL>>>
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x7f8f07837c38 <line:39:13, col:21> '_Bool' '=='
| |   | | |-UnaryOperator 0x7f8f07837be8 <col:13, col:14> 'const class P *' prefix '&'
| |   | | | `-DeclRefExpr 0x7f8f07837b98 <col:14> 'const class P' lvalue ParmVar 0x7f8f07836f30 'rhs' 'const class P &'
| |   | | `-ImplicitCastExpr 0x7f8f07837c20 <col:21> 'const class P *' <NoOp>
| |   | |   `-CXXThisExpr 0x7f8f07837c08 <col:21> 'class P *' this
| |   | |-CompoundStmt 0x7f8f07837cb0 <col:27, line:41:9>
| |   | | `-ReturnStmt 0x7f8f07837c98 <line:40:13, col:21>
| |   | |   `-UnaryOperator 0x7f8f07837c78 <col:20, col:21> 'class P' lvalue prefix '*'
| |   | |     `-CXXThisExpr 0x7f8f07837c60 <col:21> 'class P *' this
| |   | `-<<<NULL>>>
| |   |-BinaryOperator 0x7f8f07837dd0 <line:42:9, col:18> 'double' lvalue '='
| |   | |-MemberExpr 0x7f8f07837d20 <col:9> 'double' lvalue ->_x 0x7f8f07837508
| |   | | `-CXXThisExpr 0x7f8f07837d08 <col:9> 'class P *' this
| |   | `-ImplicitCastExpr 0x7f8f07837db8 <col:14, col:18> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f8f07837d80 <col:14, col:18> 'const double' lvalue ._x 0x7f8f07837508
| |   |     `-DeclRefExpr 0x7f8f07837d58 <col:14> 'const class P' lvalue ParmVar 0x7f8f07836f30 'rhs' 'const class P &'
| |   |-BinaryOperator 0x7f8f07837ec0 <line:43:9, col:18> 'double' lvalue '='
| |   | |-MemberExpr 0x7f8f07837e10 <col:9> 'double' lvalue ->_y 0x7f8f07837568
| |   | | `-CXXThisExpr 0x7f8f07837df8 <col:9> 'class P *' this
| |   | `-ImplicitCastExpr 0x7f8f07837ea8 <col:14, col:18> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f8f07837e70 <col:14, col:18> 'const double' lvalue ._y 0x7f8f07837568
| |   |     `-DeclRefExpr 0x7f8f07837e48 <col:14> 'const class P' lvalue ParmVar 0x7f8f07836f30 'rhs' 'const class P &'
| |   `-ReturnStmt 0x7f8f07837f20 <line:44:9, col:17>
| |     `-UnaryOperator 0x7f8f07837f00 <col:16, col:17> 'class P' lvalue prefix '*'
| |       `-CXXThisExpr 0x7f8f07837ee8 <col:17> 'class P *' this
| |-AccessSpecDecl 0x7f8f078374c8 <line:47:1, col:8> col:1 private
| |-FieldDecl 0x7f8f07837508 <line:48:5, col:17> col:12 referenced _x 'double'
| | `-FloatingLiteral 0x7f8f078375e8 <col:17> 'double' 0.000000e+00
| `-FieldDecl 0x7f8f07837568 <line:49:5, col:17> col:12 referenced _y 'double'
|   `-FloatingLiteral 0x7f8f07837608 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7f8f07837f70 <line:52:1, line:76:1> line:52:7 referenced class P3 definition
| |-virtual public 'class P'
| |-CXXRecordDecl 0x7f8f078380f0 <col:1, col:7> col:7 implicit referenced class P3
| |-AccessSpecDecl 0x7f8f07838188 <line:53:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f8f07838218 <line:54:5, col:11> col:5 used P3 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f8f07838bb8 <col:5> 'class P' 'void (void)'
| | |-CXXCtorInitializer Field 0x7f8f07838b10 '_z' 'double'
| | | `-CXXDefaultInitExpr 0x7f8f07838c20 <col:5> 'double'
| | `-CompoundStmt 0x7f8f07838c78 <col:10, col:11>
| |-CXXConstructorDecl 0x7f8f078384e0 <line:56:5, col:56> col:5 P3 'void (double, double, double)'
| | |-ParmVarDecl 0x7f8f078382d8 <col:8, col:15> col:15 used x 'double'
| | |-ParmVarDecl 0x7f8f07838350 <col:18, col:25> col:25 used y 'double'
| | |-ParmVarDecl 0x7f8f07838400 <col:28, col:35> col:35 used z 'double'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f8f07838d58 <col:40, col:46> 'class P' 'void (double, double)'
| | |   |-ImplicitCastExpr 0x7f8f07838d28 <col:42> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7f8f07838c90 <col:42> 'double' lvalue ParmVar 0x7f8f078382d8 'x' 'double'
| | |   `-ImplicitCastExpr 0x7f8f07838d40 <col:45> 'double' <LValueToRValue>
| | |     `-DeclRefExpr 0x7f8f07838cb8 <col:45> 'double' lvalue ParmVar 0x7f8f07838350 'y' 'double'
| | |-CXXCtorInitializer Field 0x7f8f07838b10 '_z' 'double'
| | | `-ImplicitCastExpr 0x7f8f07838e18 <col:52> 'double' <LValueToRValue>
| | |   `-DeclRefExpr 0x7f8f07838dc0 <col:52> 'double' lvalue ParmVar 0x7f8f07838400 'z' 'double'
| | `-CompoundStmt 0x7f8f07838e68 <col:55, col:56>
| |-CXXConstructorDecl 0x7f8f078386a0 <line:58:5, col:45> col:5 P3 'void (const class P3 &)'
| | |-ParmVarDecl 0x7f8f078385d8 <col:8, col:18> col:18 used rhs 'const class P3 &'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f8f07838f20 <col:25, col:30> 'class P' 'void (const class P &)'
| | |   `-ImplicitCastExpr 0x7f8f07838f00 <col:27> 'const class P' lvalue <DerivedToBase (virtual P)>
| | |     `-DeclRefExpr 0x7f8f07838e80 <col:27> 'const class P3' lvalue ParmVar 0x7f8f078385d8 'rhs' 'const class P3 &'
| | |-CXXCtorInitializer Field 0x7f8f07838b10 '_z' 'double'
| | | `-InitListExpr 0x7f8f07839028 <col:35, col:42> 'double'
| | |   `-ImplicitCastExpr 0x7f8f07839068 <col:36, col:40> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x7f8f07838fa8 <col:36, col:40> 'const double' lvalue ._z 0x7f8f07838b10
| | |       `-DeclRefExpr 0x7f8f07838f80 <col:36> 'const class P3' lvalue ParmVar 0x7f8f078385d8 'rhs' 'const class P3 &'
| | `-CompoundStmt 0x7f8f078390c0 <col:44, col:45>
| |-CXXDestructorDecl 0x7f8f078387a0 <line:60:5, col:20> col:13 used ~P3 'void (void) noexcept' virtual
| | `-CompoundStmt 0x7f8f078390d8 <col:19, col:20>
| |-CXXMethodDecl 0x7f8f07838940 <line:62:5, line:70:5> line:62:9 operator= 'class P3 &(const class P3 &)'
| | |-ParmVarDecl 0x7f8f07838850 <col:19, col:29> col:29 used rhs 'const class P3 &'
| | `-CompoundStmt 0x7f8f078398f0 <line:63:5, line:70:5>
| |   |-IfStmt 0x7f8f07839230 <line:64:9, line:66:9>
| |   | |-<<<NULL>>>
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x7f8f07839198 <line:64:13, col:21> '_Bool' '=='
| |   | | |-UnaryOperator 0x7f8f07839148 <col:13, col:14> 'const class P3 *' prefix '&'
| |   | | | `-DeclRefExpr 0x7f8f078390f0 <col:14> 'const class P3' lvalue ParmVar 0x7f8f07838850 'rhs' 'const class P3 &'
| |   | | `-ImplicitCastExpr 0x7f8f07839180 <col:21> 'const class P3 *' <NoOp>
| |   | |   `-CXXThisExpr 0x7f8f07839168 <col:21> 'class P3 *' this
| |   | |-CompoundStmt 0x7f8f07839210 <col:27, line:66:9>
| |   | | `-ReturnStmt 0x7f8f078391f8 <line:65:13, col:21>
| |   | |   `-UnaryOperator 0x7f8f078391d8 <col:20, col:21> 'class P3' lvalue prefix '*'
| |   | |     `-CXXThisExpr 0x7f8f078391c0 <col:21> 'class P3 *' this
| |   | `-<<<NULL>>>
| |   |-CXXMemberCallExpr 0x7f8f07839328 <line:67:9, col:31> 'class P' lvalue
| |   | |-MemberExpr 0x7f8f078392b0 <col:9, col:26> '<bound member function type>' ->operator= 0x7f8f07837428
| |   | | `-ImplicitCastExpr 0x7f8f07839358 <col:9> 'class P *' <UncheckedDerivedToBase (virtual P)>
| |   | |   `-CXXThisExpr 0x7f8f07839268 <col:9> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7f8f07839378 <col:28> 'const class P' lvalue <DerivedToBase (virtual P)>
| |   |   `-DeclRefExpr 0x7f8f07839300 <col:28> 'const class P3' lvalue ParmVar 0x7f8f07838850 'rhs' 'const class P3 &'
| |   |-BinaryOperator 0x7f8f07839878 <line:68:9, col:18> 'double' lvalue '='
| |   | |-MemberExpr 0x7f8f078393b0 <col:9> 'double' lvalue ->_z 0x7f8f07838b10
| |   | | `-CXXThisExpr 0x7f8f07839398 <col:9> 'class P3 *' this
| |   | `-ImplicitCastExpr 0x7f8f07839860 <col:14, col:18> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f8f07839828 <col:14, col:18> 'const double' lvalue ._z 0x7f8f07838b10
| |   |     `-DeclRefExpr 0x7f8f07839800 <col:14> 'const class P3' lvalue ParmVar 0x7f8f07838850 'rhs' 'const class P3 &'
| |   `-ReturnStmt 0x7f8f078398d8 <line:69:9, col:17>
| |     `-UnaryOperator 0x7f8f078398b8 <col:16, col:17> 'class P3' lvalue prefix '*'
| |       `-CXXThisExpr 0x7f8f078398a0 <col:17> 'class P3 *' this
| |-CXXMethodDecl 0x7f8f07838a38 <line:72:5, col:37> col:20 used z 'double (void)' virtual
| | `-CompoundStmt 0x7f8f078399a8 <col:24, col:37>
| |   `-ReturnStmt 0x7f8f07839990 <col:26, col:33>
| |     `-ImplicitCastExpr 0x7f8f07839978 <col:33> 'double' <LValueToRValue>
| |       `-MemberExpr 0x7f8f07839940 <col:33> 'double' lvalue ->_z 0x7f8f07838b10
| |         `-CXXThisExpr 0x7f8f07839928 <col:33> 'class P3 *' this
| |-AccessSpecDecl 0x7f8f07838ad0 <line:74:1, col:10> col:1 protected
| `-FieldDecl 0x7f8f07838b10 <line:75:5, col:17> col:12 referenced _z 'double'
|   `-FloatingLiteral 0x7f8f07838b98 <col:17> 'double' 0.000000e+00
|-CXXRecordDecl 0x7f8f078399c8 <line:78:1, line:83:1> line:78:7 referenced class V definition
| |-virtual public 'class P'
| |-CXXRecordDecl 0x7f8f07839b40 <col:1, col:7> col:7 implicit referenced class V
| |-AccessSpecDecl 0x7f8f07839bd8 <line:79:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f8f07839c68 <line:80:5, col:10> col:5 used V 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f8f0783a018 <col:5> 'class P' 'void (void)'
| | `-CompoundStmt 0x7f8f0783a088 <col:9, col:10>
| |-CXXDestructorDecl 0x7f8f07839d60 <line:82:5, col:11> col:5 used ~V 'void (void) noexcept'
| | `-CompoundStmt 0x7f8f0783a0a0 <col:10, col:11>
| |-CXXMethodDecl 0x7f8f07839e98 <line:78:7, <invalid sloc>> col:7 implicit operator= 'class V &(const class V &)' inline default noexcept-unevaluated 0x7f8f07839e98
| | `-ParmVarDecl 0x7f8f07839fb0 <col:7> col:7 'const class V &'
| `-CXXConstructorDecl 0x7f8f0783bc38 <col:7> col:7 implicit V 'void (const class V &)' inline default noexcept-unevaluated 0x7f8f0783bc38
|   `-ParmVarDecl 0x7f8f0783bd60 <col:7> col:7 'const class V &'
|-CXXRecordDecl 0x7f8f0783a0b8 <line:85:1, line:90:1> line:85:7 referenced class V3 definition
| |-public 'class P3'
| |-public 'class V'
| |-CXXRecordDecl 0x7f8f0783a270 <col:1, col:7> col:7 implicit referenced class V3
| |-AccessSpecDecl 0x7f8f0783a308 <line:86:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f8f0783a398 <line:87:5, col:11> col:5 used V3 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f8f0783a748 <col:5> 'class P' 'void (void)'
| | |-CXXCtorInitializer 'class P3'
| | | `-CXXConstructExpr 0x7f8f0783a7b0 <col:5> 'class P3' 'void (void)'
| | |-CXXCtorInitializer 'class V'
| | | `-CXXConstructExpr 0x7f8f0783bdc8 <col:5> 'class V' 'void (void)'
| | `-CompoundStmt 0x7f8f0783be48 <col:10, col:11>
| |-CXXDestructorDecl 0x7f8f0783a490 <line:89:5, col:12> col:5 used ~V3 'void (void) noexcept'
| | `-CompoundStmt 0x7f8f0783be60 <col:11, col:12>
| |-CXXMethodDecl 0x7f8f0783a5c8 <line:85:7, <invalid sloc>> col:7 implicit operator= 'class V3 &(const class V3 &)' inline default noexcept-unevaluated 0x7f8f0783a5c8
| | `-ParmVarDecl 0x7f8f0783a6e0 <col:7> col:7 'const class V3 &'
| `-CXXConstructorDecl 0x7f8f0783c530 <col:7> col:7 implicit V3 'void (const class V3 &)' inline default noexcept-unevaluated 0x7f8f0783c530
|   `-ParmVarDecl 0x7f8f0783c660 <col:7> col:7 'const class V3 &'
|-CXXRecordDecl 0x7f8f0783be78 <line:92:1, line:97:1> line:92:7 referenced class PV definition
| |-public 'class V3'
| |-CXXRecordDecl 0x7f8f0783bff0 <col:1, col:7> col:7 implicit referenced class PV
| |-AccessSpecDecl 0x7f8f0783c088 <line:93:1, col:7> col:1 public
| |-CXXConstructorDecl 0x7f8f0783c118 <line:94:5, col:11> col:5 used PV 'void (void)'
| | |-CXXCtorInitializer 'class P'
| | | `-CXXConstructExpr 0x7f8f0783c4c8 <col:5> 'class P' 'void (void)'
| | |-CXXCtorInitializer 'class V3'
| | | `-CXXConstructExpr 0x7f8f0783c6c8 <col:5> 'class V3' 'void (void)'
| | `-CompoundStmt 0x7f8f0783c740 <col:10, col:11>
| |-CXXDestructorDecl 0x7f8f0783c210 <line:96:5, col:12> col:5 used ~PV 'void (void) noexcept'
| | `-CompoundStmt 0x7f8f0783c758 <col:11, col:12>
| |-CXXMethodDecl 0x7f8f0783c348 <line:92:7, <invalid sloc>> col:7 implicit operator= 'class PV &(const class PV &)' inline default noexcept-unevaluated 0x7f8f0783c348
| | `-ParmVarDecl 0x7f8f0783c460 <col:7> col:7 'const class PV &'
| `-CXXConstructorDecl 0x7f8f0783dc40 <col:7> col:7 implicit PV 'void (const class PV &)' inline default noexcept-unevaluated 0x7f8f0783dc40
|   `-ParmVarDecl 0x7f8f0783dd70 <col:7> col:7 'const class PV &'
`-FunctionDecl 0x7f8f0783c7c8 <line:99:1, line:108:1> line:99:5 main 'int (void)'
  `-CompoundStmt 0x7f8f0783de78 <line:100:1, line:108:1>
    |-CompoundStmt 0x7f8f0783cb50 <line:101:5, line:103:5>
    | `-DeclStmt 0x7f8f0783cb38 <line:102:9, col:16>
    |   `-VarDecl 0x7f8f0783c8d8 <col:9, col:15> col:12 d2 'struct D2' listinit
    |     `-CXXConstructExpr 0x7f8f0783cb08 <col:12, col:15> 'struct D2' 'void (void)'
    |-CompoundStmt 0x7f8f0783de20 <line:104:5, line:106:5>
    | `-DeclStmt 0x7f8f0783de08 <line:105:9, col:16>
    |   `-VarDecl 0x7f8f0783cb80 <col:9, col:15> col:12 pv 'class PV' listinit
    |     `-CXXConstructExpr 0x7f8f0783ddd8 <col:12, col:15> 'class PV' 'void (void)'
    `-ReturnStmt 0x7f8f0783de60 <line:107:5, col:12>
      `-IntegerLiteral 0x7f8f0783de40 <col:12> 'int' 0

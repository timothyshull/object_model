TranslationUnitDecl 0x7fa5fa831ad0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa5fa832060 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa5fa831d40 '__int128'
|-TypedefDecl 0x7fa5fa8320d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa5fa831d60 'unsigned __int128'
|-TypedefDecl 0x7fa5fa832418 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa5fa8321c0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7fa5fa832128 '__NSConstantString_tag'
|-TypedefDecl 0x7fa5fa8324b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa5fa832470 'char *'
|   `-BuiltinType 0x7fa5fa831b60 'char'
|-TypedefDecl 0x7fa5fa864c00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa5fa832790 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa5fa8325a0 'struct __va_list_tag'
|     `-CXXRecord 0x7fa5fa832508 '__va_list_tag'
|-CXXRecordDecl 0x7fa5fa864c58 <object_model_refined/5_ctor_dtor_semantics/02_object_construction_without_inheritance.cpp:1:1, line:5:1> line:1:8 referenced struct Point definition
| |-CXXRecordDecl 0x7fa5fa864d78 <col:1, col:8> col:8 implicit struct Point
| |-FieldDecl 0x7fa5fa864e28 <line:2:5, col:12> col:12 referenced x 'double'
| |-FieldDecl 0x7fa5fa864e88 <line:3:5, col:12> col:12 referenced y 'double'
| |-FieldDecl 0x7fa5fa864ee8 <line:4:5, col:12> col:12 referenced z 'double'
| |-CXXMethodDecl 0x7fa5fa8734b8 <line:1:8> col:8 implicit used constexpr operator= 'struct Point &(const struct Point &) noexcept' inline default trivial
| | |-ParmVarDecl 0x7fa5fa8735d0 <col:8> col:8 used 'const struct Point &'
| | `-CompoundStmt 0x7fa5fa873b80 <col:8>
| |   |-BinaryOperator 0x7fa5fa873928 <col:8> 'double' lvalue '='
| |   | |-MemberExpr 0x7fa5fa873878 <col:8> 'double' lvalue ->x 0x7fa5fa864e28
| |   | | `-CXXThisExpr 0x7fa5fa873860 <col:8> 'struct Point *' this
| |   | `-ImplicitCastExpr 0x7fa5fa873910 <col:8> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7fa5fa8738d8 <col:8> 'const double' lvalue .x 0x7fa5fa864e28
| |   |     `-DeclRefExpr 0x7fa5fa8738b0 <col:8> 'const struct Point' lvalue ParmVar 0x7fa5fa8735d0 '' 'const struct Point &'
| |   |-BinaryOperator 0x7fa5fa873a18 <col:8> 'double' lvalue '='
| |   | |-MemberExpr 0x7fa5fa873968 <col:8> 'double' lvalue ->y 0x7fa5fa864e88
| |   | | `-CXXThisExpr 0x7fa5fa873950 <col:8> 'struct Point *' this
| |   | `-ImplicitCastExpr 0x7fa5fa873a00 <col:8> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7fa5fa8739c8 <col:8> 'const double' lvalue .y 0x7fa5fa864e88
| |   |     `-DeclRefExpr 0x7fa5fa8739a0 <col:8> 'const struct Point' lvalue ParmVar 0x7fa5fa8735d0 '' 'const struct Point &'
| |   |-BinaryOperator 0x7fa5fa873b08 <col:8> 'double' lvalue '='
| |   | |-MemberExpr 0x7fa5fa873a58 <col:8> 'double' lvalue ->z 0x7fa5fa864ee8
| |   | | `-CXXThisExpr 0x7fa5fa873a40 <col:8> 'struct Point *' this
| |   | `-ImplicitCastExpr 0x7fa5fa873af0 <col:8> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7fa5fa873ab8 <col:8> 'const double' lvalue .z 0x7fa5fa864ee8
| |   |     `-DeclRefExpr 0x7fa5fa873a90 <col:8> 'const struct Point' lvalue ParmVar 0x7fa5fa8735d0 '' 'const struct Point &'
| |   `-ReturnStmt 0x7fa5fa873b68 <col:8>
| |     `-UnaryOperator 0x7fa5fa873b48 <col:8> 'struct Point' lvalue prefix '*'
| |       `-CXXThisExpr 0x7fa5fa873b30 <col:8> 'struct Point *' this
| |-CXXMethodDecl 0x7fa5fa873668 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Point &(struct Point &&)' inline default trivial noexcept-unevaluated 0x7fa5fa873668
| | `-ParmVarDecl 0x7fa5fa873780 <col:8> col:8 'struct Point &&'
| |-CXXDestructorDecl 0x7fa5fa873cb8 <col:8> col:8 implicit referenced ~Point 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7fa5fa873e38 <col:8> col:8 implicit Point 'void (void)' inline default trivial noexcept-unevaluated 0x7fa5fa873e38
| |-CXXConstructorDecl 0x7fa5fa873f18 <col:8> col:8 implicit constexpr Point 'void (const struct Point &)' inline default trivial noexcept-unevaluated 0x7fa5fa873f18
| | `-ParmVarDecl 0x7fa5fa874040 <col:8> col:8 'const struct Point &'
| `-CXXConstructorDecl 0x7fa5fa8740a8 <col:8> col:8 implicit used constexpr Point 'void (struct Point &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x7fa5fa8741d0 <col:8> col:8 used 'struct Point &&'
|   |-CXXCtorInitializer Field 0x7fa5fa864e28 'x' 'double'
|   | `-ImplicitCastExpr 0x7fa5fa874328 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7fa5fa8742f0 <col:8> 'double' xvalue .x 0x7fa5fa864e28
|   |     `-CXXStaticCastExpr 0x7fa5fa8742c0 <col:8> 'struct Point' xvalue static_cast<struct Point &&> <NoOp>
|   |       `-DeclRefExpr 0x7fa5fa874288 <col:8> 'struct Point' lvalue ParmVar 0x7fa5fa8741d0 '' 'struct Point &&'
|   |-CXXCtorInitializer Field 0x7fa5fa864e88 'y' 'double'
|   | `-ImplicitCastExpr 0x7fa5fa891038 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7fa5fa891000 <col:8> 'double' xvalue .y 0x7fa5fa864e88
|   |     `-CXXStaticCastExpr 0x7fa5fa8743a0 <col:8> 'struct Point' xvalue static_cast<struct Point &&> <NoOp>
|   |       `-DeclRefExpr 0x7fa5fa874368 <col:8> 'struct Point' lvalue ParmVar 0x7fa5fa8741d0 '' 'struct Point &&'
|   |-CXXCtorInitializer Field 0x7fa5fa864ee8 'z' 'double'
|   | `-ImplicitCastExpr 0x7fa5fa891118 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7fa5fa8910e0 <col:8> 'double' xvalue .z 0x7fa5fa864ee8
|   |     `-CXXStaticCastExpr 0x7fa5fa8910b0 <col:8> 'struct Point' xvalue static_cast<struct Point &&> <NoOp>
|   |       `-DeclRefExpr 0x7fa5fa891078 <col:8> 'struct Point' lvalue ParmVar 0x7fa5fa8741d0 '' 'struct Point &&'
|   `-CompoundStmt 0x7fa5fa891170 <col:8>
|-VarDecl 0x7fa5fa864f60 <line:7:1, col:14> col:7 global 'struct Point' listinit
| `-InitListExpr 0x7fa5fa865040 <col:13, col:14> 'struct Point'
|   |-ImplicitValueInitExpr 0x7fa5fa865098 <<invalid sloc>> 'double'
|   |-ImplicitValueInitExpr 0x7fa5fa8650a8 <<invalid sloc>> 'double'
|   `-ImplicitValueInitExpr 0x7fa5fa8650b8 <<invalid sloc>> 'double'
|-FunctionDecl 0x7fa5fa8651e0 <line:9:1, line:16:1> line:9:7 used func1 'struct Point (void)'
| `-CompoundStmt 0x7fa5fa8911d8 <line:10:1, line:16:1>
|   |-DeclStmt 0x7fa5fa8653f8 <line:11:5, col:31>
|   | `-VarDecl 0x7fa5fa865288 <col:5, col:30> col:11 used local 'struct Point' nrvo listinit
|   |   `-InitListExpr 0x7fa5fa8653a0 <col:16, col:30> 'struct Point'
|   |     |-FloatingLiteral 0x7fa5fa8652e8 <col:17> 'double' 0.000000e+00
|   |     |-FloatingLiteral 0x7fa5fa865308 <col:22> 'double' 1.000000e+00
|   |     `-FloatingLiteral 0x7fa5fa865328 <col:27> 'double' 2.000000e+00
|   |-DeclStmt 0x7fa5fa865bb8 <line:12:5, col:30>
|   | `-VarDecl 0x7fa5fa865448 <col:5, col:29> col:12 used heap 'struct Point *' cinit
|   |   `-CXXNewExpr 0x7fa5fa865b60 <col:19, col:29> 'struct Point *' Function 0x7fa5fa865538 'operator new' 'void *(unsigned long)'
|   |     `-InitListExpr 0x7fa5fa865ad8 <col:28, col:29> 'struct Point'
|   |       |-ImplicitValueInitExpr 0x7fa5fa865b30 <<invalid sloc>> 'double'
|   |       |-ImplicitValueInitExpr 0x7fa5fa865b40 <<invalid sloc>> 'double'
|   |       `-ImplicitValueInitExpr 0x7fa5fa865b50 <<invalid sloc>> 'double'
|   |-CXXOperatorCallExpr 0x7fa5fa873c30 <line:13:5, col:13> 'struct Point' lvalue
|   | |-ImplicitCastExpr 0x7fa5fa873c18 <col:11> 'struct Point &(*)(const struct Point &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fa5fa873838 <col:11> 'struct Point &(const struct Point &) noexcept' lvalue CXXMethod 0x7fa5fa8734b8 'operator=' 'struct Point &(const struct Point &) noexcept'
|   | |-UnaryOperator 0x7fa5fa873418 <col:5, col:6> 'struct Point' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fa5fa873400 <col:6> 'struct Point *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fa5fa865bd0 <col:6> 'struct Point *' lvalue Var 0x7fa5fa865448 'heap' 'struct Point *'
|   | `-ImplicitCastExpr 0x7fa5fa8737e8 <col:13> 'const struct Point' lvalue <NoOp>
|   |   `-DeclRefExpr 0x7fa5fa873438 <col:13> 'struct Point' lvalue Var 0x7fa5fa865288 'local' 'struct Point'
|   |-CXXDeleteExpr 0x7fa5fa873dc8 <line:14:5, col:12> 'void' Function 0x7fa5fa865848 'operator delete' 'void (void *) noexcept'
|   | `-ImplicitCastExpr 0x7fa5fa873ca0 <col:12> 'struct Point *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fa5fa873c78 <col:12> 'struct Point *' lvalue Var 0x7fa5fa865448 'heap' 'struct Point *'
|   `-ReturnStmt 0x7fa5fa8911c0 <line:15:5, col:12>
|     `-CXXConstructExpr 0x7fa5fa891188 <col:12> 'struct Point' 'void (struct Point &&) noexcept' elidable
|       `-ImplicitCastExpr 0x7fa5fa874238 <col:12> 'struct Point' xvalue <NoOp>
|         `-DeclRefExpr 0x7fa5fa873df0 <col:12> 'struct Point' lvalue Var 0x7fa5fa865288 'local' 'struct Point'
|-FunctionDecl 0x7fa5fa865538 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7fa5fa865618 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fa5fa8655d0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fa5fa865680 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7fa5fa865760 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7fa5fa865718 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fa5fa865848 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7fa5fa865928 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fa5fa8658e0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7fa5fa865990 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7fa5fa865a70 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7fa5fa865a28 <<invalid sloc>> Implicit Default
`-FunctionDecl 0x7fa5fa891278 <line:18:1, line:22:1> line:18:5 main 'int (void)'
  `-CompoundStmt 0x7fa5fa891498 <line:19:1, line:22:1>
    |-CallExpr 0x7fa5fa891400 <line:20:5, col:11> 'struct Point'
    | `-ImplicitCastExpr 0x7fa5fa8913e8 <col:5> 'struct Point (*)(void)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x7fa5fa891390 <col:5> 'struct Point (void)' lvalue Function 0x7fa5fa8651e0 'func1' 'struct Point (void)'
    `-ReturnStmt 0x7fa5fa891480 <line:21:5, col:12>
      `-IntegerLiteral 0x7fa5fa891460 <col:12> 'int' 0

TranslationUnitDecl 0x7f9d468198d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9d46819e60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9d46819b40 '__int128'
|-TypedefDecl 0x7f9d46819ed0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9d46819b60 'unsigned __int128'
|-TypedefDecl 0x7f9d4681a218 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9d46819fc0 'struct __NSConstantString_tag'
|   `-CXXRecord 0x7f9d46819f28 '__NSConstantString_tag'
|-TypedefDecl 0x7f9d4681a2b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9d4681a270 'char *'
|   `-BuiltinType 0x7f9d46819960 'char'
|-TypedefDecl 0x7f9d4684c000 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9d4681a590 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9d4681a3a0 'struct __va_list_tag'
|     `-CXXRecord 0x7f9d4681a308 '__va_list_tag'
|-CXXRecordDecl 0x7f9d4684c058 </Users/tskull/Documents/Programming/Cpp/object_model_refined/5_ctor_dtor_semantics/02_object_construction_without_inheritance.cpp:1:1, line:5:1> line:1:8 referenced struct Point definition
| |-CXXRecordDecl 0x7f9d4684c178 <col:1, col:8> col:8 implicit struct Point
| |-FieldDecl 0x7f9d4684c228 <line:2:5, col:12> col:12 referenced x 'double'
| |-FieldDecl 0x7f9d4684c288 <line:3:5, col:12> col:12 referenced y 'double'
| |-FieldDecl 0x7f9d4684c2e8 <line:4:5, col:12> col:12 referenced z 'double'
| |-CXXMethodDecl 0x7f9d4685a8e8 <line:1:8> col:8 implicit used constexpr operator= 'struct Point &(const struct Point &) noexcept' inline default trivial
| | |-ParmVarDecl 0x7f9d4685aa00 <col:8> col:8 used 'const struct Point &'
| | `-CompoundStmt 0x7f9d4685afb0 <col:8>
| |   |-BinaryOperator 0x7f9d4685ad58 <col:8> 'double' lvalue '='
| |   | |-MemberExpr 0x7f9d4685aca8 <col:8> 'double' lvalue ->x 0x7f9d4684c228
| |   | | `-CXXThisExpr 0x7f9d4685ac90 <col:8> 'struct Point *' this
| |   | `-ImplicitCastExpr 0x7f9d4685ad40 <col:8> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f9d4685ad08 <col:8> 'const double' lvalue .x 0x7f9d4684c228
| |   |     `-DeclRefExpr 0x7f9d4685ace0 <col:8> 'const struct Point' lvalue ParmVar 0x7f9d4685aa00 '' 'const struct Point &'
| |   |-BinaryOperator 0x7f9d4685ae48 <col:8> 'double' lvalue '='
| |   | |-MemberExpr 0x7f9d4685ad98 <col:8> 'double' lvalue ->y 0x7f9d4684c288
| |   | | `-CXXThisExpr 0x7f9d4685ad80 <col:8> 'struct Point *' this
| |   | `-ImplicitCastExpr 0x7f9d4685ae30 <col:8> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f9d4685adf8 <col:8> 'const double' lvalue .y 0x7f9d4684c288
| |   |     `-DeclRefExpr 0x7f9d4685add0 <col:8> 'const struct Point' lvalue ParmVar 0x7f9d4685aa00 '' 'const struct Point &'
| |   |-BinaryOperator 0x7f9d4685af38 <col:8> 'double' lvalue '='
| |   | |-MemberExpr 0x7f9d4685ae88 <col:8> 'double' lvalue ->z 0x7f9d4684c2e8
| |   | | `-CXXThisExpr 0x7f9d4685ae70 <col:8> 'struct Point *' this
| |   | `-ImplicitCastExpr 0x7f9d4685af20 <col:8> 'double' <LValueToRValue>
| |   |   `-MemberExpr 0x7f9d4685aee8 <col:8> 'const double' lvalue .z 0x7f9d4684c2e8
| |   |     `-DeclRefExpr 0x7f9d4685aec0 <col:8> 'const struct Point' lvalue ParmVar 0x7f9d4685aa00 '' 'const struct Point &'
| |   `-ReturnStmt 0x7f9d4685af98 <col:8>
| |     `-UnaryOperator 0x7f9d4685af78 <col:8> 'struct Point' lvalue prefix '*'
| |       `-CXXThisExpr 0x7f9d4685af60 <col:8> 'struct Point *' this
| |-CXXMethodDecl 0x7f9d4685aa98 <col:8, <invalid sloc>> col:8 implicit constexpr operator= 'struct Point &(struct Point &&)' inline default trivial noexcept-unevaluated 0x7f9d4685aa98
| | `-ParmVarDecl 0x7f9d4685abb0 <col:8> col:8 'struct Point &&'
| |-CXXDestructorDecl 0x7f9d4685b0e8 <col:8> col:8 implicit referenced ~Point 'void (void) noexcept' inline default trivial
| |-CXXConstructorDecl 0x7f9d4685b268 <col:8> col:8 implicit Point 'void (void)' inline default trivial noexcept-unevaluated 0x7f9d4685b268
| |-CXXConstructorDecl 0x7f9d4685b348 <col:8> col:8 implicit constexpr Point 'void (const struct Point &)' inline default trivial noexcept-unevaluated 0x7f9d4685b348
| | `-ParmVarDecl 0x7f9d4685b470 <col:8> col:8 'const struct Point &'
| `-CXXConstructorDecl 0x7f9d4685b4d8 <col:8> col:8 implicit used constexpr Point 'void (struct Point &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x7f9d4685b600 <col:8> col:8 used 'struct Point &&'
|   |-CXXCtorInitializer Field 0x7f9d4684c228 'x' 'double'
|   | `-ImplicitCastExpr 0x7f9d4685b758 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f9d4685b720 <col:8> 'double' xvalue .x 0x7f9d4684c228
|   |     `-CXXStaticCastExpr 0x7f9d4685b6f0 <col:8> 'struct Point' xvalue static_cast<struct Point &&> <NoOp>
|   |       `-DeclRefExpr 0x7f9d4685b6b8 <col:8> 'struct Point' lvalue ParmVar 0x7f9d4685b600 '' 'struct Point &&'
|   |-CXXCtorInitializer Field 0x7f9d4684c288 'y' 'double'
|   | `-ImplicitCastExpr 0x7f9d46876438 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f9d46876400 <col:8> 'double' xvalue .y 0x7f9d4684c288
|   |     `-CXXStaticCastExpr 0x7f9d4685b7d0 <col:8> 'struct Point' xvalue static_cast<struct Point &&> <NoOp>
|   |       `-DeclRefExpr 0x7f9d4685b798 <col:8> 'struct Point' lvalue ParmVar 0x7f9d4685b600 '' 'struct Point &&'
|   |-CXXCtorInitializer Field 0x7f9d4684c2e8 'z' 'double'
|   | `-ImplicitCastExpr 0x7f9d46876518 <col:8> 'double' <LValueToRValue>
|   |   `-MemberExpr 0x7f9d468764e0 <col:8> 'double' xvalue .z 0x7f9d4684c2e8
|   |     `-CXXStaticCastExpr 0x7f9d468764b0 <col:8> 'struct Point' xvalue static_cast<struct Point &&> <NoOp>
|   |       `-DeclRefExpr 0x7f9d46876478 <col:8> 'struct Point' lvalue ParmVar 0x7f9d4685b600 '' 'struct Point &&'
|   `-CompoundStmt 0x7f9d46876570 <col:8>
|-VarDecl 0x7f9d4684c360 <line:7:1, col:14> col:7 global 'struct Point' listinit
| `-InitListExpr 0x7f9d4684c440 <col:13, col:14> 'struct Point'
|   |-ImplicitValueInitExpr 0x7f9d4684c498 <<invalid sloc>> 'double'
|   |-ImplicitValueInitExpr 0x7f9d4684c4a8 <<invalid sloc>> 'double'
|   `-ImplicitValueInitExpr 0x7f9d4684c4b8 <<invalid sloc>> 'double'
|-FunctionDecl 0x7f9d4684c520 <line:9:1, line:16:1> line:9:7 used func1 'struct Point (void)'
| `-CompoundStmt 0x7f9d468765d8 <line:10:1, line:16:1>
|   |-DeclStmt 0x7f9d4684c738 <line:11:5, col:31>
|   | `-VarDecl 0x7f9d4684c5c8 <col:5, col:30> col:11 used local 'struct Point' nrvo listinit
|   |   `-InitListExpr 0x7f9d4684c6e0 <col:16, col:30> 'struct Point'
|   |     |-FloatingLiteral 0x7f9d4684c628 <col:17> 'double' 0.000000e+00
|   |     |-FloatingLiteral 0x7f9d4684c648 <col:22> 'double' 1.000000e+00
|   |     `-FloatingLiteral 0x7f9d4684c668 <col:27> 'double' 2.000000e+00
|   |-DeclStmt 0x7f9d4684cfc8 <line:12:5, col:30>
|   | `-VarDecl 0x7f9d4684c788 <col:5, col:29> col:12 used heap 'struct Point *' cinit
|   |   `-CXXNewExpr 0x7f9d4684cf70 <col:19, col:29> 'struct Point *' Function 0x7f9d4684c948 'operator new' 'void *(unsigned long)'
|   |     `-InitListExpr 0x7f9d4684cee8 <col:28, col:29> 'struct Point'
|   |       |-ImplicitValueInitExpr 0x7f9d4684cf40 <<invalid sloc>> 'double'
|   |       |-ImplicitValueInitExpr 0x7f9d4684cf50 <<invalid sloc>> 'double'
|   |       `-ImplicitValueInitExpr 0x7f9d4684cf60 <<invalid sloc>> 'double'
|   |-CXXOperatorCallExpr 0x7f9d4685b060 <line:13:5, col:13> 'struct Point' lvalue
|   | |-ImplicitCastExpr 0x7f9d4685b048 <col:11> 'struct Point &(*)(const struct Point &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7f9d4685ac68 <col:11> 'struct Point &(const struct Point &) noexcept' lvalue CXXMethod 0x7f9d4685a8e8 'operator=' 'struct Point &(const struct Point &) noexcept'
|   | |-UnaryOperator 0x7f9d4685a840 <col:5, col:6> 'struct Point' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7f9d4685a828 <col:6> 'struct Point *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7f9d4685a800 <col:6> 'struct Point *' lvalue Var 0x7f9d4684c788 'heap' 'struct Point *'
|   | `-ImplicitCastExpr 0x7f9d4685ac18 <col:13> 'const struct Point' lvalue <NoOp>
|   |   `-DeclRefExpr 0x7f9d4685a860 <col:13> 'struct Point' lvalue Var 0x7f9d4684c5c8 'local' 'struct Point'
|   |-CXXDeleteExpr 0x7f9d4685b1f8 <line:14:5, col:12> 'void' Function 0x7f9d4684cc58 'operator delete' 'void (void *) noexcept'
|   | `-ImplicitCastExpr 0x7f9d4685b0d0 <col:12> 'struct Point *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f9d4685b0a8 <col:12> 'struct Point *' lvalue Var 0x7f9d4684c788 'heap' 'struct Point *'
|   `-ReturnStmt 0x7f9d468765c0 <line:15:5, col:12>
|     `-CXXConstructExpr 0x7f9d46876588 <col:12> 'struct Point' 'void (struct Point &&) noexcept' elidable
|       `-ImplicitCastExpr 0x7f9d4685b668 <col:12> 'struct Point' xvalue <NoOp>
|         `-DeclRefExpr 0x7f9d4685b220 <col:12> 'struct Point' lvalue Var 0x7f9d4684c5c8 'local' 'struct Point'
|-FunctionDecl 0x7f9d4684c948 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x7f9d4684ca28 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f9d4684c9e0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f9d4684ca90 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x7f9d4684cb70 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x7f9d4684cb28 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f9d4684cc58 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x7f9d4684cd38 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f9d4684ccf0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x7f9d4684cda0 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x7f9d4684ce80 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x7f9d4684ce38 <<invalid sloc>> Implicit Default
`-FunctionDecl 0x7f9d46876678 <line:18:1, line:22:1> line:18:5 main 'int (void)'
  `-CompoundStmt 0x7f9d46876898 <line:19:1, line:22:1>
    |-CallExpr 0x7f9d46876800 <line:20:5, col:11> 'struct Point'
    | `-ImplicitCastExpr 0x7f9d468767e8 <col:5> 'struct Point (*)(void)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x7f9d46876790 <col:5> 'struct Point (void)' lvalue Function 0x7f9d4684c520 'func1' 'struct Point (void)'
    `-ReturnStmt 0x7f9d46876880 <line:21:5, col:12>
      `-IntegerLiteral 0x7f9d46876860 <col:12> 'int' 0
